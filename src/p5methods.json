{
  "modules": {
    "Color": {
      "methods": {
        "brightness": {
          "description": "Extracts the HSB brightness value from a color or pixel array.",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        },
        "color": {
          "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n\nNote that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency.\n\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\nstrings and all named color strings are supported. In this case, an alpha\nnumber value as a second argument is not supported, the RGBA form should be\nused.",
          "overloads": [
            [
              {
                "name": "gray",
                "description": "number specifying value between white and black.",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "alpha value relative to current color range\n                                (default is 0-255)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "v1",
                "description": "red or hue value relative to\n                                the current color range",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "value",
                "description": "a color string",
                "type": "String"
              }
            ],
            [
              {
                "name": "values",
                "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                "type": "Number[]"
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "p5.Color"
              }
            ]
          ]
        },
        "green": {
          "description": "Extracts the green value from a color or pixel array.",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        },
        "hue": {
          "description": "Extracts the hue value from a color or pixel array.\n\nHue exists in both HSB and HSL. This function will return the\nHSB-normalized hue when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL-normalized hue otherwise. (The values will only be different if the\nmaximum hue setting for each system is different.)",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        },
        "lerpColor": {
          "description": "Blends two colors to find a third color somewhere between them. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first color, 0.1 is very near the first color, 0.5 is halfway\nin between, etc. An amount below 0 will be treated as 0. Likewise, amounts\nabove 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\nbut necessary because otherwise numbers outside the range will produce\nstrange and unexpected colors.\n\nThe way that colors are interpolated depends on the current color mode.",
          "overloads": [
            [
              {
                "name": "c1",
                "description": "interpolate from this color",
                "type": "p5.Color"
              },
              {
                "name": "c2",
                "description": "interpolate to this color",
                "type": "p5.Color"
              },
              {
                "name": "amt",
                "description": "number between 0 and 1",
                "type": "Number"
              }
            ]
          ]
        },
        "lightness": {
          "description": "Extracts the HSL lightness value from a color or pixel array.",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        },
        "red": {
          "description": "Extracts the red value from a color or pixel array.",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        },
        "saturation": {
          "description": "Extracts the saturation value from a color or pixel array.\n\nSaturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL saturation otherwise.",
          "overloads": [
            [
              {
                "name": "color",
                "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                "type": "p5.Color|Number[]|String"
              }
            ]
          ]
        }
      }
    },
    "Environment": {
      "methods": {
        "cursor": {
          "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. The values for parameters x and y\nmust be less than the dimensions of the image.",
          "overloads": [
            [
              {
                "name": "type",
                "description": "Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\n                              External: path for cursor's images\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n                              For more information on Native CSS cursors and url visit:\n                              https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",
                "type": "String|Constant"
              },
              {
                "name": "x",
                "description": "the horizontal active spot of the cursor (must be less than 32)",
                "type": "Number",
                "optional": true
              },
              {
                "name": "y",
                "description": "the vertical active spot of the cursor (must be less than 32)",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "frameRate": {
          "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within \n<a href=\"#/p5/setup\">setup()</a> is recommended. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"), \nwhich is set to 60 frames per second on most computers. A frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth \nanimations. This is the same as setFrameRate(val).\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns\nthe current framerate. The draw function must run at least once before it will\nreturn a value. This is the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not\nof the type numbers or are non positive also returns current framerate.",
          "overloads": [
            [
              {
                "name": "fps",
                "description": "number of frames to be displayed every second",
                "type": "Number"
              }
            ],
            null
          ]
        },
        "noCursor": {
          "description": "Hides the cursor from view.",
          "overloads": [null]
        },
        "windowResized": {
          "description": "The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once\nevery time the browser window is resized. This is a good place to resize the\ncanvas or do any other adjustments to accommodate the new window size.",
          "overloads": [null]
        },
        "fullscreen": {
          "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow.",
          "overloads": [
            [
              {
                "name": "val",
                "description": "whether the sketch should be in fullscreen mode\nor not",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "pixelDensity": {
          "description": "Sets the pixel scaling for high pixel density displays. By default\npixel density is set to match display density, call pixelDensity(1)\nto turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\nthe current pixel density of the sketch.",
          "overloads": [
            [
              {
                "name": "val",
                "description": "whether or how much the sketch should scale",
                "type": "Number"
              }
            ],
            null
          ]
        },
        "displayDensity": {
          "description": "Returns the pixel density of the current display the sketch is running on.",
          "overloads": [null]
        },
        "getURL": {
          "description": "Gets the current URL. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
          "overloads": [null]
        },
        "getURLPath": {
          "description": "Gets the current URL path as an array. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
          "overloads": [null]
        },
        "getURLParams": {
          "description": "Gets the current URL params as an Object. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
          "overloads": [null]
        },
        "setup": {
          "description": "The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn't\nbe called again after its initial execution.\n\nNote: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\nfunctions, including <a href=\"#/p5/draw\">draw()</a>.",
          "overloads": [null]
        },
        "draw": {
          "description": "Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\nstill be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\nshould never be called explicitly.\n\nIt should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\n<a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\ncode inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\ninside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\n\nThe number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\nthe <a href=\"#/p5/frameRate\">frameRate()</a> function.\n\nThere can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\nexist if you want the code to run continuously, or to process events such\nas <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\nyour program, as shown in the above example.\n\nIt is important to note that the drawing coordinate system will be reset\nat the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\nwithin <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\nundone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\nover time. On the other hand, styling applied (ex: fill, stroke, etc) will\nremain in effect.",
          "overloads": [null]
        },
        "remove": {
          "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it. While all functions and\nvariables and objects created by the p5 library will be removed, any\nother global variables created by your code will remain.",
          "overloads": [null]
        }
      }
    },
    "Shape": {
      "methods": {
        "ellipse": {
          "description": "Draws an ellipse (oval) to the screen. By default, the first two parameters\nset the location of the center of the ellipse, and the third and fourth\nparameters set the shape's width and height. If no height is specified, the\nvalue of width is used for both the width and height. If a negative height or\nwidth is specified, the absolute value is taken.\n\nAn ellipse with equal width and height is a circle.The origin may be changed\nwith the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the center of ellipse.",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the center of ellipse.",
                "type": "Number"
              },
              {
                "name": "w",
                "description": "width of the ellipse.",
                "type": "Number"
              },
              {
                "name": "h",
                "description": "height of the ellipse.",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "w",
                "description": "",
                "type": "Number"
              },
              {
                "name": "h",
                "description": "",
                "type": "Number"
              },
              {
                "name": "detail",
                "description": "number of radial sectors to draw (for WebGL mode)",
                "type": "Integer"
              }
            ]
          ]
        },
        "circle": {
          "description": "Draws a circle to the screen. A circle is a simple closed shape. It is the set\nof all points in a plane that are at a given distance from a given point,\nthe centre. This function is a special case of the ellipse() function, where\nthe width and height of the ellipse are the same. Height and width of the\nellipse correspond to the diameter of the circle. By default, the first two\nparameters set the location of the centre of the circle, the third sets the\ndiameter of the circle.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the centre of the circle.",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the centre of the circle.",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "diameter of the circle.",
                "type": "Number"
              }
            ]
          ]
        },
        "line": {
          "description": "Draws a line (a direct path between two points) to the screen. If called with\nonly 4 parameters, it will draw a line in 2D with a default width of 1 pixel.\nThis width can be modified by using the <a href=\"#/p5/strokeWeight\">\nstrokeWeight()</a> function. A line cannot be filled, therefore the <a\nhref=\"#/p5/fill\">fill()</a> function will not affect the color of a line. So to\ncolor a line, use the <a href=\"#/p5/stroke\">stroke()</a> function.",
          "overloads": [
            [
              {
                "name": "x1",
                "description": "the x-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "the y-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "the x-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "the y-coordinate of the second point",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z1",
                "description": "the z-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z2",
                "description": "the z-coordinate of the second point",
                "type": "Number"
              }
            ]
          ]
        },
        "point": {
          "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nparam is the vertical value for the point. The color of the point is\nchanged with the <a href=\"#/p5/stroke\">stroke()</a> function. The size of the point\ncan be changed with the <a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "the x-coordinate",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "the y-coordinate",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "the z-coordinate (for WebGL mode)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "coordinate_vector",
                "description": "the coordinate vector",
                "type": "p5.Vector"
              }
            ]
          ]
        },
        "quad": {
          "description": "Draws a quad on the canvas. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape.\nz-arguments only work when quad() is used in WEBGL mode.",
          "overloads": [
            [
              {
                "name": "x1",
                "description": "the x-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "the y-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "the x-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "the y-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "the x-coordinate of the third point",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "the y-coordinate of the third point",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "the x-coordinate of the fourth point",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "the y-coordinate of the fourth point",
                "type": "Number"
              },
              {
                "name": "detailX",
                "description": "number of segments in the x-direction",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of segments in the y-direction",
                "type": "Integer",
                "optional": true
              }
            ],
            [
              {
                "name": "x1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z1",
                "description": "the z-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z2",
                "description": "the z-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z3",
                "description": "the z-coordinate of the third point",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z4",
                "description": "the z-coordinate of the fourth point",
                "type": "Number"
              },
              {
                "name": "detailX",
                "description": "",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "rect": {
          "description": "Draws a rectangle on the canvas. A rectangle is a four-sided closed shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, may be\nchanged with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n\nThe fifth, sixth, seventh and eighth parameters, if specified,\ndetermine corner radius for the top-left, top-right, lower-right and\nlower-left corners, respectively. An omitted corner radius parameter is set\nto the value of the previously specified radius value in the parameter list.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the rectangle.",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the rectangle.",
                "type": "Number"
              },
              {
                "name": "w",
                "description": "width of the rectangle.",
                "type": "Number"
              },
              {
                "name": "h",
                "description": "height of the rectangle.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "tl",
                "description": "optional radius of top-left corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "tr",
                "description": "optional radius of top-right corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "br",
                "description": "optional radius of bottom-right corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "bl",
                "description": "optional radius of bottom-left corner.",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "w",
                "description": "",
                "type": "Number"
              },
              {
                "name": "h",
                "description": "",
                "type": "Number"
              },
              {
                "name": "detailX",
                "description": "number of segments in the x-direction (for WebGL mode)",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of segments in the y-direction (for WebGL mode)",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "square": {
          "description": "Draws a square to the screen. A square is a four-sided shape with every angle\nat ninety degrees, and equal side size. This function is a special case of the\nrect() function, where the width and height are the same, and the parameter\nis called \"s\" for side size. By default, the first two parameters set the\nlocation of the upper-left corner, the third sets the side size of the square.\nThe way these parameters are interpreted, may be changed with the <a\nhref=\"#/p5/rectMode\">rectMode()</a> function.\n\nThe fourth, fifth, sixth and seventh parameters, if specified,\ndetermine corner radius for the top-left, top-right, lower-right and\nlower-left corners, respectively. An omitted corner radius parameter is set\nto the value of the previously specified radius value in the parameter list.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the square.",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the square.",
                "type": "Number"
              },
              {
                "name": "s",
                "description": "side size of the square.",
                "type": "Number"
              },
              {
                "name": "tl",
                "description": "optional radius of top-left corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "tr",
                "description": "optional radius of top-right corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "br",
                "description": "optional radius of bottom-right corner.",
                "type": "Number",
                "optional": true
              },
              {
                "name": "bl",
                "description": "optional radius of bottom-left corner.",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "triangle": {
          "description": "Draws a triangle to the canvas. A triangle is a plane created by connecting\nthree points. The first two arguments specify the first point, the middle two\narguments specify the second point, and the last two arguments specify the\nthird point.",
          "overloads": [
            [
              {
                "name": "x1",
                "description": "x-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "y-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "x-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "y-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "x-coordinate of the third point",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "y-coordinate of the third point",
                "type": "Number"
              }
            ]
          ]
        },
        "rectMode": {
          "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\n\nThe default mode is CORNER, which interprets the first two parameters as the\nupper-left corner of the shape, while the third and fourth parameters are its\nwidth and height.\n\nrectMode(CORNERS) interprets the first two parameters as the location of\none of the corners, and the third and fourth parameters as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not neccesary that the first corner be the upper left\ncorner.\n\nrectMode(CENTER) interprets the first two parameters as the shape's center\npoint, while the third and fourth parameters are its width and height.\n\nrectMode(RADIUS) also uses the first two parameters as the shape's center\npoint, but uses the third and fourth parameters to specify half of the shape's\nwidth and height respectively.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
          "overloads": [
            [
              {
                "name": "mode",
                "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                "type": "Constant"
              }
            ]
          ]
        },
        "smooth": {
          "description": "Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\nimprove image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\ndefault in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\nimages, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\nsmooth (antialiased) edges on your geometry.",
          "overloads": [null]
        },
        "strokeCap": {
          "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
          "overloads": [
            [
              {
                "name": "cap",
                "description": "either ROUND, SQUARE or PROJECT",
                "type": "Constant"
              }
            ]
          ]
        },
        "strokeJoin": {
          "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
          "overloads": [
            [
              {
                "name": "join",
                "description": "either MITER, BEVEL, ROUND",
                "type": "Constant"
              }
            ]
          ]
        },
        "strokeWeight": {
          "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.",
          "overloads": [
            [
              {
                "name": "weight",
                "description": "the weight of the stroke (in pixels)",
                "type": "Number"
              }
            ]
          ]
        },
        "bezierPoint": {
          "description": "Given the x or y co-ordinate values of control and anchor points of a bezier\ncurve, it evaluates the x or y coordinate of the bezier at position t. The\nparameters a and d are the x or y coordinates of first and last points on the\ncurve while b and c are of the control points.The final parameter t is the\nposition of the resultant point which is given between 0 and 1.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
          "overloads": [
            [
              {
                "name": "a",
                "description": "coordinate of first point on the curve",
                "type": "Number"
              },
              {
                "name": "b",
                "description": "coordinate of first control point",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "coordinate of second control point",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "coordinate of second point on the curve",
                "type": "Number"
              },
              {
                "name": "t",
                "description": "value between 0 and 1",
                "type": "Number"
              }
            ]
          ]
        },
        "bezierTangent": {
          "description": "Evaluates the tangent to the Bezier at position t for points a, b, c, d.\nThe parameters a and d are the first and last points\non the curve, and b and c are the control points.\nThe final parameter t varies between 0 and 1.",
          "overloads": [
            [
              {
                "name": "a",
                "description": "coordinate of first point on the curve",
                "type": "Number"
              },
              {
                "name": "b",
                "description": "coordinate of first control point",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "coordinate of second control point",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "coordinate of second point on the curve",
                "type": "Number"
              },
              {
                "name": "t",
                "description": "value between 0 and 1",
                "type": "Number"
              }
            ]
          ]
        },
        "curve": {
          "description": "Draws a curved line on the screen between two points, given as the\nmiddle four parameters. The first two parameters are a control point, as\nif the curve came from this point even though it's not drawn. The last\ntwo parameters similarly describe the other control point. <br /><br />\nLonger curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\ntogether or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\n<a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\nThe <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.",
          "overloads": [
            [
              {
                "name": "x1",
                "description": "x-coordinate for the beginning control point",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "y-coordinate for the beginning control point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "x-coordinate for the first point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "y-coordinate for the first point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "x-coordinate for the second point",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "y-coordinate for the second point",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "x-coordinate for the ending control point",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "y-coordinate for the ending control point",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z1",
                "description": "z-coordinate for the beginning control point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z2",
                "description": "z-coordinate for the first point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z3",
                "description": "z-coordinate for the second point",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z4",
                "description": "z-coordinate for the ending control point",
                "type": "Number"
              }
            ]
          ]
        },
        "curveDetail": {
          "description": "Sets the resolution at which curves display. The default value is 20 while\nthe minimum value is 3.\n\nThis function is only useful when using the WEBGL renderer\nas the default canvas renderer does not use this\ninformation.",
          "overloads": [
            [
              {
                "name": "resolution",
                "description": "resolution of the curves",
                "type": "Number"
              }
            ]
          ]
        },
        "curveTightness": {
          "description": "Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a>\nand <a href=\"#/p5/curveVertex\">curveVertex()</a>.The parameter tightness\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value for tightness (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
          "overloads": [
            [
              {
                "name": "amount",
                "description": "amount of deformation from the original vertices",
                "type": "Number"
              }
            ]
          ]
        },
        "curvePoint": {
          "description": "Evaluates the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are control points\nof the curve, and b and c are the start and end points of the curve.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
          "overloads": [
            [
              {
                "name": "a",
                "description": "coordinate of first control point of the curve",
                "type": "Number"
              },
              {
                "name": "b",
                "description": "coordinate of first point",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "coordinate of second point",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "coordinate of second control point",
                "type": "Number"
              },
              {
                "name": "t",
                "description": "value between 0 and 1",
                "type": "Number"
              }
            ]
          ]
        },
        "curveTangent": {
          "description": "Evaluates the tangent to the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points on the curve,\nand b and c are the control points.",
          "overloads": [
            [
              {
                "name": "a",
                "description": "coordinate of first control point",
                "type": "Number"
              },
              {
                "name": "b",
                "description": "coordinate of first point on the curve",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "coordinate of second point on the curve",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "coordinate of second conrol point",
                "type": "Number"
              },
              {
                "name": "t",
                "description": "value between 0 and 1",
                "type": "Number"
              }
            ]
          ]
        },
        "beginShape": {
          "description": "Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\ncomplex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\n<a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.\n\nThe parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\nTRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, and TESS (WebGL only). After calling the\n<a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\ndrawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\ncurrent stroke color and filled with the fill color.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\n<a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.",
          "overloads": [
            [
              {
                "name": "kind",
                "description": "either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS",
                "type": "Constant",
                "optional": true
              }
            ]
          ]
        },
        "bezierVertex": {
          "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. For WebGL mode bezierVertex() can be used in 2D\nas well as 3D mode. 2D mode expects 6 parameters, while 3D mode\nexpects 9 parameters (including z coordinates).\n\nThe first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\ncall, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\npoint. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
          "overloads": [
            [
              {
                "name": "x2",
                "description": "x-coordinate for the first control point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "y-coordinate for the first control point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "x-coordinate for the second control point",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "y-coordinate for the second control point",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "x-coordinate for the anchor point",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "y-coordinate for the anchor point",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z2",
                "description": "z-coordinate for the first control point (for WebGL mode)",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z3",
                "description": "z-coordinate for the second control point (for WebGL mode)",
                "type": "Number"
              },
              {
                "name": "x4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y4",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z4",
                "description": "z-coordinate for the anchor point (for WebGL mode)",
                "type": "Number"
              }
            ]
          ]
        },
        "curveVertex": {
          "description": "Specifies vertex coordinates for curves. This function may only\nbe used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\nis no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\nFor WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n2D mode expects 2 parameters, while 3D mode expects 3 parameters.\n\nThe first and last points in a series of curveVertex() lines will be used to\nguide the beginning and end of a the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with curveVertex() will draw\nthe curve between the second, third, and fourth points. The\ncurveVertex() function is an implementation of Catmull-Rom\nsplines.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the vertex",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the vertex",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "z-coordinate of the vertex (for WebGL mode)",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "endContour": {
          "description": "Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\nshapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.",
          "overloads": [null]
        },
        "endShape": {
          "description": "The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\ncalled after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endShape()</a> is called, all of image data\ndefined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end).",
          "overloads": [
            [
              {
                "name": "mode",
                "description": "use CLOSE to close the shape",
                "type": "Constant",
                "optional": true
              }
            ]
          ]
        },
        "quadraticVertex": {
          "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\nmust be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\nFor WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n2D mode expects 4 parameters, while 3D mode expects 6 parameters\n(including z coordinates).\n\nThis function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
          "overloads": [
            [
              {
                "name": "cx",
                "description": "x-coordinate for the control point",
                "type": "Number"
              },
              {
                "name": "cy",
                "description": "y-coordinate for the control point",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "x-coordinate for the anchor point",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "y-coordinate for the anchor point",
                "type": "Number"
              }
            ],
            [
              {
                "name": "cx",
                "description": "",
                "type": "Number"
              },
              {
                "name": "cy",
                "description": "",
                "type": "Number"
              },
              {
                "name": "cz",
                "description": "z-coordinate for the control point (for WebGL mode)",
                "type": "Number"
              },
              {
                "name": "x3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z3",
                "description": "z-coordinate for the anchor point (for WebGL mode)",
                "type": "Number"
              }
            ]
          ]
        },
        "vertex": {
          "description": "All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the vertex",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the vertex",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "z-coordinate of the vertex",
                "type": "Number"
              },
              {
                "name": "u",
                "description": "the vertex's texture u-coordinate",
                "type": "Number",
                "optional": true
              },
              {
                "name": "v",
                "description": "the vertex's texture v-coordinate",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "sphere": {
          "description": "Draw a sphere with given radius.\n\nDetailX and detailY determines the number of subdivisions in the x-dimension\nand the y-dimension of a sphere. More subdivisions make the sphere seem\nsmoother. The recommended maximum values are both 24. Using a value greater\nthan 24 may cause a warning or slow down the browser.",
          "overloads": [
            [
              {
                "name": "radius",
                "description": "radius of circle",
                "type": "Number",
                "optional": true
              },
              {
                "name": "detailX",
                "description": "optional number of subdivisions in x-dimension",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "optional number of subdivisions in y-dimension",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "cylinder": {
          "description": "Draw a cylinder with given radius and height\n\nDetailX and detailY determines the number of subdivisions in the x-dimension\nand the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother.\nThe recommended maximum value for detailX is 24. Using a value greater than 24\nmay cause a warning or slow down the browser.",
          "overloads": [
            [
              {
                "name": "radius",
                "description": "radius of the surface",
                "type": "Number",
                "optional": true
              },
              {
                "name": "height",
                "description": "height of the cylinder",
                "type": "Number",
                "optional": true
              },
              {
                "name": "detailX",
                "description": "number of subdivisions in x-dimension;\n                              default is 24",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of subdivisions in y-dimension;\n                              default is 1",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "bottomCap",
                "description": "whether to draw the bottom of the cylinder",
                "type": "Boolean",
                "optional": true
              },
              {
                "name": "topCap",
                "description": "whether to draw the top of the cylinder",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "cone": {
          "description": "Draw a cone with given radius and height\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a cone. More subdivisions make the cone seem smoother. The\nrecommended maximum value for detailX is 24. Using a value greater than 24\nmay cause a warning or slow down the browser.",
          "overloads": [
            [
              {
                "name": "radius",
                "description": "radius of the bottom surface",
                "type": "Number",
                "optional": true
              },
              {
                "name": "height",
                "description": "height of the cone",
                "type": "Number",
                "optional": true
              },
              {
                "name": "detailX",
                "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 24",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 1",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "cap",
                "description": "whether to draw the base of the cone",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "ellipsoid": {
          "description": "Draw an ellipsoid with given radius\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother.\nAvoid detail number above 150, it may crash the browser.",
          "overloads": [
            [
              {
                "name": "radiusx",
                "description": "x-radius of ellipsoid",
                "type": "Number",
                "optional": true
              },
              {
                "name": "radiusy",
                "description": "y-radius of ellipsoid",
                "type": "Number",
                "optional": true
              },
              {
                "name": "radiusz",
                "description": "z-radius of ellipsoid",
                "type": "Number",
                "optional": true
              },
              {
                "name": "detailX",
                "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "torus": {
          "description": "Draw a torus with given radius and tube radius\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a torus. More subdivisions make the torus appear to be smoother.\nThe default and maximum values for detailX and detailY are 24 and 16, respectively.\nSetting them to relatively small values like 4 and 6 allows you to create new\nshapes other than a torus.",
          "overloads": [
            [
              {
                "name": "radius",
                "description": "radius of the whole ring",
                "type": "Number",
                "optional": true
              },
              {
                "name": "tubeRadius",
                "description": "radius of the tube",
                "type": "Number",
                "optional": true
              },
              {
                "name": "detailX",
                "description": "number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "detailY",
                "description": "number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "debugMode": {
          "description": "debugMode() helps visualize 3D space by adding a grid to indicate where the\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\ndirections. This function can be called without parameters to create a\ndefault grid and axes icon, or it can be called according to the examples\nabove to customize the size and position of the grid and/or axes icon.  The\ngrid is drawn using the most recently set stroke color and weight.  To\nspecify these parameters, add a call to stroke() and strokeWeight()\njust before the end of the draw() loop.\n\nBy default, the grid will run through the origin (0,0,0) of the sketch\nalong the XZ plane\nand the axes icon will be offset from the origin.  Both the grid and axes\nicon will be sized according to the current canvas size.  Note that because the\ngrid runs parallel to the default camera view, it is often helpful to use\ndebugMode along with orbitControl to allow full view of the grid.",
          "overloads": [
            null,
            [
              {
                "name": "mode",
                "description": "either GRID or AXES",
                "type": "Constant"
              }
            ],
            [
              {
                "name": "mode",
                "description": "",
                "type": "Constant"
              },
              {
                "name": "gridSize",
                "description": "size of one side of the grid",
                "type": "Number",
                "optional": true
              },
              {
                "name": "gridDivisions",
                "description": "number of divisions in the grid",
                "type": "Number",
                "optional": true
              },
              {
                "name": "xOff",
                "description": "X axis offset from origin (0,0,0)",
                "type": "Number",
                "optional": true
              },
              {
                "name": "yOff",
                "description": "Y axis offset from origin (0,0,0)",
                "type": "Number",
                "optional": true
              },
              {
                "name": "zOff",
                "description": "Z axis offset from origin (0,0,0)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "mode",
                "description": "",
                "type": "Constant"
              },
              {
                "name": "axesSize",
                "description": "size of axes icon",
                "type": "Number",
                "optional": true
              },
              {
                "name": "xOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "yOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "zOff",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "gridSize",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "gridDivisions",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "gridXOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "gridYOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "gridZOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "axesSize",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "axesXOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "axesYOff",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "axesZOff",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "noDebugMode": {
          "description": "Turns off debugMode() in a 3D sketch.",
          "overloads": [null]
        },
        "ambientLight": {
          "overloads": [
            [
              {
                "name": "gray",
                "description": "a gray value",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "values",
                "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                "type": "Number[]"
              }
            ],
            [
              {
                "name": "color",
                "description": "the ambient light color",
                "type": "p5.Color"
              }
            ]
          ]
        },
        "specularColor": {
          "description": "Set's the color of the specular highlight when using a specular material and\nspecular light.\n\nThis method can be combined with specularMaterial() and shininess()\nfunctions to set specular highlights. The default color is white, ie\n(255, 255, 255), which is used if this method is not called before\nspecularMaterial(). If this method is called without specularMaterial(),\nThere will be no effect.\n\nNote: specularColor is equivalent to the processing function\n<a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>.",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "red or hue value relative to\n                                the current color range",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value\n                                relative to the current color range",
                "type": "Number"
              }
            ],
            [
              {
                "name": "value",
                "description": "a color string",
                "type": "String"
              }
            ],
            [
              {
                "name": "gray",
                "description": "a gray value",
                "type": "Number"
              }
            ],
            [
              {
                "name": "values",
                "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                "type": "Number[]"
              }
            ],
            [
              {
                "name": "color",
                "description": "the ambient light color",
                "type": "p5.Color"
              }
            ]
          ]
        },
        "directionalLight": {
          "description": "Creates a directional light with a color and a direction\n\nA maximum of 5 directionalLight can be active at one time",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "red or hue value (depending on the current\ncolor mode),",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value",
                "type": "Number"
              },
              {
                "name": "position",
                "description": "the direction of the light",
                "type": "p5.Vector"
              }
            ],
            [
              {
                "name": "color",
                "description": "color Array, CSS color string,\n                                            or <a href=\"#/p5.Color\">p5.Color</a> value",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "x",
                "description": "x axis direction",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y axis direction",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "z axis direction",
                "type": "Number"
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "position",
                "description": "",
                "type": "p5.Vector"
              }
            ],
            [
              {
                "name": "v1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "",
                "type": "Number"
              }
            ]
          ]
        },
        "pointLight": {
          "description": "Creates a point light with a color and a light position\n\nA maximum of 5 pointLight can be active at one time",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "red or hue value (depending on the current\ncolor mode),",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value",
                "type": "Number"
              },
              {
                "name": "x",
                "description": "x axis position",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y axis position",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "z axis position",
                "type": "Number"
              }
            ],
            [
              {
                "name": "v1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "position",
                "description": "the position of the light",
                "type": "p5.Vector"
              }
            ],
            [
              {
                "name": "color",
                "description": "color Array, CSS color string,\nor <a href=\"#/p5.Color\">p5.Color</a> value",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "",
                "type": "Number"
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "position",
                "description": "",
                "type": "p5.Vector"
              }
            ]
          ]
        },
        "lights": {
          "description": "Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop.",
          "overloads": [null]
        },
        "lightFalloff": {
          "description": "Sets the falloff rates for point lights. It affects only the elements which are created after it in the code.\nThe default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:\n\nd = distance from light position to vertex position\n\nfalloff = 1 / (CONSTANT + d \\* LINEAR + ( d \\* d ) \\* QUADRATIC)",
          "overloads": [
            [
              {
                "name": "constant",
                "description": "constant value for determining falloff",
                "type": "Number"
              },
              {
                "name": "linear",
                "description": "linear value for determining falloff",
                "type": "Number"
              },
              {
                "name": "quadratic",
                "description": "quadratic value for determining falloff",
                "type": "Number"
              }
            ]
          ]
        },
        "spotLight": {
          "description": "Creates a spotlight with a given color, position, direction of light,\nangle and concentration. Here, angle refers to the opening or aperture\nof the cone of the spotlight, and concentration is used to focus the\nlight towards the center. Both angle and concentration are optional, but if\nyou want to provide concentration, you will also have to specify the angle.\n\nA maximum of 5 spotLight can be active at one time",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "red or hue value (depending on the current\ncolor mode),",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value",
                "type": "Number"
              },
              {
                "name": "x",
                "description": "x axis position",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y axis position",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "z axis position",
                "type": "Number"
              },
              {
                "name": "rx",
                "description": "x axis direction of light",
                "type": "Number"
              },
              {
                "name": "ry",
                "description": "y axis direction of light",
                "type": "Number"
              },
              {
                "name": "rz",
                "description": "z axis direction of light",
                "type": "Number"
              },
              {
                "name": "angle",
                "description": "optional parameter for angle. Defaults to PI/3",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "optional parameter for concentration. Defaults to 100",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "color Array, CSS color string,\nor <a href=\"#/p5.Color\">p5.Color</a> value",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "position",
                "description": "the position of the light",
                "type": "p5.Vector"
              },
              {
                "name": "direction",
                "description": "the direction of the light",
                "type": "p5.Vector"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "v1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "position",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "direction",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "",
                "type": "Number"
              },
              {
                "name": "direction",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "position",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "rx",
                "description": "",
                "type": "Number"
              },
              {
                "name": "ry",
                "description": "",
                "type": "Number"
              },
              {
                "name": "rz",
                "description": "",
                "type": "Number"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "v1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "",
                "type": "Number"
              },
              {
                "name": "direction",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "v1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "",
                "type": "Number"
              },
              {
                "name": "position",
                "description": "",
                "type": "p5.Vector"
              },
              {
                "name": "rx",
                "description": "",
                "type": "Number"
              },
              {
                "name": "ry",
                "description": "",
                "type": "Number"
              },
              {
                "name": "rz",
                "description": "",
                "type": "Number"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "",
                "type": "Number[]|String|p5.Color"
              },
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "",
                "type": "Number"
              },
              {
                "name": "rx",
                "description": "",
                "type": "Number"
              },
              {
                "name": "ry",
                "description": "",
                "type": "Number"
              },
              {
                "name": "rz",
                "description": "",
                "type": "Number"
              },
              {
                "name": "angle",
                "description": "",
                "type": "Number",
                "optional": true
              },
              {
                "name": "conc",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "noLights": {
          "description": "This function will remove all the lights from the sketch for the\nsubsequent materials rendered. It affects all the subsequent methods.\nCalls to lighting methods made after noLights() will re-enable lights\nin the sketch.",
          "overloads": [null]
        },
        "model": {
          "description": "Render a 3d model to the screen.",
          "overloads": [
            [
              {
                "name": "model",
                "description": "Loaded 3d model to be rendered",
                "type": "p5.Geometry"
              }
            ]
          ]
        }
      }
    },
    "Structure": {
      "methods": {
        "isLooping": {
          "description": "By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously,\nexecuting the code within it. If the sketch is stopped with\n<a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>,\nisLooping() returns the current state for use within custom event handlers.",
          "overloads": [null]
        },
        "push": {
          "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores these\nsettings. Note that these functions are always used together. They allow you to\nchange the style and transformation settings and later return to what you had.\nWhen a new state is started with <a href=\"#/p5/push\">push()</a>, it builds on\nthe current style and transform information. The <a href=\"#/p5/push\">push()</a>\nand <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)\n\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions:\n<a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/noFill\">noFill()</a>,\n<a href=\"#/p5/noStroke\">noStroke()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>,\n<a href=\"#/p5/tint\">tint()</a>,\n<a href=\"#/p5/noTint\">noTint()</a>,\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n<a href=\"#/p5/strokeCap\">strokeCap()</a>,\n<a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>,\n<a href=\"#/p5/rectMode\">rectMode()</a>,\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n<a href=\"#/p5/colorMode\">colorMode()</a>,\n<a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>,\n<a href=\"#/p5/textSize\">textSize()</a>,\n<a href=\"#/p5/textLeading\">textLeading()</a>,\n<a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n<a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>,\n<a href=\"#/p5/scale\">scale()</a>,\n<a href=\"#/p5/shearX\">shearX()</a>,\n<a href=\"#/p5/shearY\">shearY()</a>,\n<a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n\nIn WEBGL mode additional style settings are stored. These are controlled by the\nfollowing functions: <a href=\"#/p5/setCamera\">setCamera()</a>,\n<a href=\"#/p5/ambientLight\">ambientLight()</a>,\n<a href=\"#/p5/directionalLight\">directionalLight()</a>,\n<a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>,\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n<a href=\"#/p5/shininess\">shininess()</a>,\n<a href=\"#/p5/normalMaterial\">normalMaterial()</a>\nand <a href=\"#/p5/shader\">shader()</a>.",
          "overloads": [null]
        },
        "pop": {
          "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores\nthese settings. Note that these functions are always used together. They allow\nyou to change the style and transformation settings and later return to what\nyou had. When a new state is started with <a href=\"#/p5/push\">push()</a>, it\nbuilds on the current style and transform information. The <a href=\"#/p5/push\">push()</a>\nand <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)\n\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions:\n<a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/noFill\">noFill()</a>,\n<a href=\"#/p5/noStroke\">noStroke()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>,\n<a href=\"#/p5/tint\">tint()</a>,\n<a href=\"#/p5/noTint\">noTint()</a>,\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n<a href=\"#/p5/strokeCap\">strokeCap()</a>,\n<a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>,\n<a href=\"#/p5/rectMode\">rectMode()</a>,\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n<a href=\"#/p5/colorMode\">colorMode()</a>,\n<a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>,\n<a href=\"#/p5/textSize\">textSize()</a>,\n<a href=\"#/p5/textLeading\">textLeading()</a>,\n<a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n<a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>,\n<a href=\"#/p5/scale\">scale()</a>,\n<a href=\"#/p5/shearX\">shearX()</a>,\n<a href=\"#/p5/shearY\">shearY()</a>,\n<a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n\nIn WEBGL mode additional style settings are stored. These are controlled by\nthe following functions:\n<a href=\"#/p5/setCamera\">setCamera()</a>,\n<a href=\"#/p5/ambientLight\">ambientLight()</a>,\n<a href=\"#/p5/directionalLight\">directionalLight()</a>,\n<a href=\"#/p5/pointLight\">pointLight()</a>,\n<a href=\"#/p5/texture\">texture()</a>,\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n<a href=\"#/p5/shininess\">shininess()</a>,\n<a href=\"#/p5/normalMaterial\">normalMaterial()</a> and\n<a href=\"#/p5/shader\">shader()</a>.",
          "overloads": [null]
        },
        "redraw": {
          "description": "Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This\nfunction allows the program to update the display window only when necessary,\nfor example when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a>\nor <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\n\nIn structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a>\nwithin events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This\nis because <a href=\"#/p5/redraw\">redraw()</a> does not run\n<a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates\nan update is needed).\n\nThe <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when\ncalled inside <a href=\"#/p5/draw\">draw()</a>.To enable/disable animations,\nuse <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\n\nIn addition you can set the number of redraws per method call. Just\nadd an integer as single parameter for the number of redraws.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "Redraw for n-times. The default value is 1.",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "applyMatrix": {
          "description": "The `p5()` constructor enables you to activate \"instance mode\" instead of normal\n\"global mode\". This is an advanced topic. A short description and example is\nincluded below. Please see\n<a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\">\nDan Shiffman's Coding Train video tutorial</a> or this\n<a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a>\nfor more info.\n\nBy default, all p5.js functions are in the global namespace (i.e. bound to the window\nobject), meaning you can call them simply `ellipse()`, `fill()`, etc. However, this\nmight be inconvenient if you are mixing with other JS libraries (synchronously or\nasynchronously) or writing long programs of your own. p5.js currently supports a\nway around this problem called \"instance mode\". In instance mode, all p5 functions\nare bound up in a single variable instead of polluting your global namespace.\n\nOptionally, you can specify a default container for the canvas and any other elements\nto append to with a second argument. You can give the ID of an element in your html,\nor an html node itself.\n\nNote that creating instances like this also allows you to have more than one p5 sketch on\na single web page, as they will each be wrapped up with their own set up variables. Of\ncourse, you could also use iframes to have multiple sketches in global mode.",
          "overloads": [
            [
              {
                "name": "sketch",
                "description": "a function containing a p5.js sketch",
                "type": "Object"
              },
              {
                "name": "node",
                "description": "ID or pointer to HTML DOM node to contain sketch in",
                "type": "String|Object"
              },
              {
                "name": "a",
                "description": "numbers which define the 2x3 matrix to be multiplied, or an array of numbers",
                "type": "Number|Array"
              },
              {
                "name": "b",
                "description": "numbers which define the 2x3 matrix to be multiplied",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "numbers which define the 2x3 matrix to be multiplied",
                "type": "Number"
              },
              {
                "name": "d",
                "description": "numbers which define the 2x3 matrix to be multiplied",
                "type": "Number"
              },
              {
                "name": "e",
                "description": "numbers which define the 2x3 matrix to be multiplied",
                "type": "Number"
              },
              {
                "name": "f",
                "description": "numbers which define the 2x3 matrix to be multiplied",
                "type": "Number"
              }
            ]
          ]
        },
        "resetMatrix": {
          "description": "Replaces the current matrix with the identity matrix.",
          "overloads": [null]
        },
        "rotate": {
          "description": "Rotates a shape by the amount specified by the angle parameter. This\nfunction accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles\ncan be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n\nTechnically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                "type": "Number"
              },
              {
                "name": "axis",
                "description": "(in 3d) the axis to rotate around",
                "type": "p5.Vector|Number[]",
                "optional": true
              }
            ]
          ]
        },
        "rotateX": {
          "description": "Rotates a shape around X axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                "type": "Number"
              }
            ]
          ]
        },
        "rotateY": {
          "description": "Rotates a shape around Y axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                "type": "Number"
              }
            ]
          ]
        },
        "rotateZ": {
          "description": "Rotates a shape around Z axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nThis method works in WEBGL mode only.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                "type": "Number"
              }
            ]
          ]
        },
        "scale": {
          "description": "Increases or decreases the size of a shape by expanding or contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\nwithin <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\n\nUsing this function with the z parameter is only available in WEBGL mode.\nThis function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
          "overloads": [
            [
              {
                "name": "s",
                "description": "percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given",
                "type": "Number|p5.Vector|Number[]"
              },
              {
                "name": "y",
                "description": "percent to scale the object in the y-axis",
                "type": "Number",
                "optional": true
              },
              {
                "name": "z",
                "description": "percent to scale the object in the z-axis (webgl only)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "scales",
                "description": "per-axis percents to scale the object",
                "type": "p5.Vector|Number[]"
              }
            ]
          ]
        },
        "shearX": {
          "description": "Shears a shape around the x-axis by the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>,\nthe transformation is reset when the loop begins again.\n\nTechnically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current\ntransformation matrix by a rotation matrix. This function can be further\ncontrolled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                "type": "Number"
              }
            ]
          ]
        },
        "shearY": {
          "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\n<a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\nthe loop begins again.\n\nTechnically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                "type": "Number"
              }
            ]
          ]
        },
        "translate": {
          "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "left/right translation",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "up/down translation",
                "type": "Number"
              },
              {
                "name": "z",
                "description": "forward/backward translation (webgl only)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "vector",
                "description": "the vector to translate by",
                "type": "p5.Vector"
              }
            ]
          ]
        },
        "storeItem": {
          "description": "Stores a value in local storage under the key name.\n Local storage is saved in the browser and persists\n between browsing sessions and page reloads.\n The key can be the name of the variable but doesn't\n have to be. To retrieve stored items\n see <a href=\"#/p5/getItem\">getItem</a>.\nSensitive data such as passwords or personal information\n should not be stored in local storage.",
          "overloads": [
            [
              {
                "name": "key",
                "description": "",
                "type": "String"
              },
              {
                "name": "value",
                "description": "",
                "type": "String|Number|Object|Boolean|p5.Color|p5.Vector"
              }
            ]
          ]
        },
        "getItem": {
          "description": "Returns the value of an item that was stored in local storage\n using storeItem()",
          "overloads": [
            [
              {
                "name": "key",
                "description": "name that you wish to use to store in local storage",
                "type": "String"
              }
            ]
          ]
        },
        "clearStorage": {
          "description": "Clears all local storage items set with storeItem()\n for the current domain.",
          "overloads": [null]
        },
        "removeItem": {
          "description": "Removes an item that was stored with storeItem()",
          "overloads": [
            [
              {
                "name": "key",
                "description": "",
                "type": "String"
              }
            ]
          ]
        }
      }
    },
    "Data": {
      "methods": {
        "createNumberDict": {
          "overloads": [
            [
              {
                "name": "object",
                "description": "object",
                "type": "Object"
              }
            ]
          ]
        },
        "arrayCopy": {
          "overloads": [
            [
              {
                "name": "src",
                "description": "",
                "type": "Array"
              },
              {
                "name": "dst",
                "description": "",
                "type": "Array"
              },
              {
                "name": "length",
                "description": "",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "concat": {
          "description": "Concatenates two arrays, maps to Array.concat(). Does not modify the\ninput arrays.",
          "overloads": [
            [
              {
                "name": "a",
                "description": "first Array to concatenate",
                "type": "Array"
              },
              {
                "name": "b",
                "description": "second Array to concatenate",
                "type": "Array"
              }
            ]
          ]
        },
        "reverse": {
          "description": "Reverses the order of an array, maps to Array.reverse()",
          "overloads": [
            [
              {
                "name": "list",
                "description": "Array to reverse",
                "type": "Array"
              }
            ]
          ]
        },
        "shorten": {
          "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
          "overloads": [
            [
              {
                "name": "list",
                "description": "Array to shorten",
                "type": "Array"
              }
            ]
          ]
        },
        "shuffle": {
          "description": "Randomizes the order of the elements of an array. Implements\n<a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\nFisher-Yates Shuffle Algorithm</a>.",
          "overloads": [
            [
              {
                "name": "array",
                "description": "Array to shuffle",
                "type": "Array"
              },
              {
                "name": "bool",
                "description": "modify passed array",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "sort": {
          "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
          "overloads": [
            [
              {
                "name": "list",
                "description": "Array to sort",
                "type": "Array"
              },
              {
                "name": "count",
                "description": "number of elements to sort, starting from 0",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "splice": {
          "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
          "overloads": [
            [
              {
                "name": "list",
                "description": "Array to splice into",
                "type": "Array"
              },
              {
                "name": "value",
                "description": "value to be spliced in",
                "type": "Any"
              },
              {
                "name": "position",
                "description": "in the array from which to insert data",
                "type": "Integer"
              }
            ]
          ]
        },
        "subset": {
          "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
          "overloads": [
            [
              {
                "name": "list",
                "description": "Array to extract from",
                "type": "Array"
              },
              {
                "name": "start",
                "description": "position to begin",
                "type": "Integer"
              },
              {
                "name": "count",
                "description": "number of values to extract",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "int": {
          "overloads": [
            [
              {
                "name": "ns",
                "description": "values to parse",
                "type": "Array"
              }
            ]
          ]
        },
        "str": {
          "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String|Boolean|Number|Array"
              }
            ]
          ]
        },
        "boolean": {
          "description": "Converts a number or string to its boolean representation.\nFor a number, any non-zero value (positive or negative) evaluates to true,\nwhile zero evaluates to false. For a string, the value \"true\" evaluates to\ntrue, while any other value evaluates to false. When an array of number or\nstring values is passed in, then a array of booleans of the same length is\nreturned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String|Boolean|Number|Array"
              }
            ]
          ]
        },
        "byte": {
          "description": "Converts a number, string representation of a number, or boolean to its byte\nrepresentation. A byte can be only a whole number between -128 and 127, so\nwhen a value outside of this range is converted, it wraps around to the\ncorresponding byte representation. When an array of number, string or boolean\nvalues is passed in, then an array of bytes the same length is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String|Boolean|Number"
              }
            ],
            [
              {
                "name": "ns",
                "description": "values to parse",
                "type": "Array"
              }
            ]
          ]
        },
        "char": {
          "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String|Number"
              }
            ],
            [
              {
                "name": "ns",
                "description": "values to parse",
                "type": "Array"
              }
            ]
          ]
        },
        "unchar": {
          "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String"
              }
            ],
            [
              {
                "name": "ns",
                "description": "values to parse",
                "type": "Array"
              }
            ]
          ]
        },
        "hex": {
          "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "Number"
              },
              {
                "name": "digits",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "ns",
                "description": "array of values to parse",
                "type": "Number[]"
              },
              {
                "name": "digits",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "unhex": {
          "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "value to parse",
                "type": "String"
              }
            ],
            [
              {
                "name": "ns",
                "description": "values to parse",
                "type": "Array"
              }
            ]
          ]
        },
        "match": {
          "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\nnfs().",
          "overloads": [
            [
              {
                "name": "list",
                "description": "array of Strings to be joined",
                "type": "Array"
              },
              {
                "name": "separator",
                "description": "String to be placed between each item",
                "type": "String"
              },
              {
                "name": "str",
                "description": "the String to be searched",
                "type": "String"
              },
              {
                "name": "regexp",
                "description": "the regexp to be used for matching",
                "type": "String"
              }
            ]
          ]
        },
        "matchAll": {
          "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on).",
          "overloads": [
            [
              {
                "name": "str",
                "description": "the String to be searched",
                "type": "String"
              },
              {
                "name": "regexp",
                "description": "the regexp to be used for matching",
                "type": "String"
              }
            ]
          ]
        },
        "nf": {
          "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers.\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\nif greater than the current length of the number.\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\nthe result will be 123.200.",
          "overloads": [
            [
              {
                "name": "num",
                "description": "the Number to format",
                "type": "Number|String"
              },
              {
                "name": "left",
                "description": "number of digits to the left of the\n                               decimal point",
                "type": "Integer|String",
                "optional": true
              },
              {
                "name": "right",
                "description": "number of digits to the right of the\n                               decimal point",
                "type": "Integer|String",
                "optional": true
              }
            ],
            [
              {
                "name": "nums",
                "description": "the Numbers to format",
                "type": "Array"
              },
              {
                "name": "left",
                "description": "",
                "type": "Integer|String",
                "optional": true
              },
              {
                "name": "right",
                "description": "",
                "type": "Integer|String",
                "optional": true
              }
            ]
          ]
        },
        "nfc": {
          "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
          "overloads": [
            [
              {
                "name": "num",
                "description": "the Number to format",
                "type": "Number|String"
              },
              {
                "name": "right",
                "description": "number of digits to the right of the\n                                 decimal point",
                "type": "Integer|String",
                "optional": true
              }
            ],
            [
              {
                "name": "nums",
                "description": "the Numbers to format",
                "type": "Array"
              },
              {
                "name": "right",
                "description": "",
                "type": "Integer|String",
                "optional": true
              }
            ]
          ]
        },
        "nfp": {
          "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for left, and right parameters\nshould always be positive integers.",
          "overloads": [
            [
              {
                "name": "num",
                "description": "the Number to format",
                "type": "Number"
              },
              {
                "name": "left",
                "description": "number of digits to the left of the decimal\n                               point",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "right",
                "description": "number of digits to the right of the\n                               decimal point",
                "type": "Integer",
                "optional": true
              }
            ],
            [
              {
                "name": "nums",
                "description": "the Numbers to format",
                "type": "Number[]"
              },
              {
                "name": "left",
                "description": "",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "right",
                "description": "",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "nfs": {
          "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs an additional \"_\" (space) in front of positive numbers just in case to align it with negative\nnumbers which includes \"-\" (minus) sign.\nThe main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative\nnumber with some negative number (See the example to get a clear picture).\nThere are two versions: one for formatting float, and one for formatting int.\nThe values for the digits, left, and right parameters should always be positive integers.\n(IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\nif greater than the current length of the number.\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\nthe result will be 123.200.",
          "overloads": [
            [
              {
                "name": "num",
                "description": "the Number to format",
                "type": "Number"
              },
              {
                "name": "left",
                "description": "number of digits to the left of the decimal\n                               point",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "right",
                "description": "number of digits to the right of the\n                               decimal point",
                "type": "Integer",
                "optional": true
              }
            ],
            [
              {
                "name": "nums",
                "description": "the Numbers to format",
                "type": "Array"
              },
              {
                "name": "left",
                "description": "",
                "type": "Integer",
                "optional": true
              },
              {
                "name": "right",
                "description": "",
                "type": "Integer",
                "optional": true
              }
            ]
          ]
        },
        "split": {
          "description": "The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "the String to be split",
                "type": "String"
              },
              {
                "name": "delim",
                "description": "the String used to separate the data",
                "type": "String"
              }
            ]
          ]
        },
        "splitTokens": {
          "description": "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "the String to be split",
                "type": "String"
              },
              {
                "name": "delim",
                "description": "list of individual Strings that will be used as\n                         separators",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "trim": {
          "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
          "overloads": [
            [
              {
                "name": "str",
                "description": "a String to be trimmed",
                "type": "String"
              }
            ],
            [
              {
                "name": "strs",
                "description": "an Array of Strings to be trimmed",
                "type": "Array"
              }
            ]
          ]
        }
      }
    },
    "Events": {
      "methods": {
        "setMoveThreshold": {
          "description": "The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "The threshold value",
                "type": "Number"
              }
            ]
          ]
        },
        "setShakeThreshold": {
          "description": "The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "The threshold value",
                "type": "Number"
              }
            ]
          ]
        },
        "deviceMoved": {
          "description": "The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\nthe threshold value along X, Y or Z axis. The default threshold is set to 0.5.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>.",
          "overloads": [null]
        },
        "deviceTurned": {
          "description": "The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\nmore than 90 degrees continuously.\n\nThe axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\nvariable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\nX, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.",
          "overloads": [null]
        },
        "deviceShaken": {
          "description": "The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\nchanges of accelerationX and accelerationY values is more than\nthe threshold value. The default threshold is set to 30.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>.",
          "overloads": [null]
        },
        "keyPressed": {
          "description": "The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\n\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n\nFor ASCII keys, the key that was pressed is stored in the key variable. However, it\ndoes not distinguish between uppercase and lowercase. For this reason, it\nis recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\ncase of the variable will be distinguished.\n\nBecause of how operating systems handle key repeats, holding down a key\nmay cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [null]
        },
        "keyReleased": {
          "description": "The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\nSee <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [null]
        },
        "keyTyped": {
          "description": "The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\naction keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\na keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead.\nThe most recent key typed will be stored in the key variable.\n\nBecause of how operating systems handle key repeats, holding down a key\nwill cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default behaviors attached to various key\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
          "overloads": [null]
        },
        "keyIsDown": {
          "description": "The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.",
          "overloads": [
            [
              {
                "name": "code",
                "description": "The key to check for.",
                "type": "Number"
              }
            ]
          ]
        },
        "mouseMoved": {
          "description": "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "mouseDragged": {
          "description": "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\na mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\n<a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "mousePressed": {
          "description": "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\n<a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "mouseReleased": {
          "description": "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\nreleased. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "mouseClicked": {
          "description": "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers handle clicks differently, so this function is only guaranteed to be\nrun when the left mouse button is clicked. To handle other mouse buttons\nbeing pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "doubleClicked": {
          "description": "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\nlistener has detected a dblclick event which is a part of the\nDOM L3 specification. The doubleClicked event is fired when a\npointing device button (usually a mouse's primary button)\nis clicked twice on a single element. For more info on the\ndblclick event refer to mozilla's documentation here:\nhttps://developer.mozilla.org/en-US/docs/Web/Events/dblclick",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional MouseEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "mouseWheel": {
          "description": "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\nevent is detected either triggered by an actual mouse wheel or by a\ntouchpad.<br><br>\nThe event.delta property returns the amount the mouse wheel\nhave scrolled. The values can be positive or negative depending on the\nscroll direction (on OS X with \"natural\" scrolling enabled, the signs\nare inverted).<br><br>\nBrowsers may have different default behaviors attached to various\nmouse events. To prevent any default behavior for this event, add\n\"return false\" to the end of the method.<br><br>\nDue to the current support of the \"wheel\" event on Safari, the function\nmay only work as expected if \"return false\" is included while using Safari.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional WheelEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "requestPointerLock": {
          "description": "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a>\nlocks the pointer to its current position and makes it invisible.\nUse <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since\nthe last call of draw.\nNote that not all browsers support this feature.\nThis enables you to create experiences that aren't limited by the mouse moving out of the screen\neven if it is repeatedly moved into one direction.\nFor example, a first person perspective experience.",
          "overloads": [null]
        },
        "exitPointerLock": {
          "description": "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a>\nexits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a>\nfor example to make ui elements usable etc",
          "overloads": [null]
        },
        "touchMoved": {
          "description": "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\nIf no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\nbe called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional TouchEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "touchEnded": {
          "description": "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\n<a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
          "overloads": [
            [
              {
                "name": "event",
                "description": "optional TouchEvent callback argument.",
                "type": "Object",
                "optional": true
              }
            ]
          ]
        },
        "createImage": {
          "description": "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.\n\n.<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\nin the display window.\nThese values are numbers. This array is the size (including an appropriate\nfactor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\nmore info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\n\nBefore accessing the pixels of an image, the data must loaded with the\n<a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\n<a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.",
          "overloads": [
            [
              {
                "name": "width",
                "description": "width in pixels",
                "type": "Integer"
              },
              {
                "name": "height",
                "description": "height in pixels",
                "type": "Integer"
              }
            ]
          ]
        },
        "saveCanvas": {
          "description": "Save the current canvas as an image. The browser will either save the\nfile immediately, or prompt the user with a dialogue window.",
          "overloads": [
            [
              {
                "name": "selectedCanvas",
                "description": "a variable\n                                representing a specific html5 canvas (optional)",
                "type": "p5.Element|HTMLCanvasElement"
              },
              {
                "name": "filename",
                "description": "",
                "type": "String",
                "optional": true
              },
              {
                "name": "extension",
                "description": "'jpg' or 'png'",
                "type": "String",
                "optional": true
              }
            ],
            [
              {
                "name": "filename",
                "description": "",
                "type": "String",
                "optional": true
              },
              {
                "name": "extension",
                "description": "",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "saveFrames": {
          "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will pop up save dialogues in an\nattempt to download all of the images that have just been created. With the\ncallback provided the image data isn't saved by default but instead passed\nas an argument to the callback function as an array of objects, with the\nsize of array equal to the total number of frames.\n\nNote that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\nTo export longer animations, you might look into a library like\n<a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.",
          "overloads": [
            [
              {
                "name": "filename",
                "description": "",
                "type": "String"
              },
              {
                "name": "extension",
                "description": "'jpg' or 'png'",
                "type": "String"
              },
              {
                "name": "duration",
                "description": "Duration in seconds to save the frames for.",
                "type": "Number"
              },
              {
                "name": "framerate",
                "description": "Framerate to save the frames in.",
                "type": "Number"
              },
              {
                "name": "callback",
                "description": "A callback function that will be executed\n                                   to handle the image data. This function\n                                   should accept an array as argument. The\n                                   array will contain the specified number of\n                                   frames of objects. Each object has three\n                                   properties: imageData - an\n                                   image/octet-stream, filename and extension.",
                "type": "Function(Array)",
                "optional": true
              }
            ]
          ]
        }
      }
    },
    "Image": {
      "methods": {
        "image": {
          "description": "Draw an image to the p5.js canvas.\n\nThis function can be used with different numbers of parameters. The\nsimplest use requires only three parameters: img, x, and y—where (x, y) is\nthe position of the image. Two more parameters can optionally be added to\nspecify the width and height of the image.\n\nThis function can also be used with all eight Number parameters. To\ndifferentiate between all these parameters, p5.js uses the language of\n\"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\nimage\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n\"source image\" dimensions can be useful when you want to display a\nsubsection of the source image instead of the whole thing. Here's a diagram\nto explain further:\n<img src=\"assets/drawImage.png\"></img>",
          "overloads": [
            [
              {
                "name": "img",
                "description": "the image to display",
                "type": "p5.Image|p5.Element"
              },
              {
                "name": "x",
                "description": "the x-coordinate of the top-left corner of the image",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "the y-coordinate of the top-left corner of the image",
                "type": "Number"
              },
              {
                "name": "width",
                "description": "the width to draw the image",
                "type": "Number",
                "optional": true
              },
              {
                "name": "height",
                "description": "the height to draw the image",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "img",
                "description": "",
                "type": "p5.Image|p5.Element"
              },
              {
                "name": "dx",
                "description": "the x-coordinate of the destination\n                          rectangle in which to draw the source image",
                "type": "Number"
              },
              {
                "name": "dy",
                "description": "the y-coordinate of the destination\n                          rectangle in which to draw the source image",
                "type": "Number"
              },
              {
                "name": "dWidth",
                "description": "the width of the destination rectangle",
                "type": "Number"
              },
              {
                "name": "dHeight",
                "description": "the height of the destination rectangle",
                "type": "Number"
              },
              {
                "name": "sx",
                "description": "the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                "type": "Number"
              },
              {
                "name": "sy",
                "description": "the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                "type": "Number"
              },
              {
                "name": "sWidth",
                "description": "the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle",
                "type": "Number",
                "optional": true
              },
              {
                "name": "sHeight",
                "description": "the height of the subsection of the\n                           source image to draw into the destination rectangle",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "tint": {
          "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\n255.",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "red or hue value relative to\n                                the current color range",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "value",
                "description": "a color string",
                "type": "String"
              }
            ],
            [
              {
                "name": "gray",
                "description": "a gray value",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "values",
                "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                "type": "Number[]"
              }
            ],
            [
              {
                "name": "color",
                "description": "the tint color",
                "type": "p5.Color"
              }
            ]
          ]
        },
        "noTint": {
          "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
          "overloads": [null]
        },
        "imageMode": {
          "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n\nimageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\n\nimageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height.",
          "overloads": [
            [
              {
                "name": "mode",
                "description": "either CORNER, CORNERS, or CENTER",
                "type": "Constant"
              }
            ]
          ]
        },
        "blend": {
          "overloads": [
            [
              {
                "name": "sx",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sy",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sw",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sh",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dx",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dy",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dw",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dh",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "blendMode",
                "description": "",
                "type": "Constant"
              }
            ]
          ]
        },
        "copy": {
          "description": "Copies a region of the canvas to another region of the canvas\nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
          "overloads": [
            [
              {
                "name": "srcImage",
                "description": "source image",
                "type": "p5.Image|p5.Element"
              },
              {
                "name": "sx",
                "description": "X coordinate of the source's upper left corner",
                "type": "Integer"
              },
              {
                "name": "sy",
                "description": "Y coordinate of the source's upper left corner",
                "type": "Integer"
              },
              {
                "name": "sw",
                "description": "source image width",
                "type": "Integer"
              },
              {
                "name": "sh",
                "description": "source image height",
                "type": "Integer"
              },
              {
                "name": "dx",
                "description": "X coordinate of the destination's upper left corner",
                "type": "Integer"
              },
              {
                "name": "dy",
                "description": "Y coordinate of the destination's upper left corner",
                "type": "Integer"
              },
              {
                "name": "dw",
                "description": "destination image width",
                "type": "Integer"
              },
              {
                "name": "dh",
                "description": "destination image height",
                "type": "Integer"
              }
            ],
            [
              {
                "name": "sx",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sy",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sw",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "sh",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dx",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dy",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dw",
                "description": "",
                "type": "Integer"
              },
              {
                "name": "dh",
                "description": "",
                "type": "Integer"
              }
            ]
          ]
        },
        "filter": {
          "description": "Applies a filter to the canvas. The presets options are:\n\nTHRESHOLD\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nGRAY\nConverts any colors in the image to grayscale equivalents. No parameter\nis used.\n\nOPAQUE\nSets the alpha channel to entirely opaque. No parameter is used.\n\nINVERT\nSets each pixel to its inverse value. No parameter is used.\n\nPOSTERIZE\nLimits each channel of the image to the number of colors specified as the\nparameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nBLUR\nExecutes a Gaussian blur with the level parameter specifying the extent\nof the blurring. If no parameter is used, the blur is equivalent to\nGaussian blur of radius 1. Larger values increase the blur.\n\nERODE\nReduces the light areas. No parameter is used.\n\nDILATE\nIncreases the light areas. No parameter is used.\n\nfilter() does not work in WEBGL mode.\nA similar effect can be achieved in WEBGL mode using custom\nshaders. Adam Ferriss has written\na <a href=\"https://github.com/aferriss/p5jsShaderExamples\"\ntarget='_blank'>selection of shader examples</a> that contains many\nof the effects present in the filter examples.",
          "overloads": [
            [
              {
                "name": "filterType",
                "description": "either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter",
                "type": "Constant"
              },
              {
                "name": "filterParam",
                "description": "an optional parameter unique\n                               to each filter, see above",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "get": {
          "description": "Get a region of pixels, or a single pixel, from the canvas.\n\nReturns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned.\nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When\ngetting an image, the x and y parameters define the coordinates for the\nupper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\nget(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is\n```javascript\nlet x, y, d; // set these to the coordinates\nlet off = (y * width + x) * d * 4;\nlet components = [\n  pixels[off],\n  pixels[off + 1],\n  pixels[off + 2],\n  pixels[off + 3]\n];\nprint(components);\n```\nSee the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n\nIf you want to extract an array of colors or a subimage from an p5.Image object,\ntake a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the pixel",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the pixel",
                "type": "Number"
              },
              {
                "name": "w",
                "description": "width",
                "type": "Number"
              },
              {
                "name": "h",
                "description": "height",
                "type": "Number"
              }
            ],
            null,
            [
              {
                "name": "x",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "",
                "type": "Number"
              }
            ]
          ]
        },
        "loadPixels": {
          "description": "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\nfunction must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\nNote that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\nwill occur.",
          "overloads": [null]
        },
        "set": {
          "description": "Changes the color of any pixel, or writes an image directly to the\ndisplay window.\nThe x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n\nAfter using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\nThis should be called once all pixels have been set, and must be called before\ncalling .<a href=\"#/p5/get\">get()</a> or drawing the image.\n\nSetting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\nvalues directly may be complicated when working with a retina display,\nbut will perform better when lots of pixels need to be set directly on\nevery loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the pixel",
                "type": "Number"
              },
              {
                "name": "y",
                "description": "y-coordinate of the pixel",
                "type": "Number"
              },
              {
                "name": "c",
                "description": "insert a grayscale value | a pixel array |\n                               a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy",
                "type": "Number|Number[]|Object"
              }
            ]
          ]
        },
        "updatePixels": {
          "description": "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\nUse in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from\nthe array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\nnecessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\npixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\n<a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.",
          "overloads": [
            [
              {
                "name": "x",
                "description": "x-coordinate of the upper-left corner of region\n                        to update",
                "type": "Number",
                "optional": true
              },
              {
                "name": "y",
                "description": "y-coordinate of the upper-left corner of region\n                        to update",
                "type": "Number",
                "optional": true
              },
              {
                "name": "w",
                "description": "width of region to update",
                "type": "Number",
                "optional": true
              },
              {
                "name": "h",
                "description": "height of region to update",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "loadJSON": {
          "description": "Loads a JSON file from a file or a URL, and returns an Object.\nNote that even if the JSON file contains an Array, an Object will be\nreturned with index numbers as keys.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. JSONP is supported via a polyfill and you\ncan pass in as the second argument an object with definitions of the json\ncallback following the syntax specified <a href=\"https://github.com/camsong/\nfetch-jsonp\">here</a>.\n\nThis method is suitable for fetching files up to size of 64MB.",
          "overloads": [
            [
              {
                "name": "path",
                "description": "name of the file or url to load",
                "type": "String"
              },
              {
                "name": "jsonpOptions",
                "description": "options object for jsonp related settings",
                "type": "Object",
                "optional": true
              },
              {
                "name": "datatype",
                "description": "\"json\" or \"jsonp\"",
                "type": "String",
                "optional": true
              },
              {
                "name": "callback",
                "description": "function to be executed after\n                                   <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\n                                   in as first argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "datatype",
                "description": "",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "loadStrings": {
          "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed.\n\nThis method is suitable for fetching files up to size of 64MB.",
          "overloads": [
            [
              {
                "name": "filename",
                "description": "name of the file or url to load",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "loadTable": {
          "description": "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject:\n\nAll files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB.",
          "overloads": [
            [
              {
                "name": "filename",
                "description": "name of the file or URL to load",
                "type": "String"
              },
              {
                "name": "extension",
                "description": "parse the table by comma-separated values \"csv\", semicolon-separated\n                                     values \"ssv\", or tab-separated values \"tsv\"",
                "type": "String",
                "optional": true
              },
              {
                "name": "header",
                "description": "\"header\" to indicate table has header row",
                "type": "String",
                "optional": true
              },
              {
                "name": "callback",
                "description": "function to be executed after\n                                     <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\n                                     <a href=\"#/p5.Table\">Table</a> object is passed in as the\n                                     first argument.",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "loadXML": {
          "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject.\n\nThis method is suitable for fetching files up to size of 64MB.",
          "overloads": [
            [
              {
                "name": "filename",
                "description": "name of the file or URL to load",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "loadBytes": {
          "description": "This method is suitable for fetching files up to size of 64MB.",
          "overloads": [
            [
              {
                "name": "file",
                "description": "name of the file or URL to load",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\n                                   completes",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if there\n                                   is an error",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "httpGet": {
          "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\na Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\nwhich can be used to initialize typed arrays (such as Uint8Array).",
          "overloads": [
            [
              {
                "name": "path",
                "description": "name of the file or url to load",
                "type": "String"
              },
              {
                "name": "datatype",
                "description": "\"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\n                                   \"xml\", or \"text\"",
                "type": "String",
                "optional": true
              },
              {
                "name": "data",
                "description": "param data passed sent with request",
                "type": "Object|Boolean",
                "optional": true
              },
              {
                "name": "callback",
                "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "data",
                "description": "",
                "type": "Object|Boolean"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "httpPost": {
          "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'POST')</code>.",
          "overloads": [
            [
              {
                "name": "path",
                "description": "name of the file or url to load",
                "type": "String"
              },
              {
                "name": "datatype",
                "description": "\"json\", \"jsonp\", \"xml\", or \"text\".\n                                   If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
                "type": "String",
                "optional": true
              },
              {
                "name": "data",
                "description": "param data passed sent with request",
                "type": "Object|Boolean",
                "optional": true
              },
              {
                "name": "callback",
                "description": "function to be executed after\n                                   <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\n                                   as first argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "data",
                "description": "",
                "type": "Object|Boolean"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function"
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        },
        "httpDo": {
          "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.<br><br>\nFor more advanced use, you may also pass in the path as the first argument\nand a object as the second argument, the signature follows the one specified\nin the Fetch API specification.\nThis method is suitable for fetching files up to size of 64MB when \"GET\" is used.",
          "overloads": [
            [
              {
                "name": "path",
                "description": "name of the file or url to load",
                "type": "String"
              },
              {
                "name": "method",
                "description": "either \"GET\", \"POST\", or \"PUT\",\n                                   defaults to \"GET\"",
                "type": "String",
                "optional": true
              },
              {
                "name": "datatype",
                "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                "type": "String",
                "optional": true
              },
              {
                "name": "data",
                "description": "param data passed sent with request",
                "type": "Object",
                "optional": true
              },
              {
                "name": "callback",
                "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                "type": "Function",
                "optional": true
              }
            ],
            [
              {
                "name": "path",
                "description": "",
                "type": "String"
              },
              {
                "name": "options",
                "description": "Request object options as documented in the\n                                   \"fetch\" API\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>",
                "type": "Object"
              },
              {
                "name": "callback",
                "description": "",
                "type": "Function",
                "optional": true
              },
              {
                "name": "errorCallback",
                "description": "",
                "type": "Function",
                "optional": true
              }
            ]
          ]
        }
      }
    },
    "IO": {
      "methods": {
        "createWriter": {
          "overloads": [
            [
              {
                "name": "name",
                "description": "name of the file to be created",
                "type": "String"
              },
              {
                "name": "extension",
                "description": "",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "save": {
          "description": "Saves a given element(image, text, json, csv, wav, or html) to the client's\ncomputer. The first parameter can be a pointer to element we want to save.\nThe element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of\nStrings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table\n</a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires\np5.sound). The second parameter is a filename (including extension).The\nthird parameter is for options specific to this type of object. This method\nwill save a file that fits the given parameters.\nIf it is called without specifying an element, by default it will save the\nwhole canvas as an image file. You can optionally specify a filename as\nthe first parameter in such a case.\n**Note that it is not recommended to\ncall this method within draw, as it will open a new save dialog on every\nrender.**",
          "overloads": [
            [
              {
                "name": "objectOrFilename",
                "description": "If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).",
                "type": "Object|String",
                "optional": true
              },
              {
                "name": "filename",
                "description": "If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).",
                "type": "String",
                "optional": true
              },
              {
                "name": "options",
                "description": "Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.",
                "type": "Boolean|String",
                "optional": true
              }
            ]
          ]
        },
        "saveJSON": {
          "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
          "overloads": [
            [
              {
                "name": "json",
                "description": "",
                "type": "Array|Object"
              },
              {
                "name": "filename",
                "description": "",
                "type": "String"
              },
              {
                "name": "optimize",
                "description": "If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "saveStrings": {
          "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
          "overloads": [
            [
              {
                "name": "list",
                "description": "string array to be written",
                "type": "String[]"
              },
              {
                "name": "filename",
                "description": "filename for output",
                "type": "String"
              },
              {
                "name": "extension",
                "description": "the filename's extension",
                "type": "String",
                "optional": true
              },
              {
                "name": "isCRLF",
                "description": "if true, change line-break to CRLF",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "saveTable": {
          "description": "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
          "overloads": [
            [
              {
                "name": "Table",
                "description": "the <a href=\"#/p5.Table\">Table</a> object to save to a file",
                "type": "p5.Table"
              },
              {
                "name": "filename",
                "description": "the filename to which the Table should be saved",
                "type": "String"
              },
              {
                "name": "options",
                "description": "can be one of \"tsv\", \"csv\", or \"html\"",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "addRow": {
          "description": "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\nan empty row is created. Typically, you would store a reference to\nthe new row in a TableRow object (see newRow in the example above),\nand then set individual values using <a href=\"#/p5/set\">set()</a>.\n\nIf a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\nduplicated and added to the table.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row to be added to the table",
                "type": "p5.TableRow",
                "optional": true
              }
            ]
          ]
        },
        "removeRow": {
          "description": "Removes a row from the table object.",
          "overloads": [
            [
              {
                "name": "id",
                "description": "ID number of the row to remove",
                "type": "Integer"
              }
            ]
          ]
        },
        "getRow": {
          "description": "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\ncan then be used to get and set values of the selected row.",
          "overloads": [
            [
              {
                "name": "rowID",
                "description": "ID number of the row to get",
                "type": "Integer"
              }
            ]
          ]
        },
        "getRows": {
          "description": "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.",
          "overloads": [null]
        },
        "findRow": {
          "description": "Finds the first row in the Table that contains the value\nprovided, and returns a reference to that row. Even if\nmultiple rows are possible matches, only the first matching\nrow is returned. The column to search may be specified by\neither its ID or title.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "The value to match",
                "type": "String"
              },
              {
                "name": "column",
                "description": "ID number or title of the\n                               column to search",
                "type": "Integer|String"
              }
            ]
          ]
        },
        "findRows": {
          "description": "Finds the rows in the Table that contain the value\nprovided, and returns references to those rows. Returns an\nArray, so for must be used to iterate through all the rows,\nas shown in the example above. The column to search may be\nspecified by either its ID or title.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "The value to match",
                "type": "String"
              },
              {
                "name": "column",
                "description": "ID number or title of the\n                               column to search",
                "type": "Integer|String"
              }
            ]
          ]
        },
        "matchRow": {
          "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be\nspecified by either its ID or title.",
          "overloads": [
            [
              {
                "name": "regexp",
                "description": "The regular expression to match",
                "type": "String|RegExp"
              },
              {
                "name": "column",
                "description": "The column ID (number) or\n                                 title (string)",
                "type": "String|Integer"
              }
            ]
          ]
        },
        "matchRows": {
          "description": "Finds the rows in the Table that match the regular expression provided,\nand returns references to those rows. Returns an array, so for must be\nused to iterate through all the rows, as shown in the example. The\ncolumn to search may be specified by either its ID or title.",
          "overloads": [
            [
              {
                "name": "regexp",
                "description": "The regular expression to match",
                "type": "String"
              },
              {
                "name": "column",
                "description": "The column ID (number) or\n                                 title (string)",
                "type": "String|Integer",
                "optional": true
              }
            ]
          ]
        },
        "getColumn": {
          "description": "Retrieves all values in the specified column, and returns them\nas an array. The column may be specified by either its ID or title.",
          "overloads": [
            [
              {
                "name": "column",
                "description": "String or Number of the column to return",
                "type": "String|Number"
              }
            ]
          ]
        },
        "clearRows": {
          "description": "Removes all rows from a Table. While all rows are removed,\ncolumns and column titles are maintained.",
          "overloads": [null]
        },
        "addColumn": {
          "description": "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\nTypically, you will want to specify a title, so the column\nmay be easily referenced later by name. (If no title is\nspecified, the new column's title will be null.)",
          "overloads": [
            [
              {
                "name": "title",
                "description": "title of the given column",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "getColumnCount": {
          "description": "Returns the total number of columns in a Table.",
          "overloads": [null]
        },
        "getRowCount": {
          "description": "Returns the total number of rows in a Table.",
          "overloads": [null]
        },
        "removeTokens": {
          "description": "Removes any of the specified characters (or \"tokens\").\n\nIf no column is specified, then the values in all columns and\nrows are processed. A specific column may be referenced by\neither its ID or title.",
          "overloads": [
            [
              {
                "name": "chars",
                "description": "String listing characters to be removed",
                "type": "String"
              },
              {
                "name": "column",
                "description": "Column ID (number)\n                                 or name (string)",
                "type": "String|Integer",
                "optional": true
              }
            ]
          ]
        },
        "trim": {
          "description": "Trims leading and trailing whitespace, such as spaces and tabs,\nfrom String table values. If no column is specified, then the\nvalues in all columns and rows are trimmed. A specific column\nmay be referenced by either its ID or title.",
          "overloads": [
            [
              {
                "name": "column",
                "description": "Column ID (number)\n                                 or name (string)",
                "type": "String|Integer",
                "optional": true
              }
            ]
          ]
        },
        "removeColumn": {
          "description": "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\nobject. The column to be removed may be identified by either\nits title (a String) or its index value (an int).\nremoveColumn(0) would remove the first column, removeColumn(1)\nwould remove the second column, and so on.",
          "overloads": [
            [
              {
                "name": "column",
                "description": "columnName (string) or ID (number)",
                "type": "String|Integer"
              }
            ]
          ]
        },
        "set": {
          "description": "Stores a value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "column ID (Number)\n                              or title (String)",
                "type": "String|Integer"
              },
              {
                "name": "value",
                "description": "value to assign",
                "type": "String|Number"
              }
            ]
          ]
        },
        "setNum": {
          "description": "Stores a Float value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "column ID (Number)\n                              or title (String)",
                "type": "String|Integer"
              },
              {
                "name": "value",
                "description": "value to assign",
                "type": "Number"
              }
            ]
          ]
        },
        "setString": {
          "description": "Stores a String value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "column ID (Number)\n                              or title (String)",
                "type": "String|Integer"
              },
              {
                "name": "value",
                "description": "value to assign",
                "type": "String"
              }
            ]
          ]
        },
        "get": {
          "description": "Retrieves a value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "columnName (string) or\n                                  ID (number)",
                "type": "String|Integer"
              }
            ]
          ]
        },
        "getNum": {
          "description": "Retrieves a Float value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "columnName (string) or\n                                  ID (number)",
                "type": "String|Integer"
              }
            ]
          ]
        },
        "getString": {
          "description": "Retrieves a String value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
          "overloads": [
            [
              {
                "name": "row",
                "description": "row ID",
                "type": "Integer"
              },
              {
                "name": "column",
                "description": "columnName (string) or\n                                  ID (number)",
                "type": "String|Integer"
              }
            ]
          ]
        },
        "getObject": {
          "description": "Retrieves all table data and returns as an object. If a column name is\npassed in, each row object will be stored with that attribute as its\ntitle.",
          "overloads": [
            [
              {
                "name": "headerColumn",
                "description": "Name of the column which should be used to\n                             title each row object (optional)",
                "type": "String",
                "optional": true
              }
            ]
          ]
        },
        "getArray": {
          "description": "Retrieves all table data and returns it as a multidimensional array.",
          "overloads": [null]
        },
        "minute": {
          "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\nreturns the current minute as a value from 0 - 59.",
          "overloads": [null]
        },
        "millis": {
          "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the sketch (when `setup()` is called). This information is often\nused for timing events and animation sequences.",
          "overloads": [null]
        },
        "month": {
          "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\nreturns the current month as a value from 1 - 12.",
          "overloads": [null]
        },
        "second": {
          "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\nreturns the current second as a value from 0 - 59.",
          "overloads": [null]
        },
        "year": {
          "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
          "overloads": [null]
        }
      }
    },
    "Math": {
      "methods": {
        "constrain": {
          "description": "Constrains a value between a minimum and maximum value.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "number to constrain",
                "type": "Number"
              },
              {
                "name": "low",
                "description": "minimum limit",
                "type": "Number"
              },
              {
                "name": "high",
                "description": "maximum limit",
                "type": "Number"
              }
            ]
          ]
        },
        "dist": {
          "description": "Calculates the distance between two points, in either two or three dimensions.",
          "overloads": [
            [
              {
                "name": "x1",
                "description": "x-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "y-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "x-coordinate of the second point",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "y-coordinate of the second point",
                "type": "Number"
              }
            ],
            [
              {
                "name": "x1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y1",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z1",
                "description": "z-coordinate of the first point",
                "type": "Number"
              },
              {
                "name": "x2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "y2",
                "description": "",
                "type": "Number"
              },
              {
                "name": "z2",
                "description": "z-coordinate of the second point",
                "type": "Number"
              }
            ]
          ]
        },
        "exp": {
          "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "exponent to raise",
                "type": "Number"
              }
            ]
          ]
        },
        "floor": {
          "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "number to round down",
                "type": "Number"
              }
            ]
          ]
        },
        "lerp": {
          "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, and 1.0 is equal to the second point. If the\nvalue of amt is more than 1.0 or less than 0.0, the number will be\ncalculated accordingly in the ratio of the two given numbers. The lerp\nfunction is convenient for creating motion along a straight\npath and for drawing dotted lines.",
          "overloads": [
            [
              {
                "name": "start",
                "description": "first value",
                "type": "Number"
              },
              {
                "name": "stop",
                "description": "second value",
                "type": "Number"
              },
              {
                "name": "amt",
                "description": "number",
                "type": "Number"
              }
            ]
          ]
        },
        "log": {
          "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "number greater than 0",
                "type": "Number"
              }
            ]
          ]
        },
        "mag": {
          "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\na shortcut for writing dist(0, 0, x, y).",
          "overloads": [
            [
              {
                "name": "a",
                "description": "first value",
                "type": "Number"
              },
              {
                "name": "b",
                "description": "second value",
                "type": "Number"
              }
            ]
          ]
        },
        "map": {
          "description": "Re-maps a number from one range to another.\n\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width).",
          "overloads": [
            [
              {
                "name": "value",
                "description": "the incoming value to be converted",
                "type": "Number"
              },
              {
                "name": "start1",
                "description": "lower bound of the value's current range",
                "type": "Number"
              },
              {
                "name": "stop1",
                "description": "upper bound of the value's current range",
                "type": "Number"
              },
              {
                "name": "start2",
                "description": "lower bound of the value's target range",
                "type": "Number"
              },
              {
                "name": "stop2",
                "description": "upper bound of the value's target range",
                "type": "Number"
              },
              {
                "name": "withinBounds",
                "description": "constrain the value to the newly mapped range",
                "type": "Boolean",
                "optional": true
              }
            ]
          ]
        },
        "max": {
          "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\nof any length.",
          "overloads": [
            [
              {
                "name": "n0",
                "description": "Number to compare",
                "type": "Number"
              },
              {
                "name": "n1",
                "description": "Number to compare",
                "type": "Number"
              }
            ],
            [
              {
                "name": "nums",
                "description": "Numbers to compare",
                "type": "Number[]"
              }
            ]
          ]
        },
        "min": {
          "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\nof any length.",
          "overloads": [
            [
              {
                "name": "n0",
                "description": "Number to compare",
                "type": "Number"
              },
              {
                "name": "n1",
                "description": "Number to compare",
                "type": "Number"
              }
            ],
            [
              {
                "name": "nums",
                "description": "Numbers to compare",
                "type": "Number[]"
              }
            ]
          ]
        },
        "norm": {
          "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the example above.)",
          "overloads": [
            [
              {
                "name": "value",
                "description": "incoming value to be normalized",
                "type": "Number"
              },
              {
                "name": "start",
                "description": "lower bound of the value's current range",
                "type": "Number"
              },
              {
                "name": "stop",
                "description": "upper bound of the value's current range",
                "type": "Number"
              }
            ]
          ]
        },
        "pow": {
          "description": "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3 &times; 3 &times; 3 &times; 3 &times; 3 and pow(3, -5) is equivalent to 1 /\n3 &times; 3 &times; 3 &times; 3 &times; 3. Maps to\nMath.pow().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "base of the exponential expression",
                "type": "Number"
              },
              {
                "name": "e",
                "description": "power by which to raise the base",
                "type": "Number"
              }
            ]
          ]
        },
        "round": {
          "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "number to round",
                "type": "Number"
              },
              {
                "name": "decimals",
                "description": "number of decimal places to round to, default is 0",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "sq": {
          "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
          "overloads": [
            [
              {
                "name": "n",
                "description": "number to square",
                "type": "Number"
              }
            ]
          ]
        },
        "sqrt": {
          "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
          "overloads": [
            [
              {
                "name": "n",
                "description": "non-negative number to square root",
                "type": "Number"
              }
            ]
          ]
        },
        "fract": {
          "description": "Calculates the fractional part of a number.",
          "overloads": [
            [
              {
                "name": "num",
                "description": "Number whose fractional part needs to be found out",
                "type": "Number"
              }
            ]
          ]
        },
        "noiseSeed": {
          "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.",
          "overloads": [
            [
              {
                "name": "seed",
                "description": "the seed value",
                "type": "Number"
              }
            ]
          ]
        },
        "atan": {
          "description": "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value.\nThis function expects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or\n-90 to 90 if the angle mode is DEGREES.",
          "overloads": [
            [
              {
                "name": "value",
                "description": "the value whose arc tangent is to be returned",
                "type": "Number"
              }
            ]
          ]
        },
        "atan2": {
          "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI if the angleMode is RADIANS or 180 to\n-180 if the angleMode is DEGREES. The atan2<a href=\"#/p5/\">()</a> function is\nmost often used for orienting geometry to the position of the cursor.\n\nNote: The y-coordinate of the point is the first parameter, and the\nx-coordinate is the second parameter, due the the structure of calculating\nthe tangent.",
          "overloads": [
            [
              {
                "name": "y",
                "description": "y-coordinate of the point",
                "type": "Number"
              },
              {
                "name": "x",
                "description": "x-coordinate of the point",
                "type": "Number"
              }
            ]
          ]
        },
        "cos": {
          "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle",
                "type": "Number"
              }
            ]
          ]
        },
        "sin": {
          "description": "Calculates the sine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle",
                "type": "Number"
              }
            ]
          ]
        },
        "tan": {
          "description": "Calculates the tangent of an angle. This function takes into account\nthe current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers.",
          "overloads": [
            [
              {
                "name": "angle",
                "description": "the angle",
                "type": "Number"
              }
            ]
          ]
        },
        "degrees": {
          "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
          "overloads": [
            [
              {
                "name": "radians",
                "description": "the radians value to convert to degrees",
                "type": "Number"
              }
            ]
          ]
        },
        "radians": {
          "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
          "overloads": [
            [
              {
                "name": "degrees",
                "description": "the degree value to convert to radians",
                "type": "Number"
              }
            ]
          ]
        },
        "angleMode": {
          "description": "Sets the current mode of p5 to given mode. Default mode is RADIANS.",
          "overloads": [
            [
              {
                "name": "mode",
                "description": "either RADIANS or DEGREES",
                "type": "Constant"
              }
            ]
          ]
        }
      }
    },
    "Typography": {
      "methods": {
        "textLeading": {
          "overloads": [null]
        },
        "textSize": {
          "description": "Sets/gets the current font size. This size will be used in all subsequent\ncalls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.",
          "overloads": [
            [
              {
                "name": "theSize",
                "description": "the size of the letters in units of pixels",
                "type": "Number"
              }
            ],
            null
          ]
        },
        "textStyle": {
          "description": "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\nNote: this may be is overridden by CSS styling. For non-system fonts\n(opentype, truetype, etc.) please load styled fonts instead.",
          "overloads": [
            [
              {
                "name": "theStyle",
                "description": "styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC",
                "type": "Constant"
              }
            ],
            null
          ]
        },
        "textWidth": {
          "description": "Calculates and returns the width of any character or text string.",
          "overloads": [
            [
              {
                "name": "theText",
                "description": "the String of characters to measure",
                "type": "String"
              }
            ]
          ]
        },
        "textAscent": {
          "description": "Returns the ascent of the current font at its current size. The ascent\nrepresents the distance, in pixels, of the tallest character above\nthe baseline.",
          "overloads": [null]
        },
        "textDescent": {
          "description": "Returns the descent of the current font at its current size. The descent\nrepresents the distance, in pixels, of the character with the longest\ndescender below the baseline.",
          "overloads": [null]
        },
        "textFont": {
          "description": "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\nIf textFont() is called without any argument, it will return the current font if one has\nbeen set already. If not, it will return the name of the default font as a string.\nIf textFont() is called with a font to use, it will return the p5 object.\n\n<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.",
          "overloads": [
            null,
            [
              {
                "name": "font",
                "description": "a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>,\nor a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a>\n(a font that is generally available across all systems)",
                "type": "Object|String"
              },
              {
                "name": "size",
                "description": "the font size to use",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        }
      }
    },
    "Lights, Camera": {
      "methods": {
        "shader": {
          "description": "The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\nto fill in shapes in WEBGL mode. Users can create their\nown shaders by loading vertex and fragment shaders with\n<a href=\"#/p5/loadShader\">loadShader()</a>.",
          "overloads": [
            [
              {
                "name": "s",
                "description": "the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\nshapes.",
                "type": "p5.Shader",
                "optional": true
              }
            ]
          ]
        },
        "resetShader": {
          "description": "This function restores the default shaders in WEBGL mode. Code that runs\nafter resetShader() will not be affected by previously defined\nshaders. Should be run after <a href=\"#/p5/shader\">shader()</a>.",
          "overloads": [null]
        },
        "normalMaterial": {
          "description": "Normal material for geometry is a material that is not affected by light.\nIt is not reflective and is a placeholder material often used for debugging.\nSurfaces facing the X-axis, become red, those facing the Y-axis, become green and those facing the Z-axis, become blue.\nYou can view all possible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
          "overloads": [null]
        },
        "texture": {
          "description": "Texture for geometry.  You can view other possible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
          "overloads": [
            [
              {
                "name": "tex",
                "description": "2-dimensional graphics\n                   to render as texture",
                "type": "p5.Image|p5.MediaElement|p5.Graphics"
              }
            ]
          ]
        },
        "textureMode": {
          "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\nThis function only works in WEBGL mode.\n\nWith IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
          "overloads": [
            [
              {
                "name": "mode",
                "description": "either IMAGE or NORMAL",
                "type": "Constant"
              }
            ]
          ]
        },
        "textureWrap": {
          "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 - 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds\nREPEAT causes the texture to tile repeatedly until reaching the bounds\nMIRROR works similarly to REPEAT but it flips the texture with every new tile\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until a subsequent\ntextureWrap call is made.\n\nIf only one argument is provided, it will be applied to both the\nhorizontal and vertical axes.",
          "overloads": [
            [
              {
                "name": "wrapX",
                "description": "either CLAMP, REPEAT, or MIRROR",
                "type": "Constant"
              },
              {
                "name": "wrapY",
                "description": "either CLAMP, REPEAT, or MIRROR",
                "type": "Constant",
                "optional": true
              }
            ]
          ]
        },
        "ambientMaterial": {
          "description": "Ambient material for geometry with a given color. Ambient material defines the color the object reflects under any lighting.\nFor example, if the ambient material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\nHere's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "gray value, red or hue value\n                        (depending on the current color mode),",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value",
                "type": "Number",
                "optional": true
              },
              {
                "name": "v3",
                "description": "blue or brightness value",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "color, color Array, or CSS color string",
                "type": "Number[]|String|p5.Color"
              }
            ]
          ]
        },
        "emissiveMaterial": {
          "description": "Sets the emissive color of the material used for geometry drawn to\nthe screen. This is a misnomer in the sense that the material does not\nactually emit light that effects surrounding polygons. Instead,\nit gives the appearance that the object is glowing. An emissive material\nwill display at full strength even if there is no light for it to reflect.",
          "overloads": [
            [
              {
                "name": "v1",
                "description": "gray value, red or hue value\n                        (depending on the current color mode),",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value",
                "type": "Number",
                "optional": true
              },
              {
                "name": "v3",
                "description": "blue or brightness value",
                "type": "Number",
                "optional": true
              },
              {
                "name": "a",
                "description": "opacity",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "color, color Array, or CSS color string",
                "type": "Number[]|String|p5.Color"
              }
            ]
          ]
        },
        "specularMaterial": {
          "description": "Specular material for geometry with a given color. Specular material is a shiny reflective material.\nLike ambient material it also defines the color the object reflects under ambient lighting.\nFor example, if the specular material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\nFor all other types of light like point and directional light, a specular material will reflect the color of the light source to the viewer.\nHere's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.",
          "overloads": [
            [
              {
                "name": "gray",
                "description": "number specifying value between white and black.",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "alpha value relative to current color range\n                                (default is 0-255)",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "v1",
                "description": "red or hue value relative to\n                                the current color range",
                "type": "Number"
              },
              {
                "name": "v2",
                "description": "green or saturation value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "v3",
                "description": "blue or brightness value\n                                relative to the current color range",
                "type": "Number"
              },
              {
                "name": "alpha",
                "description": "",
                "type": "Number",
                "optional": true
              }
            ],
            [
              {
                "name": "color",
                "description": "color Array, or CSS color string",
                "type": "Number[]|String|p5.Color"
              }
            ]
          ]
        },
        "shininess": {
          "description": "Sets the amount of gloss in the surface of shapes.\nUsed in combination with specularMaterial() in setting\nthe material properties of shapes. The default and minimum value is 1.",
          "overloads": [
            [
              {
                "name": "shine",
                "description": "Degree of Shininess.\n                      Defaults to 1.",
                "type": "Number"
              }
            ]
          ]
        },
        "perspective": {
          "description": "Sets the camera position for a 3D sketch. Parameters for this function define\nthe position for the camera, the center of the sketch (where the camera is\npointing), and an up direction (the orientation of the camera).\n\nThis function simulates the movements of the camera, allowing objects to be\nviewed from various angles. Remember, it does not move the objects themselves\nbut the camera instead. For example when centerX value is positive, the camera\nis rotating to the right side of the sketch, so the object would seem like\nmoving to the left.\n\nSee this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a>\nto view the position of your camera.\n\nWhen called with no arguments, this function creates a default camera\nequivalent to\ncamera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);",
          "overloads": [
            [
              {
                "name": "x",
                "description": "camera position value on x axis",
                "type": "Number",
                "optional": true
              },
              {
                "name": "y",
                "description": "camera position value on y axis",
                "type": "Number",
                "optional": true
              },
              {
                "name": "z",
                "description": "camera position value on z axis",
                "type": "Number",
                "optional": true
              },
              {
                "name": "centerX",
                "description": "x coordinate representing center of the sketch",
                "type": "Number",
                "optional": true
              },
              {
                "name": "centerY",
                "description": "y coordinate representing center of the sketch",
                "type": "Number",
                "optional": true
              },
              {
                "name": "centerZ",
                "description": "z coordinate representing center of the sketch",
                "type": "Number",
                "optional": true
              },
              {
                "name": "upX",
                "description": "x component of direction 'up' from camera",
                "type": "Number",
                "optional": true
              },
              {
                "name": "upY",
                "description": "y component of direction 'up' from camera",
                "type": "Number",
                "optional": true
              },
              {
                "name": "upZ",
                "description": "z component of direction 'up' from camera",
                "type": "Number",
                "optional": true
              },
              {
                "name": "fovy",
                "description": "camera frustum vertical field of view,\n                          from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units",
                "type": "Number",
                "optional": true
              },
              {
                "name": "aspect",
                "description": "camera frustum aspect ratio",
                "type": "Number",
                "optional": true
              },
              {
                "name": "near",
                "description": "frustum near plane length",
                "type": "Number",
                "optional": true
              },
              {
                "name": "far",
                "description": "frustum far plane length",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "ortho": {
          "description": "Sets an orthographic projection for the camera in a 3D sketch and defines a\nbox-shaped viewing frustum within which objects are seen. In this projection,\nall objects with the same dimension appear the same size, regardless of\nwhether they are near or far from the camera. The parameters to this\nfunction specify the viewing frustum where left and right are the minimum and\nmaximum x values, top and bottom are the minimum and maximum y values, and near\nand far are the minimum and maximum z values. If no parameters are given, the\ndefault is used: ortho(-width/2, width/2, -height/2, height/2).",
          "overloads": [
            [
              {
                "name": "left",
                "description": "camera frustum left plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "right",
                "description": "camera frustum right plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "bottom",
                "description": "camera frustum bottom plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "top",
                "description": "camera frustum top plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "near",
                "description": "camera frustum near plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "far",
                "description": "camera frustum far plane",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "frustum": {
          "description": "Sets a perspective matrix as defined by the parameters.\n\nA frustum is a geometric form: a pyramid with its top\ncut off. With the viewer's eye at the imaginary top of\nthe pyramid, the six planes of the frustum act as clipping\nplanes when rendering a 3D view. Thus, any form inside the\nclipping planes is visible; anything outside\nthose planes is not visible.\n\nSetting the frustum changes the perspective of the scene being rendered.\nThis can be achieved more simply in many cases by using\n<a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.",
          "overloads": [
            [
              {
                "name": "left",
                "description": "camera frustum left plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "right",
                "description": "camera frustum right plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "bottom",
                "description": "camera frustum bottom plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "top",
                "description": "camera frustum top plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "near",
                "description": "camera frustum near plane",
                "type": "Number",
                "optional": true
              },
              {
                "name": "far",
                "description": "camera frustum far plane",
                "type": "Number",
                "optional": true
              }
            ]
          ]
        },
        "createCamera": {
          "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\nrenderer to use that camera.\nReturns the p5.Camera object.",
          "overloads": [null]
        },
        "setCamera": {
          "description": "Sets rendererGL's current camera to a p5.Camera object.  Allows switching\nbetween multiple cameras.",
          "overloads": [
            [
              {
                "name": "cam",
                "description": "p5.Camera object",
                "type": "p5.Camera"
              }
            ]
          ]
        }
      }
    },
    "Rendering": {
      "methods": {
        "setAttributes": {
          "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif called after the WebGL canvas is made.\n\nIf an object is passed as the parameter, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is true\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
          "overloads": [
            [
              {
                "name": "key",
                "description": "Name of attribute",
                "type": "String"
              },
              {
                "name": "value",
                "description": "New value of named attribute",
                "type": "Boolean"
              }
            ],
            [
              {
                "name": "obj",
                "description": "object with key-value pairs",
                "type": "Object"
              }
            ]
          ]
        }
      }
    }
  }
}
