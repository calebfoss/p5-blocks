{
    "project": {},
    "files": {
        "p5.js": {
            "name": "p5.js",
            "modules": {
                "Environment": 1,
                "Color Conversion": 1,
                "Creating & Reading": 1,
                "DOM": 1,
                "Rendering": 1,
                "2D Primitives": 1,
                "Attributes": 1,
                "Curves": 1,
                "Vertex": 1,
                "Structure": 1,
                "Dictionary": 1,
                "Acceleration": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "Touch": 1,
                "Image": 1,
                "Loading & Displaying": 1,
                "Pixels": 1,
                "Output": 1,
                "Table": 1,
                "Input": 1,
                "Calculation": 1,
                "Vector": 1,
                "Trigonometry": 1,
                "Array Functions": 1,
                "Conversion": 1,
                "Time & Date": 1,
                "3D Primitives": 1,
                "3D Models": 1,
                "Material": 1
            },
            "classes": {
                "Promise": 1,
                "": 1,
                "p5": 1,
                "p5.Color": 1,
                "p5.Element": 1,
                "p5.Graphics": 1,
                "p5.Renderer": 1,
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1,
                "p5.MediaElement": 1,
                "p5.File": 1,
                "p5.Image": 1,
                "p5.PrintWriter": 1,
                "p5.TableRow": 1,
                "p5.XML": 1,
                "p5.Vector": 1,
                "p5.Font": 1,
                "p5.Camera": 1,
                "p5.Geometry": 1,
                "p5.Matrix": 1,
                "p5.RendererGL": 1,
                "p5.Shader": 1,
                "p5.Texture": 1,
                "ImageInfos": 1,
                "FontInfo": 1,
                "Cubic": 1
            },
            "fors": {
                "p5": 1,
                "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.": 1,
                "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.": 1,
                "p5.TypedDict": 1,
                "p5.Element": 1,
                "p5.Camera": 1
            },
            "namespaces": {
                "opentype": 1
            }
        }
    },
    "modules": {
        "Environment": {
            "name": "Environment",
            "submodules": {
                "Creating & Reading": 1
            },
            "elements": {},
            "classes": {
                "p5.Color": 1,
                "Promise": 1,
                "": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "DOM",
            "file": "p5.js",
            "line": 44664,
            "requires": [
                "core\n/ var descContainer = '_Description'; //Fallback container\n         var fallbackDescId = '_fallbackDesc'; //Fallback description\n         var fallbackTableId = '_fallbackTable'; //Fallback Table\n         var fallbackTableElId = '_fte_'; //Fallback Table Element\n         var labelContainer = '_Label'; //Label container\n         var labelDescId = '_labelDesc'; //Label description\n         var labelTableId = '_labelTable'; //Label Table\n         var labelTableElId = '_lte_'; //Label Table Element\n         /**\nCreates a screen reader accessible description for the canvas.\nThe first parameter should be a string with a description of the canvas.\nThe second parameter is optional. If specified",
                "it determines how the\ndescription is displayed.\n\n<code class=\"language-javascript\">describe(text",
                "LABEL)</code> displays\nthe description to all users as a <a\nhref=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">\ntombstone or exhibit label/caption</a> in a\n<code class=\"language-javascript\">&lt;div class=\"p5Label\"&gt;&lt;/div&gt;</code>\nadjacent to the canvas. You can style it as you wish in your CSS.\n\n<code class=\"language-javascript\">describe(text",
                "FALLBACK)</code> makes the\ndescription accessible to screen-reader users only",
                "in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\na sub DOM inside the canvas element</a>. If a second parameter is not\nspecified",
                "by default",
                "the description will only be available to\nscreen-reader users."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "text",
                    "description": "description of the canvas",
                    "type": "String"
                },
                {
                    "name": "display",
                    "description": "either LABEL or FALLBACK (Optional)",
                    "type": "Constant",
                    "optional": true
                },
                {
                    "name": "name",
                    "description": "name of the element",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "description of the element",
                    "type": "String"
                },
                {
                    "name": "display",
                    "description": "either LABEL or FALLBACK (Optional)",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\ndescribe('pink square with red heart in the bottom right corner', LABEL);\nbackground('pink');\nfill('red');\nnoStroke();\nellipse(67, 67, 20, 20);\nellipse(83, 67, 20, 20);\ntriangle(91, 73, 75, 95, 59, 73);\n</code>\n</div>\n\n<div>\n<code>\nlet x = 0;\nfunction draw() {\n  if (x > 100) {\n    x = 0;\n  }\n  background(220);\n  fill(0, 255, 0);\n  ellipse(x, 50, 40, 40);\n  x = x + 0.1;\n  describe('green circle at x pos ' + round(x) + ' moving to the right');\n}\n</code>\n</div>\n\n/ _main.default.prototype.describe = function(text, display) {\n           _main.default._validateParameters('describe', arguments);\n           if (typeof text !== 'string') {\n             return;\n           }\n           var cnvId = this.canvas.id;\n           //calls function that adds punctuation for better screen reading\n           text = _descriptionText(text);\n           //if there is no dummyDOM\n           if (!this.dummyDOM) {\n             this.dummyDOM = document.getElementById(cnvId).parentNode;\n           }\n           if (!this.descriptions) {\n             this.descriptions = {};\n           }\n           //check if html structure for description is ready\n           if (this.descriptions.fallback) {\n             //check if text is different from current description\n             if (this.descriptions.fallback.innerHTML !== text) {\n               //update description\n               this.descriptions.fallback.innerHTML = text;\n             }\n           } else {\n             //create fallback html structure\n             this._describeHTML('fallback', text);\n           }\n           //if display is LABEL\n           if (display === this.LABEL) {\n             //check if html structure for label is ready\n             if (this.descriptions.label) {\n               //check if text is different from current label\n               if (this.descriptions.label.innerHTML !== text) {\n                 //update label description\n                 this.descriptions.label.innerHTML = text;\n               }\n             } else {\n               //create label html structure\n               this._describeHTML('label', text);\n             }\n           }\n         };\n\n         /**\nThis function creates a screen-reader accessible\ndescription for elements —shapes or groups of shapes that create\nmeaning together— in the canvas. The first paramater should\nbe the name of the element. The second parameter should be a string\nwith a description of the element. The third parameter is optional.\nIf specified, it determines how the element description is displayed.\n\n<code class=\"language-javascript\">describeElement(name, text, LABEL)</code>\ndisplays the element description to all users as a\n<a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">\ntombstone or exhibit label/caption</a> in a\n<code class=\"language-javascript\">&lt;div class=\"p5Label\"&gt;&lt;/div&gt;</code>\nadjacent to the canvas. You can style it as you wish in your CSS.\n\n<code class=\"language-javascript\">describeElement(name, text, FALLBACK)</code>\nmakes the element description accessible to screen-reader users\nonly, in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\na sub DOM inside the canvas element</a>. If a second parameter is not\nspecified, by default, the element description will only be available\nto screen-reader users.",
                "\n<div>\n<code>\ndescribe('Heart and yellow circle over pink background', LABEL);\nnoStroke();\nbackground('pink');\ndescribeElement('Circle', 'Yellow circle in the top left corner', LABEL);\nfill('yellow');\nellipse(25, 25, 40, 40);\ndescribeElement('Heart', 'red heart in the bottom right corner', LABEL);\nfill('red');\nellipse(66.6, 66.6, 20, 20);\nellipse(83.2, 66.6, 20, 20);\ntriangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n</code>\n</div>"
            ],
            "type": "Number",
            "final": "/ exports.LABEL = LABEL;\n         var FALLBACK = 'fallback';\n         exports.FALLBACK = FALLBACK;\n       },\n       {}\n     ],\n     49: [\n       function(_dereq_, module, exports) {\n         'use strict';\n         function _typeof(obj) {\n           if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n             _typeof = function _typeof(obj) {\n               return typeof obj;\n             };\n           } else {\n             _typeof = function _typeof(obj) {\n               return obj &&\n                 typeof Symbol === 'function' &&\n                 obj.constructor === Symbol &&\n                 obj !== Symbol.prototype\n                 ? 'symbol'\n                 : typeof obj;\n             };\n           }\n           return _typeof(obj);\n         }\n         Object.defineProperty(exports, '__esModule', { value: true });\n         exports.default = void 0;\n\n         var _main = _interopRequireDefault(_dereq_('./main'));\n         var C = _interopRequireWildcard(_dereq_('./constants'));\n         function _getRequireWildcardCache() {\n           if (typeof WeakMap !== 'function') return null;\n           var cache = new WeakMap();\n           _getRequireWildcardCache = function _getRequireWildcardCache() {\n             return cache;\n           };\n           return cache;\n         }\n         function _interopRequireWildcard(obj) {\n           if (obj && obj.__esModule) {\n             return obj;\n           }\n           if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n             return { default: obj };\n           }\n           var cache = _getRequireWildcardCache();\n           if (cache && cache.has(obj)) {\n             return cache.get(obj);\n           }\n           var newObj = {};\n           var hasPropertyDescriptor =\n             Object.defineProperty && Object.getOwnPropertyDescriptor;\n           for (var key in obj) {\n             if (Object.prototype.hasOwnProperty.call(obj, key)) {\n               var desc = hasPropertyDescriptor\n                 ? Object.getOwnPropertyDescriptor(obj, key)\n                 : null;\n               if (desc && (desc.get || desc.set)) {\n                 Object.defineProperty(newObj, key, desc);\n               } else {\n                 newObj[key] = obj[key];\n               }\n             }\n           }\n           newObj.default = obj;\n           if (cache) {\n             cache.set(obj, newObj);\n           }\n           return newObj;\n         }\n         function _interopRequireDefault(obj) {\n           return obj && obj.__esModule ? obj : { default: obj };\n         }\n         /**",
            "default": "color-burn\n/ exports.DODGE = DODGE;\n         var BURN = 'color-burn';\n\n         // FILTERS\n         /**",
            "alt": "default grey canvas"
        },
        "Color": {
            "name": "Color",
            "submodules": {
                "Color Conversion": 1
            },
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "Color Conversion": {
            "name": "Color Conversion",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "p5.js",
            "line": 43698,
            "requires": [
                "core\n/ /**\nConversions adapted from <http://www.easyrgb.com/en/math.php>.\n\nIn these functions",
                "hue is always in the range [0",
                "1]",
                "just like all other\ncomponents are in the range [0",
                "1]. 'Brightness' and 'value' are used\ninterchangeably.\n/ _main.default.ColorConversion = {};\n         /**\nConvert an HSBA array to HSLA.\n/ _main.default.ColorConversion._hsbaToHSLA = function(hsba) {\n           var hue = hsba[0];\n           var sat = hsba[1];\n           var val = hsba[2]; // Calculate lightness.\n           var li = (2 - sat) * val / 2; // Convert saturation.\n           if (li !== 0) {\n             if (li === 1) {\n               sat = 0;\n             } else if (li < 0.5) {\n               sat = sat / (2 - sat);\n             } else {\n               sat = sat * val / (2 - li * 2);\n             }\n           }\n\n           // Hue and alpha stay the same.\n           return [hue",
                "sat",
                "li",
                "hsba[3]];\n         };\n\n         /**\nConvert an HSBA array to RGBA."
            ]
        },
        "Creating & Reading": {
            "name": "Creating & Reading",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Environment",
            "namespace": "",
            "file": "p5.js",
            "line": 44033,
            "requires": [
                "core",
                "constants\n/ /**\nExtracts the alpha value from a color or pixel array."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                },
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the blue value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\nlet c = color(0, 126, 255, 102);\nfill(c);\nrect(15, 15, 35, 70);\nlet value = alpha(c); // Sets 'value' to 102\nfill(value);\nrect(50, 15, 35, 70);\n</code>\n</div>",
                "\n<div>\n<code>\nlet c = color(175, 100, 220);\nfill(c);\nrect(15, 20, 35, 60); // Draw left rectangle\nlet blueValue = blue(c);\nfill(0, 0, blueValue);\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>"
            ],
            "alt": "Left half of canvas light purple and right half a royal blue.",
            "is_constructor": 1
        },
        "DOM": {
            "name": "DOM",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.": 1
            },
            "fors": {
                "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.": 1
            },
            "namespaces": {},
            "module": "Shape",
            "file": "p5.js",
            "line": 51955,
            "is_constructor": 1,
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance\n/ _main.default.Element = function(elt, pInst) {\n           /**\nUnderlying HTML element. All normal HTML methods can be called on this.",
                    "type": "P5",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  let c = createCanvas(50, 50);\n  c.elt.style.border = '5px solid red';\n}\n\nfunction draw() {\n  background(220);\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "readonly": ""
        },
        "Rendering": {
            "name": "Rendering",
            "submodules": {
                "Material": 1
            },
            "elements": {},
            "classes": {
                "p5.RendererGL": 1,
                "p5.Element": 1,
                "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.": 1,
                "p5.Graphics": 1
            },
            "fors": {
                "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.": 1,
                "p5": 1
            },
            "namespaces": {},
            "module": "Lights, Camera",
            "file": "p5.js",
            "line": 52855,
            "is_constructor": 1,
            "extends": "p5.Element",
            "params": [
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "the renderer to use, either P2D or WEBGL",
                    "type": "Constant"
                },
                {
                    "name": "[pInst]          pointer to p5 instance\n/ _main.default.Graphics = function(w, h, renderer, pInst) {\n           var r = renderer || constants.P2D;\n\n           this.canvas = document.createElement('canvas');\n           var node = pInst._userNode || document.body;\n           node.appendChild(this.canvas);\n\n           _main.default.Element.call(this, this.canvas, pInst);\n\n           // bind methods and props of p5 to the new object\n           for (var p in _main.default.prototype) {\n             if (!this[p]) {\n               if (typeof _main.default.prototype[p] === 'function') {\n                 this[p] = _main.default.prototype[p].bind(this);\n               } else {\n                 this[p] = _main.default.prototype[p]",
                    "description": ";\n               }\n             }\n           }\n\n           _main.default.prototype._initializeInstanceVariables.apply(this);\n           this.width = w;\n           this.height = h;\n           this._pixelDensity = pInst._pixelDensity;\n\n           if (r === constants.WEBGL) {\n             this._renderer = new _main.default.RendererGL(this.canvas, this, false);\n           } else {\n             this._renderer = new _main.default.Renderer2D(this.canvas, this, false);\n           }\n           pInst._elements.push(this);\n\n           Object.defineProperty(this, 'deltaTime', {\n             get: function get() {\n               return this._pInst.deltaTime;\n             }\n           });\n\n           this._renderer.resize(w, h);\n           this._renderer._applyDefaults();\n           return this;\n         };\n\n         _main.default.Graphics.prototype = Object.create(_main.default.Element.prototype);\n\n         /**\nResets certain values such as those modified by functions in the Transform category\nand in the Lights category that are not automatically reset\nwith graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior\nof the standard canvas.",
                    "type": "P5"
                }
            ],
            "itemtype": "method",
            "example": [
                "\n\n<div><code>\nlet pg;\nfunction setup() {\n  createCanvas(100, 100);\n  background(0);\n  pg = createGraphics(50, 100);\n  pg.fill(0);\n  frameRate(5);\n}\n\nfunction draw() {\n  image(pg, width / 2, 0);\n  pg.background(255);\n  // p5.Graphics object behave a bit differently in some cases\n  // The normal canvas on the left resets the translate\n  // with every loop through draw()\n  // the graphics object on the right doesn't automatically reset\n  // so translate() is additive and it moves down the screen\n  rect(0, 0, width / 2, 5);\n  pg.rect(0, 0, width / 2, 5);\n  translate(0, 5, 0);\n  pg.translate(0, 5, 0);\n}\nfunction mouseClicked() {\n  // if you click you will see that\n  // reset() resets the translate back to the initial state\n  // of the Graphics object\n  pg.reset();\n}\n</code></div>"
            ],
            "alt": "A white line on a black background stays still on the top-left half.\nA black line animates from top to bottom on a white background on the right half.\nWhen clicked, the black line starts back over at the top."
        },
        "Shape": {
            "name": "Shape",
            "submodules": {
                "DOM": 1,
                "Time & Date": 1,
                "2D Primitives": 1,
                "Curves": 1,
                "3D Primitives": 1
            },
            "elements": {},
            "classes": {
                "p5.Renderer": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 53110
        },
        "2D Primitives": {
            "name": "2D Primitives",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Renderer": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "p5.js",
            "line": 53110,
            "description": "The p5.js API provides a lot of functionality for creating graphics, but there is\nsome native HTML5 Canvas functionality that is not exposed by p5. You can still call\nit directly using the variable `drawingContext`, as in the example shown. This is\nthe equivalent of calling `canvas.getContext('2d');` or `canvas.getContext('webgl');`.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions you can call.",
            "itemtype": "method",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  drawingContext.shadowOffsetX = 5;\n  drawingContext.shadowOffsetY = -5;\n  drawingContext.shadowBlur = 10;\n  drawingContext.shadowColor = 'black';\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>",
                "\n<div>\n<code>\narc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI + QUARTER_PI);\narc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n</code>\n</div>"
            ],
            "alt": "shattered outline of an ellipse with a quarter of a white circle bottom-right.\nwhite ellipse with top right quarter missing.\nwhite ellipse with black outline with top right missing.\nwhite ellipse with top right missing with black outline around shape.\nwhite ellipse with top right quarter missing with black outline around the shape.",
            "requires": [
                "core",
                "constants\n/ /**\nThis function does 3 things:\n\n  1. Bounds the desired start/stop angles for an arc (in radians) so that:\n\n         0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\n\n     This means that the arc rendering functions don't have to be concerned\n     with what happens if stop is smaller than start",
                "or if the arc 'goes\n     round more than once'",
                "etc.: they can just start at start and increase\n     until stop and the correct arc will be drawn.\n\n  2. Optionally adjusts the angles within each quadrant to counter the naive\n     scaling of the underlying ellipse up from the unit circle.  Without\n     this",
                "the angles become arbitrary when width != height: 45 degrees\n     might be drawn at 5 degrees on a 'wide' ellipse",
                "or at 85 degrees on\n     a 'tall' ellipse.\n\n  3. Flags up when start and stop correspond to the same place on the\n     underlying ellipse.  This is useful if you want to do something special\n     there (like rendering a whole ellipse instead).\n/ _main.default.prototype._normalizeArcAngles = function(\n           start",
                "stop",
                "width",
                "height",
                "correctForScaling\n         ) {\n           var epsilon = 0.00001; // Smallest visible angle on displays up to 4K.\n           var separation;\n\n           // The order of the steps is important here: each one builds upon the\n           // adjustments made in the steps that precede it.\n\n           // Constrain both start and stop to [0",
                "TWO_PI).\n           start = start - constants.TWO_PI * Math.floor(start / constants.TWO_PI);\n           stop = stop - constants.TWO_PI * Math.floor(stop / constants.TWO_PI);\n\n           // Get the angular separation between the requested start and stop points.\n           //\n           // Technically this separation only matches what gets drawn if\n           // correctForScaling is enabled.  We could add a more complicated calculation\n           // for when the scaling is uncorrected (in which case the drawn points could\n           // end up pushed together or pulled apart quite dramatically relative to what\n           // was requested)",
                "but it would make things more opaque for little practical\n           // benefit.\n           //\n           // (If you do disable correctForScaling and find that correspondToSamePoint\n           // is set too aggressively",
                "the easiest thing to do is probably to just make\n           // epsilon smaller...)\n           separation = Math.min(\n             Math.abs(start - stop)",
                "constants.TWO_PI - Math.abs(start - stop)\n           );\n\n           // Optionally adjust the angles to counter linear scaling.\n           if (correctForScaling) {\n             if (start <= constants.HALF_PI) {\n               start = Math.atan(width / height * Math.tan(start));\n             } else if (start > constants.HALF_PI && start <= 3 * constants.HALF_PI) {\n               start = Math.atan(width / height * Math.tan(start)) + constants.PI;\n             } else {\n               start = Math.atan(width / height * Math.tan(start)) + constants.TWO_PI;\n             }\n             if (stop <= constants.HALF_PI) {\n               stop = Math.atan(width / height * Math.tan(stop));\n             } else if (stop > constants.HALF_PI && stop <= 3 * constants.HALF_PI) {\n               stop = Math.atan(width / height * Math.tan(stop)) + constants.PI;\n             } else {\n               stop = Math.atan(width / height * Math.tan(stop)) + constants.TWO_PI;\n             }\n           }\n\n           // Ensure that start <= stop < start + TWO_PI.\n           if (start > stop) {\n             stop += constants.TWO_PI;\n           }\n\n           return {\n             start: start",
                "stop: stop",
                "correspondToSamePoint: separation < epsilon\n           };\n         };\n\n         /**\nDraw an arc to the screen. If called with only x",
                "y",
                "w",
                "h",
                "start and stop",
                "the arc will be drawn and filled as an open pie segment. If a mode parameter\nis provided",
                "the arc will be filled like an open semi-circle (OPEN)",
                "a closed\nsemi-circle (CHORD)",
                "or as a closed pie segment (PIE). The origin may be changed\nwith the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.\n\nThe arc is always drawn clockwise from wherever start falls to wherever stop\nfalls on the ellipse.Adding or subtracting TWO_PI to either angle does not\nchange where they fall. If both start and stop fall at the same place",
                "a full\nellipse will be drawn. Be aware that the y-axis increases in the downward\ndirection",
                "therefore angles are measured clockwise from the positive\nx-direction (\"3 o'clock\")."
            ],
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "angle to start the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "angle to stop the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN",
                    "type": "Constant",
                    "optional": true
                },
                {
                    "name": "detail",
                    "description": "optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1
        },
        "Attributes": {
            "name": "Attributes",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "p5.js",
            "line": 56436,
            "requires": [
                "core",
                "constants\n/ /**\nModifies the location from which ellipses are drawn by changing the way in\nwhich parameters given to <a href=\"#/p5/ellipse\">ellipse()</a>",
                "<a href=\"#/p5/circle\">circle()</a> and <a href=\"#/p5/arc\">arc()</a> are interpreted.\n\nThe default mode is CENTER",
                "in which the first two parameters are interpreted\nas the shape's center point's x and y coordinates respectively",
                "while the third\nand fourth parameters are its width and height.\n\nellipseMode(RADIUS) also uses the first two parameters as the shape's center\npoint's x and y coordinates",
                "but uses the third and fourth parameters to\nspecify half of the shapes's width and height.\n\nellipseMode(CORNER) interprets the first two parameters as the upper-left\ncorner of the shape",
                "while the third and fourth parameters are its width\nand height.\n\nellipseMode(CORNERS) interprets the first two parameters as the location of\none corner of the ellipse's bounding box",
                "and the third and fourth parameters\nas the location of the opposite corner.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "mode",
                    "description": "either CENTER, RADIUS, CORNER, or CORNERS",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Example showing RADIUS and CENTER ellipsemode with 2 overlaying ellipses\nellipseMode(RADIUS);\nfill(255);\nellipse(50, 50, 30, 30); // Outer white ellipse\nellipseMode(CENTER);\nfill(100);\nellipse(50, 50, 30, 30); // Inner gray ellipse\n</code>\n</div>\n\n<div>\n<code>\n// Example showing CORNER and CORNERS ellipseMode with 2 overlaying ellipses\nellipseMode(CORNER);\nfill(255);\nellipse(25, 25, 50, 50); // Outer white ellipse\nellipseMode(CORNERS);\nfill(100);\nellipse(25, 25, 50, 50); // Inner gray ellipse\n</code>\n</div>",
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "alt": "2 pixelated 36x36 white ellipses to left & right of center, black background",
            "return": {
                "description": "/ _main.default.prototype.textAlign = function(horizAlign, vertAlign) {\n           var _this$_renderer;\n           _main.default._validateParameters('textAlign', arguments);\n           return (_this$_renderer = this._renderer).textAlign.apply(\n             _this$_renderer,\n             arguments\n           );\n         };\n         /**\nSets/gets the spacing, in pixels, between lines of text. This setting will be\nused in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function.",
                "type": "Object"
            }
        },
        "Curves": {
            "name": "Curves",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "p5.js",
            "line": 56806,
            "requires": [
                "core\n/ /**\nDraws a cubic Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The first two parameters specify\nthe first anchor point and the last two parameters specify the other\nanchor point",
                "which become the first and last points on the curve. The\nmiddle parameters specify the two control points which define the shape\nof the curve. Approximately speaking",
                "control points \"pull\" the curve\ntowards them.\n\nBezier curves were developed by French automotive engineer Pierre Bezier",
                "and are commonly used in computer graphics to define gently sloping curves.\nSee also <a href=\"#/p5/curve\">curve()</a>."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "detail",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\nline(85, 20, 10, 10);\nline(90, 90, 15, 80);\nstroke(0, 0, 0);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\n</code>\n</div>\n\n<div>\n<code>\nbackground(0, 0, 0);\nnoFill();\nstroke(255);\nbezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);\n</code>\n</div>",
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noFill();\n  bezierDetail(5);\n}\n\nfunction draw() {\n  background(200);\n  // prettier-ignore\n  bezier(-40, -40, 0,\n          90, -40, 0,\n         -90,  40, 0,\n          40,  40, 0);\n}\n</code>\n</div>"
            ],
            "alt": "stretched black s-shape with a low level of bezier detail"
        },
        "Vertex": {
            "name": "Vertex",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Structure",
            "namespace": "",
            "file": "p5.js",
            "line": 57427,
            "requires": [
                "core",
                "constants\n/ var shapeKind = null;\n         var vertices = [];\n         var contourVertices = [];\n         var isBezier = false;\n         var isCurve = false;\n         var isQuadratic = false;\n         var isContour = false;\n         var isFirstContour = true;\n\n         /**\nUse the <a href=\"#/p5/beginContour\">beginContour()</a> and\n<a href=\"#/p5/endContour\">endContour()</a> functions to create negative shapes\nwithin shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite direction\nfrom the exterior shape. First draw vertices for the exterior clockwise order",
                "then for internal shapes",
                "draw vertices\nshape in counter-clockwise.\n\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\ntransformations such as <a href=\"#/p5/translate\">translate()</a>",
                "<a href=\"#/p5/rotate\">rotate()</a>",
                "and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\nother shapes",
                "such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within."
            ],
            "itemtype": "method",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white rect and smaller grey rect with red outlines in center of canvas."
        },
        "Structure": {
            "name": "Structure",
            "submodules": {
                "Vertex": 1
            },
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Data",
            "file": "p5.js",
            "line": 58558,
            "requires": [
                "core\n/ /**\nStops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>.\nIf <a href=\"#/p5/loop\">loop()</a> is called",
                "the code in <a href=\"#/p5/draw\">draw()</a>\nbegins to run continuously again. If using <a href=\"#/p5/noLoop\">noLoop()</a>\nin <a href=\"#/p5/setup\">setup()</a>",
                "it should be the last line inside the block.\n\nWhen <a href=\"#/p5/noLoop\">noLoop()</a> is used",
                "it's not possible to manipulate\nor access the screen inside event handling functions such as\n<a href=\"#/p5/mousePressed\">mousePressed()</a> or\n<a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead",
                "use those functions to\ncall <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>",
                "which will run <a href=\"#/p5/draw\">draw()</a>",
                "which can update the screen\nproperly. This means that when <a href=\"#/p5/noLoop\">noLoop()</a> has been\ncalled",
                "no drawing can happen",
                "and functions like <a href=\"#/p5/saveFrames\">saveFrames()</a>\nor <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.\n\nNote that if the sketch is resized",
                "<a href=\"#/p5/redraw\">redraw()</a> will\nbe called to update the sketch",
                "even after <a href=\"#/p5/noLoop\">noLoop()</a>\nhas been specified. Otherwise",
                "the sketch would enter an odd state until\n<a href=\"#/p5/loop\">loop()</a> was called.\n\nUse <a href=\"#/p5/isLooping\">isLooping()</a> to check current state of loop()."
            ],
            "itemtype": "method",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  noLoop();\n}\n                                                                                                                                                       \nfunction draw() {\n  line(10, 10, 90, 90);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  noLoop();\n}\n\nfunction mouseReleased() {\n  loop();\n}\n</code>\n</div>",
                "\n<div>\n<code>\nlet x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n  noLoop();\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  loop();\n}\n\nfunction mouseReleased() {\n  noLoop();\n}\n</code>\n</div>"
            ],
            "alt": "horizontal line moves slowly from left. Loops but stops on mouse press."
        },
        "Data": {
            "name": "Data",
            "submodules": {
                "Loading & Displaying": 1,
                "Array Functions": 1
            },
            "elements": {},
            "classes": {
                "p5.Font": 1,
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1,
                "p5.MediaElement": 1
            },
            "fors": {
                "p5.TypedDict": 1,
                "p5": 1,
                "p5.Element": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 81020
        },
        "Dictionary": {
            "name": "Dictionary",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1,
                "p5.MediaElement": 1
            },
            "fors": {
                "p5.TypedDict": 1,
                "p5": 1,
                "p5.Element": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "p5.js",
            "line": 63267,
            "requires": [
                "core\n\nThis module defines the p5 methods for the p5 Dictionary classes.\nThe classes StringDict and NumberDict are for storing and working\nwith key-value pairs.\n/ /**\n\nCreates a new instance of p5.StringDict using the key-value pair\nor the object you provide."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "object",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.NumberDict"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  print(myDictionary.hasKey('p5')); // logs true to console\n\n  let anotherDictionary = createStringDict({ happy: 'coding' });\n  print(anotherDictionary.hasKey('happy')); // logs true to console\n}\n</code></div>\n/ /**",
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(100, 42);\n  print(myDictionary.hasKey(100)); // logs true to console\n\n  let anotherDictionary = createNumberDict({ 200: 84 });\n  print(anotherDictionary.hasKey(200)); // logs true to console\n}\n</code></div>"
            ],
            "description": "Base class for all p5.Dictionary types. Specifically\n typed Dictionary classes inherit from this class."
        },
        "Events": {
            "name": "Events",
            "submodules": {
                "Dictionary": 1,
                "Acceleration": 1,
                "Keyboard": 1,
                "Mouse": 1
            },
            "elements": {},
            "classes": {
                "p5.File": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 64438
        },
        "Acceleration": {
            "name": "Acceleration",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.File": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "p5.js",
            "line": 64438,
            "requires": [
                "core\n/ /**\nThe system variable deviceOrientation always contains the orientation of\nthe device. The value of this variable will either be set 'landscape'\nor 'portrait'. If no data is available it will be set to 'undefined'.\neither LANDSCAPE or PORTRAIT."
            ],
            "itemtype": "property",
            "type": "Constant",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move a touchscreen device to register\n// acceleration changes.\nfunction draw() {\n  background(220, 50);\n  fill('magenta');\n  ellipse(width / 2, height / 2, accelerationX);\n}\n</code>\n</div>"
            ],
            "alt": "Magnitude of device acceleration is displayed as ellipse size",
            "description": "Base class for a file.\nUsed for Element.drop and createFileInput."
        },
        "Keyboard": {
            "name": "Keyboard",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "p5.js",
            "line": 65364,
            "requires": [
                "core\n/ /**\nThe boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed\nand false if no keys are pressed."
            ],
            "itemtype": "property",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  if (keyIsPressed === true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>",
                "\n<div><code>\n// Click any key to display it!\n// (Not Guaranteed to be Case Sensitive)\nfunction setup() {\n  fill(245, 123, 158);\n  textSize(50);\n}\n\nfunction draw() {\n  background(200);\n  text(key, 33, 65); // Display last key pressed.\n}\n</code></div>"
            ],
            "alt": "canvas displays any key value that is pressed in pink font."
        },
        "Mouse": {
            "name": "Mouse",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "p5.js",
            "line": 65828,
            "requires": [
                "core",
                "constants\n/ /**\n\nThe variable movedX contains the horizontal movement of the mouse since the last frame"
            ],
            "itemtype": "property",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"notest\">\n<code>\nlet x = 50;\nfunction setup() {\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  if (x > 48) {\n    x -= 2;\n  } else if (x < 48) {\n    x += 2;\n  }\n  x += floor(movedX / 5);\n  background(237, 34, 93);\n  fill(0);\n  rect(x, 50, 50, 50);\n}\n</code>\n</div>",
                "\n<div class=\"notest\">\n<code>\nlet y = 50;\nfunction setup() {\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  if (y > 48) {\n    y -= 2;\n  } else if (y < 48) {\n    y += 2;\n  }\n  y += floor(movedY / 5);\n  background(237, 34, 93);\n  fill(0);\n  rect(y, 50, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "box moves up and down according to mouse movement then slowly back towards the center\n/ _main.default.prototype.movedY = 0;\n         /*\nThis is a flag which is false until the first time\nwe receive a mouse event. The pmouseX and pmouseY\nvalues will match the mouseX and mouseY values until\nthis interaction takes place."
        },
        "Touch": {
            "name": "Touch",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Image",
            "namespace": "",
            "file": "p5.js",
            "line": 66888,
            "requires": [
                "core\n/ /**\nThe system variable touches[] contains an array of the positions of all\ncurrent touch points",
                "relative to (0",
                "0) of the canvas",
                "and IDs identifying a\nunique touch as it moves. Each element in the array is an object with x",
                "y",
                "and id properties.\n\nThe touches[] array is not supported on Safari and IE on touch-based\ndesktops (laptops)."
            ],
            "itemtype": "method",
            "type": "Object[]",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// On a touchscreen device, touch\n// the canvas using one or more fingers\n// at the same time\nfunction draw() {\n  clear();\n  let display = touches.length + ' touches';\n  text(display, 5, 10);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// Touch within the image to change\n// the value of the rectangle\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchStarted() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchStarted() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchStarted(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns white with touch event.\nno image displayed",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Image": {
            "name": "Image",
            "submodules": {
                "Touch": 1,
                "Pixels": 1
            },
            "elements": {},
            "classes": {
                "p5.Image": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "IO",
            "file": "p5.js",
            "line": 69164,
            "requires": [
                "core",
                "constants",
                "filters\n/ /**\nThis module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\ndrawing images to the main display canvas.\n/ /*\nClass methods\n/ /**\nCreates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\nimage.\n\np5 can display .gif",
                ".jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used",
                "it must be loaded with the\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\nheight of the image",
                "as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\nvalues for every pixel in the image.\n\nThe methods described below allow easy access to the image's pixels and\nalpha channel and simplify the process of compositing.\n\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array",
                "be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\nthe image to make sure that the pixel data is properly loaded."
            ],
            "example": [
                "\n<div><code>\nfunction setup() {\n  let img = createImage(100, 100); // same as new p5.Image(100, 100);\n  img.loadPixels();\n  createCanvas(100, 100);\n  background(0);\n\n  // helper for writing color to array\n  function writeColor(image, x, y, red, green, blue, alpha) {\n    let index = (x + y * width) * 4;\n    image.pixels[index] = red;\n    image.pixels[index + 1] = green;\n    image.pixels[index + 2] = blue;\n    image.pixels[index + 3] = alpha;\n  }\n\n  let x, y;\n  // fill with random colors\n  for (y = 0; y < img.height; y++) {\n    for (x = 0; x < img.width; x++) {\n      let red = random(255);\n      let green = random(255);\n      let blue = random(255);\n      let alpha = 255;\n      writeColor(img, x, y, red, green, blue, alpha);\n    }\n  }\n\n  // draw a red line\n  y = 0;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 255, 0, 0, 255);\n  }\n\n  // draw a green line\n  y = img.height - 1;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 0, 255, 0, 255);\n  }\n\n  img.updatePixels();\n  image(img, 0, 0);\n}\n</code></div>",
                "\n<div><code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (let i = 0; i < img.width; i++) {\n    let c = img.get(i, img.height / 2);\n    stroke(c);\n    line(i, height / 2, i, height);\n  }\n}\n</code></div>",
                "\n<div><code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (let i = 0; i < img.height; i++) {\n    let c = img.get(img.width / 2, i);\n    stroke(c);\n    line(0, i, width / 2, i);\n  }\n}\n</code></div>",
                "\n<div>\n<code>\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n  for (let j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n<div>\n<code>\nlet pink = color(255, 102, 204);\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < 4 * (width * height / 2); i += 4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i + 1] = green(pink);\n  img.pixels[i + 2] = blue(pink);\n  img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height\n/",
                    "description": "_main.default.Image = function(width, height) {\n           /**\nImage width.",
                    "type": "Number"
                }
            ],
            "itemtype": "property",
            "type": "Number",
            "readonly": "",
            "alt": "66x66 turquoise rect in center of canvas\n66x66 pink rect in center of canvas"
        },
        "Loading & Displaying": {
            "name": "Loading & Displaying",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "p5.js",
            "line": 68467,
            "requires": [
                "core\n/ /**\nLoads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.\n\nThe image may not be immediately available for rendering.\nIf you want to ensure that the image is ready before doing\nanything with it",
                "place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>.\nYou may also supply a callback function to handle the image when it's ready.\n\nThe path to the image should be relative to the HTML file\nthat links in your sketch. Loading an image from a URL or other\nremote location may be blocked due to your browser's built-in\nsecurity.\nnYou can also pass in a string of a base64 encoded image as an alternative to the file path.\nRemember to add \"data:image/png;base64",
                "\" in front of the string."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "path",
                    "description": "Path of the image to be loaded",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href=\"#/p5.Image\">p5.Image</a>.",
                    "type": "function(p5.Image)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "called with event error if\n                               the image fails to load.",
                    "type": "Function(Event)",
                    "optional": true
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Image\">p5.Image</a> object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage('assets/laDefense.jpg', img => {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"
            ],
            "alt": "image of the underside of a white umbrella and grided ceililng above\nimage of the underside of a white umbrella and grided ceililng above\n/ _main.default.prototype.loadImage = function(\n           path,\n           successCallback,\n           failureCallback\n         ) {\n           _main.default._validateParameters('loadImage', arguments);\n           var pImg = new _main.default.Image(1, 1, this);\n           var self = this;\n\n           var req = new Request(path, {\n             method: 'GET',\n             mode: 'cors'\n           });\n\n           fetch(path, req).then(function(response) {\n             // GIF section\n             var contentType = response.headers.get('content-type');\n             if (contentType === null) {\n               console.warn(\n                 'The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset.'\n               );\n             }\n             if (contentType && contentType.includes('image/gif')) {\n               response.arrayBuffer().then(\n                 function(arrayBuffer) {\n                   if (arrayBuffer) {\n                     var byteArray = new Uint8Array(arrayBuffer);\n                     _createGif(\n                       byteArray,\n                       pImg,\n                       successCallback,\n                       failureCallback,\n                       function(pImg) {\n                         self._decrementPreload();\n                       }.bind(self)\n                     );\n                   }\n                 },\n                 function(e) {\n                   if (typeof failureCallback === 'function') {\n                     failureCallback(e);\n                   } else {\n                     console.error(e);\n                   }\n                 }\n               );\n             } else {\n               // Non-GIF Section\n               var img = new Image();\n\n               img.onload = function() {\n                 pImg.width = pImg.canvas.width = img.width;\n                 pImg.height = pImg.canvas.height = img.height;\n\n                 // Draw the image into the backing canvas of the p5.Image\n                 pImg.drawingContext.drawImage(img, 0, 0);\n                 pImg.modified = true;\n                 if (typeof successCallback === 'function') {\n                   successCallback(pImg);\n                 }\n                 self._decrementPreload();\n               };\n\n               img.onerror = function(e) {\n                 _main.default._friendlyFileLoadError(0, img.src);\n                 if (typeof failureCallback === 'function') {\n                   failureCallback(e);\n                 } else {\n                   console.error(e);\n                 }\n               };\n\n               // Set crossOrigin in case image is served with CORS headers.\n               // This will let us draw to the canvas without tainting it.\n               // See https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image\n               // When using data-uris the file will be loaded locally\n               // so we don't need to worry about crossOrigin with base64 file types.\n               if (path.indexOf('data:image/') !== 0) {\n                 img.crossOrigin = 'Anonymous';\n               }\n               // start loading the image\n               img.src = path;\n             }\n             pImg.modified = true;\n           });\n           return pImg;\n         };\n\n         /**\nHelper function for loading GIF-based images",
            "chainable": 1
        },
        "Pixels": {
            "name": "Pixels",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Image": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Image",
            "namespace": "",
            "file": "p5.js",
            "line": 69164,
            "requires": [
                "core\n/ /**\n<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n/Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>\ncontaining the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4",
                "representing the R",
                "G",
                "B",
                "A values in order for each pixel",
                "moving from\nleft to right across each row",
                "then down each column. Retina and other\nhigh density displays will have more pixels[] (by a factor of\npixelDensity^2).\nFor example",
                "if the image is 100x100 pixels",
                "there will be 40",
                "000. On a\nretina display",
                "there will be 160",
                "000.\n\nThe first four values (indices 0-3) in the array will be the R",
                "G",
                "B",
                "A\nvalues of the pixel at (0",
                "0). The second four values (indices 4-7) will\ncontain the R",
                "G",
                "B",
                "A values of the pixel at (1",
                "0). More generally",
                "to\nset values for a pixel at (x",
                "y):\n```javascript\nlet d = pixelDensity();\nfor (let i = 0; i < d; i++) {\n  for (let j = 0; j < d; j++) {\n    // loop over\n    index = 4 * ((y * d + j) * width * d + (x * d + i));\n    pixels[index] = r;\n    pixels[index+1] = g;\n    pixels[index+2] = b;\n    pixels[index+3] = a;\n  }\n}\n```\nWhile the above method is complex",
                "it is flexible enough to work with\nany pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of\nsetting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x",
                "y) at\nany pixelDensity",
                "but the performance may not be as fast when lots of\nmodifications are made to the pixel array.\n\nBefore accessing this array",
                "the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a>\nfunction. After the array data has been modified",
                "the <a href=\"#/p5/updatePixels\">updatePixels()</a>\nfunction must be run to update the changes.\n\nNote that this is not a standard javascript array.  This means that\nstandard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or\n<a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not\nwork."
            ],
            "itemtype": "method",
            "type": "Number[]",
            "example": [
                "\n<div>\n<code>\nlet pink = color(255, 102, 204);\nloadPixels();\nlet d = pixelDensity();\nlet halfImage = 4 * (width * d) * (height / 2 * d);\nfor (let i = 0; i < halfImage; i += 4) {\n  pixels[i] = red(pink);\n  pixels[i + 1] = green(pink);\n  pixels[i + 2] = blue(pink);\n  pixels[i + 3] = alpha(pink);\n}\nupdatePixels();\n</code>\n</div>",
                "\n<div><code>\nlet img0;\nlet img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n}\n</code></div>\n<div><code>\nlet img0;\nlet img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n}\n</code></div>\n<div><code>\nlet img0;\nlet img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.",
                    "type": "Constant"
                }
            ]
        },
        "IO": {
            "name": "IO",
            "submodules": {
                "Conversion": 1,
                "Output": 1
            },
            "elements": {},
            "classes": {
                "p5.PrintWriter": 1,
                "p5.TableRow": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 74479
        },
        "Output": {
            "name": "Output",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.PrintWriter": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "p5.js",
            "line": 72370
        },
        "Table": {
            "name": "Table",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "p5.js",
            "line": 74479,
            "requires": [
                "core\n/ /**\n A TableRow object represents a single row of data values",
                "stored in columns",
                "from a table.\n\n A Table Row contains both an ordered array",
                "and an unordered\n JSON object."
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "str",
                    "description": "optional: populate the row with a\n                             string of values, separated by the\n                             separator",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "[separator] comma separated values (csv) by default\n/ _main.default.TableRow = function(str, separator) {\n           var arr = [];\n           var obj = {};\n           if (str) {\n             separator = separator || ',';\n             arr = str.split(separator);\n           }\n           for (var i = 0; i < arr.length; i++) {\n             var key = i;\n             var val = arr[i];\n             obj[key]",
                    "description": "= val;\n           }\n           this.arr = arr;\n           this.obj = obj;\n           this.table = null;\n         };\n\n         /**\n Stores a value in the TableRow's specified column.\n The column may be specified by either its ID or title.",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                               or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored",
                    "type": "String|Number"
                }
            ],
            "itemtype": "method",
            "example": [
                "\n<div class=\"norender\"><code>\n// Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  let rows = table.getRows();\n  for (let r = 0; r < rows.length; r++) {\n    rows[r].set('name', 'Unicorn');\n  }\n\n  //print the results\n  print(table.getArray());\n}\n</code></div>"
            ],
            "alt": "no image displayed"
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.TableRow": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "p5.js",
            "line": 74479,
            "requires": [
                "core\n/ /**\nXML is a representation of an XML object",
                "able to parse XML code. Use\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
            ],
            "is_constructor": 1,
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let children = xml.getChildren('animal');\n\n  for (let i = 0; i < children.length; i++) {\n    let id = children[i].getNum('id');\n    let coloring = children[i].getString('species');\n    let name = children[i].getContent();\n    print(id + ', ' + coloring + ', ' + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n</code></div>",
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let children = xml.getChildren('animal');\n  let parent = children[1].getParent();\n  print(parent.getName());\n}\n\n// Sketch prints:\n// mammals\n</code></div>"
            ],
            "alt": "no image displayed\n/ _main.default.XML = function(DOM) {\n           if (!DOM) {\n             var xmlDoc = document.implementation.createDocument(null, 'doc');\n             this.DOM = xmlDoc.createElement('root');\n           } else {\n             this.DOM = DOM;\n           }\n         };\n\n         /**\nGets a copy of the element's parent. Returns the parent as another\n<a href=\"#/p5.XML\">p5.XML</a> object.",
            "itemtype": "method",
            "return": {
                "description": "element parent",
                "type": "p5.XML"
            }
        },
        "Math": {
            "name": "Math",
            "submodules": {
                "Table": 1,
                "Input": 1,
                "Calculation": 1,
                "Noise": 1,
                "Trigonometry": 1
            },
            "elements": {},
            "classes": {
                "p5.XML": 1,
                "p5.Vector": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 77159
        },
        "Calculation": {
            "name": "Calculation",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.XML": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "p5.js",
            "line": 74835,
            "requires": [
                "core\n/ /**\nCalculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "n",
                    "description": "number to compute",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "number to round up",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded up number",
                "type": "Integer"
            },
            "example": [
                "\n<div class = \"norender\"><code>\nfunction setup() {\n  let x = -3;\n  let y = abs(x);\n\n  print(x); // -3\n  print(y); // 3\n}\n</code></div>",
                "\n<div><code>\nfunction draw() {\n  background(200);\n  // map, mouseX between 0 and 5.\n  let ax = map(mouseX, 0, 100, 0, 5);\n  let ay = 66;\n\n  //Get the ceiling of the mapped number.\n  let bx = ceil(map(mouseX, 0, 100, 0, 5));\n  let by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals"
        },
        "Vector": {
            "name": "Vector",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "p5.js",
            "line": 76733,
            "requires": [
                "core\n/ /**\nCreates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three dimensional vector",
                "specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
                "core\n/ var PERLIN_YWRAPB = 4;\n         var PERLIN_YWRAP = 1 << PERLIN_YWRAPB;\n         var PERLIN_ZWRAPB = 8;\n         var PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;\n         var PERLIN_SIZE = 4095;\n         var perlin_octaves = 4; // default to medium smooth\n         var perlin_amp_falloff = 0.5; // 50% reduction/octave\n         var scaled_cosine = function scaled_cosine(i) {\n           return 0.5 * (1.0 - Math.cos(i * Math.PI));\n         };\n         var perlin; // will be initialized lazily by noise() or noiseSeed()\n         /**\nReturns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more naturally ordered",
                "harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures",
                "natural motion",
                "shapes",
                "terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program; see\nthe <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D",
                "2D and 3D noise",
                "depending on the number of coordinates given. The resulting value will\nalways be between 0.0 and 1.0. The noise value can be animated by moving\nthrough the noise space as demonstrated in the example above. The 2nd\nand 3rd dimension can also be interpreted as time.<br /><br />The actual\nnoise is structured similar to an audio signal",
                "in respect to the\nfunction's use of frequencies. Similar to the concept of harmonics in\nphysics",
                "perlin noise is computed over several octaves which are added\ntogether for the final result. <br /><br />Another way to adjust the\ncharacter of the resulting sequence is the scale of the input\ncoordinates. As the function works within an infinite space the value of\nthe coordinates doesn't matter as such",
                "only the distance between\nsuccessive coordinates does (eg. when using <b>noise()</b> within a\nloop). As a general rule the smaller the difference between coordinates",
                "the smoother the resulting noise sequence will be. Steps of 0.005-0.03\nwork best for most applications",
                "but this will differ depending on use."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "x-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "lod",
                    "description": "number of octaves to be used by the noise",
                    "type": "Number"
                },
                {
                    "name": "falloff",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet v1;\nfunction setup() {\n  createCanvas(100, 100);\n  stroke(255, 0, 255);\n  v1 = createVector(width / 2, height / 2);\n}\n\nfunction draw() {\n  background(255);\n  line(v1.x, v1.y, mouseX, mouseY);\n}\n</code></div>",
                "\n<div>\n<code>\nlet xoff = 0.0;\n\nfunction draw() {\n  background(204);\n  xoff = xoff + 0.01;\n  let n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>\n<div>\n<code>let noiseScale=0.02;\n\nfunction draw() {\n  background(0);\n  for (let x=0; x < width; x++) {\n    let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n    stroke(noiseVal*255);\n    line(x, mouseY+noiseVal*80, x, height);\n  }\n}\n</code>\n</div>",
                "\n<div>\n<code>\nlet noiseVal;\nlet noiseScale = 0.02;\n\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(0);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width / 2; x++) {\n      noiseDetail(2, 0.2);\n      noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n      stroke(noiseVal * 255);\n      point(x, y);\n      noiseDetail(8, 0.65);\n      noiseVal = noise(\n        (mouseX + x + width / 2) * noiseScale,\n        (mouseY + y) * noiseScale\n      );\n      stroke(noiseVal * 255);\n      point(x + width / 2, y);\n    }\n  }\n}\n</code>\n</div>"
            ],
            "alt": "2 vertical grey smokey patterns affected my mouse x-position and noise.",
            "is_constructor": 1,
            "type": "Number"
        },
        "Noise": {
            "name": "Noise",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": ""
        },
        "Trigonometry": {
            "name": "Trigonometry",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Vector": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "p5.js",
            "line": 77159,
            "requires": [
                "core",
                "constants\n/ /*\nall DEGREES/RADIANS conversion should be done in the p5 instance\nif possible",
                "using the p5._toRadians()",
                "p5._fromRadians() methods.\n/ _main.default.prototype._angleMode =\n           constants.RADIANS;\n         /**\nThe inverse of <a href=\"#/p5/cos\">cos()</a>",
                "returns the arc cosine of a value.\nThis function expects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927) if the angleMode is RADIANS or 0 to 180 if the\nangle mode is DEGREES."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc sine of the given value",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nlet a = PI;\nlet c = cos(a);\nlet ac = acos(c);\n// Prints: \"3.1415927 : -1.0 : 3.1415927\"\nprint(a + ' : ' + c + ' : ' + ac);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nlet a = PI + PI / 4.0;\nlet c = cos(a);\nlet ac = acos(c);\n// Prints: \"3.926991 : -0.70710665 : 2.3561943\"\nprint(a + ' : ' + c + ' : ' + ac);\n</code>\n</div>\n/ _main.default.prototype.acos = function(ratio) {\n           return this._fromRadians(Math.acos(ratio));\n         };\n\n         /**\nThe inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value.\nThis function expects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle\nmode is DEGREES.",
                "\n<div class= “norender\">\n<code>\nlet a = PI / 3.0;\nlet s = sin(a);\nlet as = asin(s);\n// Prints: \"1.0471975 : 0.86602540 : 1.0471975\"\nprint(a + ' : ' + s + ' : ' + as);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nlet a = PI + PI / 3.0;\nlet s = sin(a);\nlet as = asin(s);\n// Prints: \"4.1887902 : -0.86602540 : -1.0471975\"\nprint(a + ' : ' + s + ' : ' + as);\n</code>\n</div>"
            ]
        },
        "Typography": {
            "name": "Typography",
            "submodules": {
                "Attributes": 1,
                "Vector": 1
            },
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "Array Functions": {
            "name": "Array Functions",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Font": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "p5.js",
            "line": 81020,
            "requires": [
                "core\n/ /**\nAdds a value to the end of an array. Extends the length of\nthe array by one. Maps to Array.push()."
            ],
            "itemtype": "method",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to append",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "to be added to the Array",
                    "type": "Any"
                },
                {
                    "name": "src",
                    "description": "the source Array",
                    "type": "Array"
                },
                {
                    "name": "srcPosition",
                    "description": "starting position in the source Array",
                    "type": "Integer"
                },
                {
                    "name": "dst",
                    "description": "the destination Array",
                    "type": "Array"
                },
                {
                    "name": "dstPosition",
                    "description": "starting position in the destination Array",
                    "type": "Integer"
                },
                {
                    "name": "length",
                    "description": "number of Array elements to be copied",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the array that was appended to",
                "type": "Array"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  let myArray = ['Mango', 'Apple', 'Papaya'];\n  print(myArray); // ['Mango', 'Apple', 'Papaya']\n\n  append(myArray, 'Peach');\n  print(myArray); // ['Mango', 'Apple', 'Papaya', 'Peach']\n}\n</code></div>\n/ _main.default.prototype.append = function(array, value) {\n           array.push(value);\n           return array;\n         };\n\n         /**\nCopies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.\n\nThe simplified version with only two arguments, arrayCopy(src, dst),\ncopies an entire array to another of the same size. It is equivalent to\narrayCopy(src, 0, dst, 0, src.length).\n\nUsing this function is far more efficient for copying array data than\niterating through a for() loop and copying each element individually.",
                "\n<div class='norender'><code>\nlet src = ['A', 'B', 'C'];\nlet dst = [1, 2, 3];\nlet srcPosition = 1;\nlet dstPosition = 0;\nlet length = 2;\n\nprint(src); // ['A', 'B', 'C']\nprint(dst); // [ 1 ,  2 ,  3 ]\n\narrayCopy(src, srcPosition, dst, dstPosition, length);\nprint(dst); // ['B', 'C', 3]\n</code></div>"
            ],
            "description": "Base class for font handling"
        },
        "Conversion": {
            "name": "Conversion",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "p5.js",
            "line": 82680,
            "requires": [
                "core\n/ /**\nConverts a string to its floating point representation. The contents of a\nstring must resemble a number",
                "or NaN (not a number) will be returned.\nFor example",
                "float(\"1234.56\") evaluates to 1234.56",
                "but float(\"giraffe\")\nwill return NaN.\n\nWhen an array of values is passed in",
                "then an array of floats of the same\nlength is returned."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "str",
                    "description": "float string to parse",
                    "type": "String"
                },
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number"
                },
                {
                    "name": "radix",
                    "description": "the radix to convert to (default: 10)",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet str = '20';\nlet diameter = float(str);\nellipse(width / 2, height / 2, diameter, diameter);\n</code></div>\n<div class='norender'><code>\nprint(float('10.31')); // 10.31\nprint(float('Infinity')); // Infinity\nprint(float('-Infinity')); // -Infinity\n</code></div>",
                "\n<div class='norender'><code>\nprint(int('10')); // 10\nprint(int(10.31)); // 10\nprint(int(-10)); // -10\nprint(int(true)); // 1\nprint(int(false)); // 0\nprint(int([false, true, '10.3', 9.8])); // [0, 1, 10, 9]\nprint(int(Infinity)); // Infinity\nprint(int('-Infinity')); // -Infinity\n</code></div>"
            ],
            "alt": "20 by 20 white ellipse in the center of the canvas\n/ _main.default.prototype.float = function(str) {\n           if (str instanceof Array) {\n             return str.map(parseFloat);\n           }\n           return parseFloat(str);\n         };\n\n         /**\nConverts a boolean, string, or float to its integer representation.\nWhen an array of values is passed in, then an int array of the same length\nis returned."
        },
        "Time & Date": {
            "name": "Time & Date",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "p5.js",
            "line": 83621,
            "requires": [
                "core\n/ /**\np5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function\nreturns the current day as a value from 1 - 31."
            ],
            "itemtype": "method",
            "return": {
                "description": "the current hour",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nlet d = day();\ntext('Current day: \\n' + d, 5, 50);\n</code>\n</div>",
                "\n<div>\n<code>\nlet h = hour();\ntext('Current hour:\\n' + h, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current hour is displayed"
        },
        "3D Primitives": {
            "name": "3D Primitives",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "p5.js",
            "line": 83852,
            "requires": [
                "core",
                "p5.Geometry\n/ /**\nDraw a plane with given a width and height"
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "width",
                    "description": "width of the plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "Optional number of triangle\n                            subdivisions in x-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "Optional number of triangle\n                            subdivisions in y-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "width of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "Height",
                    "description": "height of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "depth",
                    "description": "depth of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "Optional number of triangle\n                           subdivisions in x-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "Optional number of triangle\n                           subdivisions in y-dimension",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a plane\n// with width 50 and height 50\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  plane(50, 50);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// draw a spinning box\n// with width, height and depth of 50\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(50);\n}\n</code>\n</div>"
            ],
            "alt": "Nothing displayed on canvas\nRotating interior view of a box with sides that change color.\n3d red and green gradient.\nRotating interior view of a cylinder with sides that change color.\nRotating view of a cylinder with sides that change color.\n3d red and green gradient.\nrotating view of a multi-colored cylinder with concave sides.\n/ _main.default.prototype.plane = function(width, height, detailX, detailY) {\n           this._assert3d('plane');\n           _main.default._validateParameters('plane', arguments);\n           if (typeof width === 'undefined') {\n             width = 50;\n           }\n           if (typeof height === 'undefined') {\n             height = width;\n           }\n\n           if (typeof detailX === 'undefined') {\n             detailX = 1;\n           }\n           if (typeof detailY === 'undefined') {\n             detailY = 1;\n           }\n\n           var gId = 'plane|'.concat(detailX, '|').concat(detailY);\n\n           if (!this._renderer.geometryInHash(gId)) {\n             var _plane = function _plane() {\n               var u, v, p;\n               for (var i = 0; i <= this.detailY; i++) {\n                 v = i / this.detailY;\n                 for (var j = 0; j <= this.detailX; j++) {\n                   u = j / this.detailX;\n                   p = new _main.default.Vector(u - 0.5, v - 0.5, 0);\n                   this.vertices.push(p);\n                   this.uvs.push(u, v);\n                 }\n               }\n             };\n             var planeGeom = new _main.default.Geometry(detailX, detailY, _plane);\n             planeGeom.computeFaces().computeNormals();\n             if (detailX <= 1 && detailY <= 1) {\n               planeGeom._makeTriangleEdges()._edgesToVertices();\n             } else if (this._renderer._doStroke) {\n               console.log(\n                 'Cannot draw stroke on plane objects with more' +\n                   ' than 1 detailX or 1 detailY'\n               );\n             }\n             this._renderer.createBuffers(gId, planeGeom);\n           }\n\n           this._renderer.drawBuffersScaled(gId, width, height, 1);\n           return this;\n         };\n\n         /**\nDraw a box with given width, height and depth"
        },
        "3D Models": {
            "name": "3D Models",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "p5.js",
            "line": 87403,
            "requires": [
                "core",
                "p5.Geometry\n/ /**\nLoad a 3d model from an OBJ or STL file.\n\n<a href=\"#/p5/loadModel\">loadModel()</a> should be placed inside of <a href=\"#/p5/preload\">preload()</a>.\nThis allows the model to load fully before the rest of your code is run.\n\nOne of the limitations of the OBJ and STL format is that it doesn't have a built-in\nsense of scale. This means that models exported from different programs might\nbe very different sizes. If your model isn't displaying",
                "try calling\n<a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the\nmodel to a scale appropriate for p5. You can also make additional changes to\nthe final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.\n\nAlso",
                "the support for colored STL files is not present. STL files with color will be\nrendered without color properties."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "path",
                    "description": "Path of the model to be loaded",
                    "type": "String"
                },
                {
                    "name": "normalize",
                    "description": "If true, scale the model to a\n                                     standardized size when loading",
                    "type": "Boolean"
                },
                {
                    "name": "successCallback",
                    "description": "Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.",
                    "type": "function(p5.Geometry)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "called with event error if\n                                        the model fails to load.",
                    "type": "Function(Event)",
                    "optional": true
                },
                {
                    "name": "fileType",
                    "description": "The file extension of the model\n                                     (<code>.stl</code>, <code>.obj</code>).",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "",
                    "type": "function(p5.Geometry)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "",
                    "type": "Function(Event)",
                    "optional": true
                },
                {
                    "name": "fileType",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Geometry\">p5.Geometry</a> object\n/ _main.default.prototype.loadModel = function(path) {\n           _main.default._validateParameters('loadModel', arguments);\n           var normalize;\n           var successCallback;\n           var failureCallback;\n           var fileType = path.slice(-4);\n           if (typeof arguments[1] === 'boolean') {\n             normalize = arguments[1];\n             successCallback = arguments[2];\n             failureCallback = arguments[3];\n             if (typeof arguments[4] !== 'undefined') {\n               fileType = arguments[4];\n             }\n           } else {\n             normalize = false;\n             successCallback = arguments[1];\n             failureCallback = arguments[2];\n             if (typeof arguments[3] !== 'undefined') {\n               fileType = arguments[3];\n             }\n           }\n\n           var model = new _main.default.Geometry();\n           model.gid = ''.concat(path, '|').concat(normalize);\n           var self = this;\n\n           if (fileType.match(/\\.stl$/i)) {\n             this.httpDo(\n               path,\n               'GET',\n               'arrayBuffer',\n               function(arrayBuffer) {\n                 parseSTL(model, arrayBuffer);\n\n                 if (normalize) {\n                   model.normalize();\n                 }\n                 self._decrementPreload();\n                 if (typeof successCallback === 'function') {\n                   successCallback(model);\n                 }\n               },\n               failureCallback\n             );\n           } else if (fileType.match(/\\.obj$/i)) {\n             this.loadStrings(\n               path,\n               function(strings) {\n                 parseObj(model, strings);\n\n                 if (normalize) {\n                   model.normalize();\n                 }\n\n                 self._decrementPreload();\n                 if (typeof successCallback === 'function') {\n                   successCallback(model);\n                 }\n               },\n               failureCallback\n             );\n           } else {\n             _main.default._friendlyFileLoadError(3, path);\n\n             if (failureCallback) {\n               failureCallback();\n             } else {\n               console.error(\n                 'Sorry, the file type is invalid. Only OBJ and STL files are supported.'\n               );\n             }\n           }\n           return model;\n         };\n\n         /**\nParse OBJ lines into model. For reference, this is what a simple model of a\nsquare might look like:\n\nv -0.5 -0.5 0.5\nv -0.5 -0.5 -0.5\nv -0.5 0.5 -0.5\nv -0.5 0.5 0.5\n\nf 4 3 2 1",
                "type": "p5.Geometry"
            },
            "example": [
                "\n<div>\n<code>\n//draw a spinning octahedron\nlet octahedron;\n\nfunction preload() {\n  octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  model(octahedron);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n//draw a spinning teapot\nlet teapot;\n\nfunction preload() {\n  // Load model with normalise parameter set to true\n  teapot = loadModel('assets/teapot.obj', true);\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  scale(0.4); // Scaled to make model fit into canvas\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  normalMaterial(); // For effect\n  model(teapot);\n}\n</code>\n</div>"
            ],
            "alt": "Vertically rotating 3-d teapot with red, green and blue gradient.\n/ /**"
        },
        "Lights, Camera": {
            "name": "Lights, Camera",
            "submodules": {
                "Rendering": 1,
                "3D Models": 1,
                "Material": 1
            },
            "elements": {},
            "classes": {
                "fill": 1,
                "p5": 1,
                "p5.Camera": 1,
                "p5.Geometry": 1,
                "p5.Matrix": 1,
                "p5.RendererGL": 1,
                "p5.Shader": 1,
                "p5.Texture": 1,
                "ImageInfos": 1,
                "FontInfo": 1,
                "Cubic": 1
            },
            "fors": {
                "p5": 1,
                "p5.Camera": 1
            },
            "namespaces": {},
            "file": "p5.js",
            "line": 95632
        },
        "Material": {
            "name": "Material",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5": 1,
                "p5.Camera": 1,
                "p5.Geometry": 1,
                "p5.Matrix": 1,
                "p5.RendererGL": 1,
                "p5.Shader": 1,
                "p5.Texture": 1,
                "ImageInfos": 1,
                "FontInfo": 1,
                "Cubic": 1
            },
            "fors": {
                "p5": 1,
                "p5.Camera": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "p5.js",
            "line": 95632,
            "requires": [
                "core\n/ /**\nLoads a custom shader from the provided vertex and fragment\nshader paths. The shader files are loaded asynchronously in the\nbackground",
                "so this method should be used in <a href=\"#/p5/preload\">preload()</a>.\n\nFor now",
                "there are three main types of shaders. p5 will automatically\nsupply appropriate vertices",
                "normals",
                "colors",
                "and lighting attributes\nif the parameters defined in the shader match the names."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "vertFilename",
                    "description": "path to file containing vertex shader\nsource code",
                    "type": "String"
                },
                {
                    "name": "fragFilename",
                    "description": "path to file containing fragment shader\nsource code",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback to be executed after loadShader\ncompletes. On success, the Shader object is passed as the first argument.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "callback to be executed when an error\noccurs inside loadShader. On error, the error is passed as the first\nargument.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "vertSrc",
                    "description": "source code for the vertex shader",
                    "type": "String"
                },
                {
                    "name": "fragSrc",
                    "description": "source code for the fragment shader",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a shader object created from the provided\nvertex and fragment shaders.",
                "type": "p5.Shader"
            },
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nlet mandel;\nfunction preload() {\n  // load the shader definitions from files\n  mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\n}\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  // use the shader\n  shader(mandel);\n  noStroke();\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n}\n\nfunction draw() {\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n</code>\n</div>",
                "\n<div modernizr='webgl'>\n<code>\n// the 'varying's are shared between both vertex & fragment shaders\nlet varying = 'precision highp float; varying vec2 vPos;';\n\n// the vertex shader is called for each vertex\nlet vs =\n  varying +\n  'attribute vec3 aPosition;' +\n  'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n\n// the fragment shader is called for each pixel\nlet fs =\n  varying +\n  'uniform vec2 p;' +\n  'uniform float r;' +\n  'const int I = 500;' +\n  'void main() {' +\n  '  vec2 c = p + vPos * r, z = c;' +\n  '  float n = 0.0;' +\n  '  for (int i = I; i > 0; i --) {' +\n  '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n  '      n = float(i)/float(I);' +\n  '      break;' +\n  '    }' +\n  '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n  '  }' +\n  '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n  '}';\n\nlet mandel;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  // create and initialize the shader\n  mandel = createShader(vs, fs);\n  shader(mandel);\n  noStroke();\n\n  // 'p' is the center point of the Mandelbrot image\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n}\n\nfunction draw() {\n  // 'r' is the size of the image in Mandelbrot-space\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n</code>\n</div>"
            ],
            "alt": "zooming Mandelbrot set. a colorful, infinitely detailed fractal.",
            "description": "This module defines the p5.Shader class",
            "is_constructor": 1,
            "chainable": 1,
            "access": "private",
            "tagname": ""
        }
    },
    "classes": {
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Environment",
            "file": "p5.js",
            "line": 18886,
            "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promise's eventual value or the reason\nwhy the promise cannot be fulfilled.\n\nTerminology\n-----------\n\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\n\nA promise can be in one of three states: pending, fulfilled, or rejected.\n\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.\n\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\n\n\nBasic Usage:\n------------\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nAdvanced Usage:\n---------------\n\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n\n```js\nfunction getJSON(url) {\n  return new Promise(function(resolve, reject){\n    let xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nUnlike callbacks, promises are great composable primitives.\n\n```js\nPromise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // => postsJSON\n  values[1] // => commentsJSON\n\n  return values;\n});\n```",
            "params": [
                {
                    "name": "resolver\nUseful",
                    "description": "for tooling.",
                    "type": "Function"
                }
            ],
            "is_constructor": 1
        },
        "": {
            "file": "p5.js",
            "line": 38866,
            "description": "A Font represents a loaded OpenType font file.\nIt contains a set of glyphs and methods to draw text on a drawing context,\nor to get a path representing the text.",
            "exports": "opentype.Font",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tableName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "extends": "opentype.Table",
            "module": "Environment"
        },
        "p5": {
            "name": "p5",
            "shortname": "p5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 50938,
            "description": "Set up our translation function, with loaded languages\n/ exports.translator = translator;\n         var initialize = function initialize() {\n           var i18init = _i18next.default\n             .use(_i18nextBrowserLanguagedetector.default)\n             .use(FetchResources)\n             .init({\n               fallbackLng: 'en',\n               nestingPrefix: '$tr(',\n               nestingSuffix: ')',\n               defaultNS: 'translation',\n               returnEmptyString: false,\n               interpolation: {\n                 escapeValue: false\n               },\n\n               detection: {\n                 checkWhitelist: false,\n\n                 // prevent storing or locating language from cookie or localStorage\n                 // more info on https://github.com/processing/p5.js/issues/4862\n                 order: ['querystring', 'navigator', 'htmlTag', 'path', 'subdomain'],\n                 caches: []\n               },\n\n               backend: {\n                 fallback: 'en',\n                 loadPath:\n                   'https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json'\n               },\n\n               partialBundledLanguages: true,\n               resources: fallbackResources\n             })\n             .then(\n               function(translateFn) {\n                 exports.translator = translator = translateFn;\n               },\n               function(e) {\n                 return console.debug('Translations failed to load ('.concat(e, ')'));\n               }\n             );\n\n           // i18next.init() returns a promise that resolves when the translations\n           // are loaded. We use this in core/init.js to hold p5 initialization until\n           // we have the translation files.\n           return i18init;\n         };\n         exports.initialize = initialize;\n       },\n       {\n         '../../translations': 118,\n         '../../translations/dev': undefined,\n         i18next: 30,\n         'i18next-browser-languagedetector': 27\n       }\n     ],\n     58: [\n       function(_dereq_, module, exports) {\n         'use strict';\n         Object.defineProperty(exports, '__esModule', { value: true });\n         exports.default = void 0;\n\n         var _main = _interopRequireDefault(_dereq_('./main'));\n         function _interopRequireDefault(obj) {\n           return obj && obj.__esModule ? obj : { default: obj };\n         }\n         /**",
            "requires": [
                "core\nThese are functions that are part of the Processing API but are not part of\nthe p5.js API. In some cases they have a new name",
                "in others",
                "they are\nremoved completely. Not all unsupported Processing functions are listed here\nbut we try to include ones that a user coming from Processing might likely\ncall.\n/ _main.default.prototype.pushStyle = function() {\n           throw new Error('pushStyle() not used",
                "see push()');\n         };\n         _main.default.prototype.popStyle = function() {\n           throw new Error('popStyle() not used",
                "see pop()');\n         };\n\n         _main.default.prototype.popMatrix = function() {\n           throw new Error('popMatrix() not used",
                "see pop()');\n         };\n\n         _main.default.prototype.pushMatrix = function() {\n           throw new Error('pushMatrix() not used",
                "see push()');\n         };\n         var _default = _main.default;\n         exports.default = _default;\n       }",
                "{ './main': 59 }\n     ]",
                "59: [\n       function(_dereq_",
                "module",
                "exports) {\n         'use strict';\n         function _typeof(obj) {\n           if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n             _typeof = function _typeof(obj) {\n               return typeof obj;\n             };\n           } else {\n             _typeof = function _typeof(obj) {\n               return obj &&\n                 typeof Symbol === 'function' &&\n                 obj.constructor === Symbol &&\n                 obj !== Symbol.prototype\n                 ? 'symbol'\n                 : typeof obj;\n             };\n           }\n           return _typeof(obj);\n         }\n         Object.defineProperty(exports",
                "'__esModule'",
                "{ value: true });\n         exports.default = void 0;\n\n         _dereq_('./shim');\n\n         var constants = _interopRequireWildcard(_dereq_('./constants'));\n         function _getRequireWildcardCache() {\n           if (typeof WeakMap !== 'function') return null;\n           var cache = new WeakMap();\n           _getRequireWildcardCache = function _getRequireWildcardCache() {\n             return cache;\n           };\n           return cache;\n         }\n         function _interopRequireWildcard(obj) {\n           if (obj && obj.__esModule) {\n             return obj;\n           }\n           if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n             return { default: obj };\n           }\n           var cache = _getRequireWildcardCache();\n           if (cache && cache.has(obj)) {\n             return cache.get(obj);\n           }\n           var newObj = {};\n           var hasPropertyDescriptor =\n             Object.defineProperty && Object.getOwnPropertyDescriptor;\n           for (var key in obj) {\n             if (Object.prototype.hasOwnProperty.call(obj",
                "key)) {\n               var desc = hasPropertyDescriptor\n                 ? Object.getOwnPropertyDescriptor(obj",
                "key)\n                 : null;\n               if (desc && (desc.get || desc.set)) {\n                 Object.defineProperty(newObj",
                "key",
                "desc);\n               } else {\n                 newObj[key] = obj[key];\n               }\n             }\n           }\n           newObj.default = obj;\n           if (cache) {\n             cache.set(obj",
                "newObj);\n           }\n           return newObj;\n         }\n         function _classCallCheck(instance",
                "Constructor) {\n           if (!(instance instanceof Constructor)) {\n             throw new TypeError('Cannot call a class as a function');\n           }\n         }\n         function _defineProperties(target",
                "props) {\n           for (var i = 0; i < props.length; i++) {\n             var descriptor = props[i];\n             descriptor.enumerable = descriptor.enumerable || false;\n             descriptor.configurable = true;\n             if ('value' in descriptor) descriptor.writable = true;\n             Object.defineProperty(target",
                "descriptor.key",
                "descriptor);\n           }\n         }\n         function _createClass(Constructor",
                "protoProps",
                "staticProps) {\n           if (protoProps) _defineProperties(Constructor.prototype",
                "protoProps);\n           if (staticProps) _defineProperties(Constructor",
                "staticProps);\n           return Constructor;\n         }\n\n         /**\nThis is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure and it can also\ntake an optional node parameter for attaching the generated p5 canvas\nto a node.  The sketch closure takes the newly created p5 instance as\nits sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>",
                "<a href=\"#/p5/setup\">setup()</a>",
                "and/or\n<a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "sketch",
                    "description": "a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,\n                             <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the\n                             given p5 instance",
                    "type": "Function"
                },
                {
                    "name": "node",
                    "description": "element to attach canvas to",
                    "type": "HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "a p5 instance\n/ var p5 = /*#__PURE__*/ (function() {\n           function p5(sketch, node, sync) {\n             var _this = this;\n             _classCallCheck(this, p5);\n             //////////////////////////////////////////////\n             // PUBLIC p5 PROPERTIES AND METHODS\n             //////////////////////////////////////////////\n\n             /**\nCalled directly before <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/preload\">preload()</a> function is used to handle\nasynchronous loading of external files in a blocking way. If a preload\nfunction is defined, <a href=\"#/p5/setup\">setup()</a> will wait until any load calls within have\nfinished. Nothing besides load calls (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>,\n<a href=\"#/p5/loadStrings\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\nloading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\">setup()</a>\nor anywhere else with the use of a callback parameter.\n\nBy default the text \"loading...\" will be displayed. To make your own\nloading page, include an HTML element with id \"p5_loading\" in your\npage. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>.",
                "type": "P5"
            },
            "itemtype": "method",
            "example": [
                "\n<div><code>\nlet img;\nlet c;\nfunction preload() {\n  // preload() runs once\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  // setup() waits until preload() is done\n  img.loadPixels();\n  // get color of middle pixel\n  c = img.get(img.width / 2, img.height / 2);\n}\n\nfunction draw() {\n  background(c);\n  image(img, 25, 25, 50, 50);\n}\n</code></div>"
            ],
            "alt": "nothing displayed"
        },
        "p5.Color": {
            "name": "p5.Color",
            "shortname": "p5.Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Environment",
            "submodule": "Environment",
            "namespace": "",
            "file": "p5.js",
            "line": 44664,
            "requires": [
                "core",
                "constants",
                "color_conversion\n/ /**\nEach color stores the color mode and level maxes that was applied at the\ntime of its construction. These are used to interpret the input arguments\n(at construction and later for that instance of color) and to format the\noutput e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.\n\nInternally",
                "we store an array representing the ideal RGBA values in floating\npoint form",
                "normalized from 0 to 1. From this we calculate the closest\nscreen color (RGBA levels from 0 to 255) and expose this to the renderer.\n\nWe also cache normalized",
                "floating point components of the color in various\nrepresentations as they are calculated. This is done to prevent repeating a\nconversion that has already been performed."
            ]
        },
        "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.": {
            "name": "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.",
            "shortname": "p5.Element\n/ /**\nBase class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n<a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "submodule": "DOM",
            "namespace": ""
        },
        "p5.Element": {
            "name": "p5.Element",
            "shortname": "p5.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": "",
            "file": "p5.js",
            "line": 51955
        },
        "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.": {
            "name": "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.",
            "shortname": "p5\n/ /**\nThin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": ""
        },
        "p5.Graphics": {
            "name": "p5.Graphics",
            "shortname": "p5.Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": "",
            "file": "p5.js",
            "line": 52855
        },
        "p5.Renderer": {
            "name": "p5.Renderer",
            "shortname": "p5.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shape",
            "submodule": "2D Primitives",
            "namespace": "",
            "file": "p5.js",
            "line": 53110,
            "description": "Main graphics and rendering context, as well as the base API\nimplementation for p5.js \"core\". To be used as the superclass for\nRenderer2D and Renderer3D classes, respectively.",
            "is_constructor": 1,
            "extends": "p5.Element",
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                },
                {
                    "name": "isMainCanvas",
                    "description": "whether we're using it as main canvas",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "p5.TypedDict": {
            "name": "p5.TypedDict",
            "shortname": "p5.TypedDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "p5.js",
            "line": 60066,
            "description": "Base class for all p5.Dictionary types. Specifically\n typed Dictionary classes inherit from this class.",
            "is_constructor": 1
        },
        "p5.StringDict": {
            "name": "p5.StringDict",
            "shortname": "p5.StringDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "p5.js",
            "line": 60380,
            "description": "A simple Dictionary class for Strings.",
            "extends": "p5.TypedDict"
        },
        "p5.NumberDict": {
            "name": "p5.NumberDict",
            "shortname": "p5.NumberDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "p5.js",
            "line": 60407,
            "description": "A simple Dictionary class for Numbers.",
            "is_constructor": 1,
            "extends": "p5.TypedDict"
        },
        "p5.MediaElement": {
            "name": "p5.MediaElement",
            "shortname": "p5.MediaElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "p5.js",
            "line": 63267,
            "description": "Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods\nof <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not\ncalled directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>,\n<a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                }
            ]
        },
        "p5.File": {
            "name": "p5.File",
            "shortname": "p5.File",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Events",
            "submodule": "Acceleration",
            "namespace": "",
            "file": "p5.js",
            "line": 64438,
            "description": "Base class for a file.\nUsed for Element.drop and createFileInput.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "file",
                    "description": "File that is wrapped",
                    "type": "File"
                }
            ]
        },
        "p5.Image": {
            "name": "p5.Image",
            "shortname": "p5.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "submodule": "Pixels",
            "namespace": "",
            "file": "p5.js",
            "line": 69164,
            "requires": [
                "core",
                "constants",
                "filters\n/ /**\nThis module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\ndrawing images to the main display canvas.\n/ /*\nClass methods\n/ /**\nCreates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\nimage.\n\np5 can display .gif",
                ".jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used",
                "it must be loaded with the\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\nheight of the image",
                "as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\nvalues for every pixel in the image.\n\nThe methods described below allow easy access to the image's pixels and\nalpha channel and simplify the process of compositing.\n\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array",
                "be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\nthe image to make sure that the pixel data is properly loaded."
            ],
            "example": [
                "\n<div><code>\nfunction setup() {\n  let img = createImage(100, 100); // same as new p5.Image(100, 100);\n  img.loadPixels();\n  createCanvas(100, 100);\n  background(0);\n\n  // helper for writing color to array\n  function writeColor(image, x, y, red, green, blue, alpha) {\n    let index = (x + y * width) * 4;\n    image.pixels[index] = red;\n    image.pixels[index + 1] = green;\n    image.pixels[index + 2] = blue;\n    image.pixels[index + 3] = alpha;\n  }\n\n  let x, y;\n  // fill with random colors\n  for (y = 0; y < img.height; y++) {\n    for (x = 0; x < img.width; x++) {\n      let red = random(255);\n      let green = random(255);\n      let blue = random(255);\n      let alpha = 255;\n      writeColor(img, x, y, red, green, blue, alpha);\n    }\n  }\n\n  // draw a red line\n  y = 0;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 255, 0, 0, 255);\n  }\n\n  // draw a green line\n  y = img.height - 1;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 0, 255, 0, 255);\n  }\n\n  img.updatePixels();\n  image(img, 0, 0);\n}\n</code></div>",
                "\n<div><code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (let i = 0; i < img.width; i++) {\n    let c = img.get(i, img.height / 2);\n    stroke(c);\n    line(i, height / 2, i, height);\n  }\n}\n</code></div>",
                "\n<div><code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (let i = 0; i < img.height; i++) {\n    let c = img.get(img.width / 2, i);\n    stroke(c);\n    line(0, i, width / 2, i);\n  }\n}\n</code></div>",
                "\n<div>\n<code>\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n  for (let j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n<div>\n<code>\nlet pink = color(255, 102, 204);\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < 4 * (width * height / 2); i += 4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i + 1] = green(pink);\n  img.pixels[i + 2] = blue(pink);\n  img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ]
        },
        "p5.PrintWriter": {
            "name": "p5.PrintWriter",
            "shortname": "p5.PrintWriter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Output",
            "namespace": "",
            "file": "p5.js",
            "line": 72370,
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "p5.TableRow": {
            "name": "p5.TableRow",
            "shortname": "p5.TableRow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Input",
            "namespace": "",
            "file": "p5.js",
            "line": 74479,
            "requires": [
                "core\n/ /**\n A TableRow object represents a single row of data values",
                "stored in columns",
                "from a table.\n\n A Table Row contains both an ordered array",
                "and an unordered\n JSON object."
            ]
        },
        "p5.XML": {
            "name": "p5.XML",
            "shortname": "p5.XML",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "submodule": "Calculation",
            "namespace": "",
            "file": "p5.js",
            "line": 74835,
            "requires": [
                "core\n/ /**\nXML is a representation of an XML object",
                "able to parse XML code. Use\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
            ]
        },
        "p5.Vector": {
            "name": "p5.Vector",
            "shortname": "p5.Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "submodule": "Trigonometry",
            "namespace": "",
            "file": "p5.js",
            "line": 77159,
            "requires": [
                "constants\n/ /**\nA class to describe a two or three dimensional vector",
                "specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype",
                "however",
                "stores\nthe components of the vector (x",
                "y for 2D",
                "and x",
                "y",
                "z for 3D). The magnitude\nand direction can be accessed via the methods <a href=\"#/p5.Vector/mag\">mag()</a> and <a href=\"#/p5.Vector/heading\">heading()</a>.\n\nIn many of the p5.js examples",
                "you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\nposition",
                "velocity",
                "or acceleration. For example",
                "if you consider a rectangle\nmoving across the screen",
                "at any given instant it has a position (a vector\nthat points from the origin to its location)",
                "a velocity (the rate at which\nthe object's position changes per time unit",
                "expressed as a vector)",
                "and\nacceleration (the rate at which the object's velocity changes per time\nunit",
                "expressed as a vector).\n\nSince vectors represent groupings of values",
                "we cannot simply use\ntraditional addition/multiplication/etc. Instead",
                "we'll need to do some\n\"vector\" math",
                "which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class."
            ]
        },
        "p5.Font": {
            "name": "p5.Font",
            "shortname": "p5.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Array Functions",
            "namespace": "",
            "file": "p5.js",
            "line": 81020,
            "description": "Base class for font handling",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                }
            ]
        },
        "p5.Camera": {
            "name": "p5.Camera",
            "shortname": "p5.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 89429,
            "description": "This class describes a camera for use in p5's\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\nWebGL mode</a>. It contains camera position, orientation, and projection\ninformation necessary for rendering a 3D scene.\n\nNew p5.Camera objects can be made through the\n<a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\nthe methods described below. A camera created in this way will use a default\nposition in the scene and a default perspective projection until these\nproperties are changed through the various methods available. It is possible\nto create multiple cameras, in which case the current camera\ncan be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.\n\nNote:\nThe methods below operate in two coordinate systems: the 'world' coordinate\nsystem describe positions in terms of their relationship to the origin along\nthe X, Y and Z axes whereas the camera's 'local' coordinate system\ndescribes positions from the camera's point of view: left-right, up-down,\nand forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\nfor instance, moves the camera along its own axes, whereas the\n<a href=\"#/p5.Camera/setPosition\">setPosition()</a>\nmethod sets the camera's position in world-space.\n\nThe camera object propreties\n<code>eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</code>\nwhich describes camera position, orientation, and projection\nare also accessible via the camera object generated using\n<a href=\"#/p5/createCamera\">createCamera()</a>",
            "params": [
                {
                    "name": "rendererGL",
                    "description": "instance of WebGL renderer",
                    "type": "RendererGL"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet cam;\nlet delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial pan angle\n  cam.pan(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.pan(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view pans left and right across a series of rotating 3D boxes."
        },
        "p5.Geometry": {
            "name": "p5.Geometry",
            "shortname": "p5.Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 90730,
            "description": "p5 Geometry class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "detailX",
                    "description": "number of vertices on horizontal surface",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of vertices on horizontal surface",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "[callback] function to call upon object instantiation.\n/ _main.default.Geometry = function(detailX, detailY, callback) {\n           //an array containing every vertex\n           //@type [p5.Vector]\n           this.vertices = []; //an array containing every vertex for stroke drawing\n           this.lineVertices = []; //an array 1 normal per lineVertex with\n           //final position representing which direction to\n           //displace for strokeWeight\n           //[[0,0,-1,1], [0,1,0,-1] ...];\n           this.lineNormals = [];\n\n           //an array containing 1 normal per vertex\n           //@type [p5.Vector]\n           //[p5.Vector, p5.Vector, p5.Vector,p5.Vector, p5.Vector, p5.Vector,...]\n           this.vertexNormals = [];\n           //an array containing each three vertex indices that form a face\n           //[[0, 1, 2], [2, 1, 3], ...]\n           this.faces = [];\n           //a 2D array containing uvs for every vertex\n           //[[0.0,0.0],[1.0,0.0], ...]\n           this.uvs = [];\n           // a 2D array containing edge connectivity pattern for create line vertices\n           //based on faces for most objects;\n           this.edges = [];\n           this.vertexColors = []",
                    "description": ";\n           this.detailX = detailX !== undefined ? detailX : 1;\n           this.detailY = detailY !== undefined ? detailY : 1;\n           this.dirtyFlags = {};\n\n           if (callback instanceof Function) {\n             callback.call(this);\n           }\n           return this; // TODO: is this a constructor?\n         };\n\n         _main.default.Geometry.prototype.reset = function() {\n           this.lineVertices.length = 0;\n           this.lineNormals.length = 0;\n\n           this.vertices.length = 0;\n           this.edges.length = 0;\n           this.vertexColors.length = 0;\n           this.vertexNormals.length = 0;\n           this.uvs.length = 0;\n\n           this.dirtyFlags = {};\n         };\n\n         /**\ncomputes faces for geometry objects based on the vertices.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "chainable": 1
        },
        "p5.Matrix": {
            "name": "p5.Matrix",
            "shortname": "p5.Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 91029,
            "requires": [
                "constants"
            ],
            "todo": [
                "see methods below needing further implementation.\nfuture consideration: implement SIMD optimizations\nwhen browser compatibility becomes available\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/\n  Reference/Global_Objects/SIMD\n/ var GLMAT_ARRAY_TYPE = Array;\n         var isMatrixArray = function isMatrixArray(x) {\n           return x instanceof Array;\n         };\n         if (typeof Float32Array !== 'undefined') {\n           GLMAT_ARRAY_TYPE = Float32Array;\n           isMatrixArray = function isMatrixArray(x) {\n             return x instanceof Array || x instanceof Float32Array;\n           };\n         }\n\n         /**\nA class to describe a 4x4 matrix\nfor model and view matrix manipulation in the p5js webgl renderer."
            ],
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mat4",
                    "description": "array literal of our 4x4 matrix",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "p5.RendererGL": {
            "name": "fill",
            "shortname": "p5.RendererGL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 93296,
            "description": "Basic fill material for geometry with a given color",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "extends": "p5.Renderer",
            "todo": [
                "extend class to include public method for offscreen\nrendering (FBO)."
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value,\nred or hue value (depending on the current color mode),\nor color Array, or CSS color string",
                    "type": "Number|Number[]|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 200, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  fill(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(75, 75, 75);\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with purple cube spinning"
        },
        "p5.Shader": {
            "name": "p5.Shader",
            "shortname": "p5.Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 94283,
            "description": "This module defines the p5.Shader class",
            "requires": [
                "core\n/ /**\nShader class for WEBGL Mode"
            ]
        },
        "p5.Texture": {
            "name": "p5.Texture",
            "shortname": "p5.Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 94954,
            "description": "This module defines the p5.Texture class",
            "requires": [
                "core\n/ /**\nTexture class for WEBGL Mode"
            ],
            "access": "private",
            "tagname": ""
        },
        "ImageInfos": {
            "name": "ImageInfos",
            "shortname": "ImageInfos",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 95406,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height\n\nthe",
                    "description": "ImageInfos class holds a list of ImageDatas of a given size.",
                    "type": "Integer"
                }
            ]
        },
        "FontInfo": {
            "name": "FontInfo",
            "shortname": "FontInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 95503,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "font",
                    "description": "an opentype.js font object\n\ncontains cached images and glyph information for an opentype font",
                    "type": "Object"
                }
            ]
        },
        "Cubic": {
            "name": "Cubic",
            "shortname": "Cubic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "p5.js",
            "line": 95632,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "p0",
                    "description": "the start point of the curve",
                    "type": "Number"
                },
                {
                    "name": "c0",
                    "description": "the first control point",
                    "type": "Number"
                },
                {
                    "name": "c1",
                    "description": "the second control point",
                    "type": "Number"
                },
                {
                    "name": "p1",
                    "description": "the end point\n\na cubic curve",
                    "type": "Number"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "p5.js",
            "line": 16151,
            "description": "If `Buffer.TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Print warning and recommend using `buffer` v4.x which has an Object\n              implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nWe report that the browser does not support typed arrays if the are not subclassable\nusing __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n(See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\nfor __proto__ and has a buggy typed array implementation.",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 16223,
            "description": "The Buffer constructor returns instances of `Uint8Array` that have their\nprototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n`Uint8Array`, so the returned instances will have all the node `Buffer` methods\nand the `Uint8Array` methods. Square bracket notation works as expected -- it\nreturns a single octet.\n\nThe `Uint8Array` prototype remains unmodified.",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 16319,
            "description": "Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\nif value is a number.\nBuffer.from(str[, encoding])\nBuffer.from(array)\nBuffer.from(buffer)\nBuffer.from(arrayBuffer[, byteOffset[, length]])",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 16362,
            "description": "Creates a new filled Buffer instance.\nalloc(size[, fill[, encoding]])",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 16375,
            "description": "Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 16381,
            "description": "Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 18283,
            "description": "`Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n\n```javascript\nlet promise = new Promise(function(resolve, reject){\n  resolve(1);\n});\n\npromise.then(function(value){\n  // value === 1\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nlet promise = Promise.resolve(1);\n\npromise.then(function(value){\n  // value === 1\n});\n```",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with\nUseful for tooling.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "a promise that will become fulfilled with the given\n`value`",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 18698,
            "description": "`Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\n\nExample:\n\n```javascript\nlet promise1 = resolve(1);\nlet promise2 = resolve(2);\nlet promise3 = resolve(3);\nlet promises = [ promise1, promise2, promise3 ];\n\nPromise.all(promises).then(function(array){\n  // The array here would be [ 1, 2, 3 ];\n});\n```\n\nIf any of the `promises` given to `all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\n\nExample:\n\n```javascript\nlet promise1 = resolve(1);\nlet promise2 = reject(new Error(\"2\"));\nlet promise3 = reject(new Error(\"3\"));\nlet promises = [ promise1, promise2, promise3 ];\n\nPromise.all(promises).then(function(array){\n  // Code here never runs because there are rejected promises!\n}, function(error) {\n  // error.message === \"2\"\n});\n```",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "entries",
                    "description": "array of promises",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when all `promises` have been\nfulfilled, or rejected if any of them become rejected.",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 18749,
            "description": "`Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\n\nExample:\n\n```javascript\nlet promise1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nlet promise2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 2');\n  }, 100);\n});\n\nPromise.race([promise1, promise2]).then(function(result){\n  // result === 'promise 2' because it was resolved before promise1\n  // was resolved.\n});\n```\n\n`Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n\n```javascript\nlet promise1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nlet promise2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(new Error('promise 2'));\n  }, 100);\n});\n\nPromise.race([promise1, promise2]).then(function(result){\n  // Code here never runs\n}, function(reason){\n  // reason.message === 'promise 2' because promise 2 became rejected before\n  // promise 1 became fulfilled\n});\n```\n\nAn example real-world use case is implementing timeouts:\n\n```javascript\nPromise.race([ajax('foo.json'), timeout(5000)])\n```",
            "itemtype": "method",
            "name": "race",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "array of promises to observe\nUseful for tooling.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a promise which settles in the same way as the first passed\npromise to settle.",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 18832,
            "description": "`Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n\n```javascript\nlet promise = new Promise(function(resolve, reject){\n  reject(new Error('WHOOPS'));\n});\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nlet promise = Promise.reject(new Error('WHOOPS'));\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```",
            "itemtype": "method",
            "name": "reject",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.\nUseful for tooling.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "a promise rejected with the given `reason`.",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 19004,
            "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n ```js\nfindUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n```\n Chaining\n--------\n The return value of `then` is itself a promise.  This second, 'downstream'\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n ```js\nfindUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return 'default name';\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `'default name'`\n});\n findUser().then(function (user) {\n  throw new Error('Found user, but still unhappy');\n}, function (reason) {\n  throw new Error('`findUser` rejected and we're unhappy');\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n  // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n ```js\nfindUser().then(function (user) {\n  throw new PedagogicalException('Upstream error');\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n```\n Assimilation\n------------\n Sometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n ```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n```\n If the assimliated promise rejects, then the downstream promise will also reject.\n ```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\n Simple Example\n--------------\n Synchronous Example\n ```javascript\nlet result;\n try {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n```\n Errback Example\n ```js\nfindResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n```\n Promise Example;\n ```javascript\nfindResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n```\n Advanced Example\n--------------\n Synchronous Example\n ```javascript\nlet author, books;\n try {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n```\n Errback Example\n ```js\n function foundBooks(books) {\n }\n function failure(reason) {\n }\n findAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n```\n Promise Example;\n ```javascript\nfindAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n```",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfilled",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onRejected\nUseful",
                    "description": "for tooling.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 19165,
            "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n```js\nfunction findAuthor(){\nthrow new Error('couldn't find that author');\n}\n// synchronous\ntry {\nfindAuthor();\n} catch(reason) {\n// something went wrong\n}\n// async with promises\nfindAuthor().catch(function(reason){\n// something went wrong\n});\n```",
            "itemtype": "method",
            "name": "catch",
            "params": [
                {
                    "name": "onRejection\nUseful",
                    "description": "for tooling.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 19193,
            "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\n  \nSynchronous example:\n  \n```js\nfindAuthor() {\n  if (Math.random() > 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n  \ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuther();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n```\n  \nAsynchronous example:\n  \n```js\nfindAuthor().catch(function(reason){\n  return findOtherAuther();\n}).finally(function(){\n  // author was either found, or not\n});\n```",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 25425,
            "description": "https://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens",
            "class": "Promise"
        },
        {
            "file": "p5.js",
            "line": 25948,
            "description": "Returns true if the bounding box is empty, that is, no points have been added to the box yet.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 25955,
            "description": "Add the point to the bounding box.\nThe x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.",
            "params": [
                {
                    "name": "x",
                    "description": "- The X coordinate of the point.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The Y coordinate of the point.",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 25988,
            "description": "Add a X coordinate to the bounding box.\nThis extends the bounding box to include the X coordinate.\nThis function is used internally inside of addBezier.",
            "params": [
                {
                    "name": "x",
                    "description": "- The X coordinate of the point.",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 25998,
            "description": "Add a Y coordinate to the bounding box.\nThis extends the bounding box to include the Y coordinate.\nThis function is used internally inside of addBezier.",
            "params": [
                {
                    "name": "y",
                    "description": "- The Y coordinate of the point.",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26008,
            "description": "Add a Bézier curve to the bounding box.\nThis extends the bounding box to include the entire Bézier.",
            "params": [
                {
                    "name": "x0",
                    "description": "- The starting X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "- The starting Y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "- The X coordinate of the first control point.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- The Y coordinate of the first control point.",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "- The X coordinate of the second control point.",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "- The Y coordinate of the second control point.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- The ending X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The ending Y coordinate.",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26080,
            "description": "Add a quadratic curve to the bounding box.\nThis extends the bounding box to include the entire quadratic curve.",
            "params": [
                {
                    "name": "x0",
                    "description": "- The starting X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "- The starting Y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "- The X coordinate of the control point.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- The Y coordinate of the control point.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- The ending X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The ending Y coordinate.",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26114,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26126,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26138,
            "description": "Draws cubic curve",
            "itemtype": "method",
            "name": "curveTo",
            "memberof": "opentype.Path.prototype",
            "params": [
                {
                    "name": "x1",
                    "description": "- x of control 1",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- y of control 1",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "- x of control 2",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "- y of control 2",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- x of path point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- y of path point",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26151,
            "description": "Draws cubic curve",
            "itemtype": "method",
            "name": "bezierCurveTo",
            "memberof": "opentype.Path.prototype",
            "params": [
                {
                    "name": "x1",
                    "description": "- x of control 1",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- y of control 1",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "- x of control 2",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "- y of control 2",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- x of path point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- y of path point",
                    "type": "Number"
                }
            ],
            "see": [
                "curveTo"
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26183,
            "description": "Draws quadratic curve",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "memberof": "opentype.Path.prototype",
            "params": [
                {
                    "name": "x1",
                    "description": "- x of control",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- y of control",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- x of path point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- y of path point",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26194,
            "description": "Draws quadratic curve",
            "itemtype": "method",
            "name": "quadTo",
            "memberof": "opentype.Path.prototype",
            "params": [
                {
                    "name": "x1",
                    "description": "- x of control",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- y of control",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "- x of path point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- y of path point",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26219,
            "description": "Closes the path",
            "itemtype": "method",
            "name": "closePath",
            "memberof": "opentype.Path.prototype",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26225,
            "description": "Close the path",
            "itemtype": "method",
            "name": "close",
            "memberof": "opentype.Path.prototype",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26236,
            "description": "Add the given path or list of commands to the commands of this path.",
            "params": [
                {
                    "name": "pathOrCommands",
                    "description": "- another opentype.Path, an opentype.BoundingBox, or an array of commands.",
                    "type": "Array"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26256,
            "description": "Calculate the bounding box of the path.",
            "return": {
                "description": "",
                "type": "opentype.BoundingBox"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26315,
            "description": "Draw the path to a 2D context.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26350,
            "description": "Convert the Path to a string of path data instructions\nSee http://www.w3.org/TR/SVG/paths.html#PathData",
            "params": [
                {
                    "name": "decimalPlaces",
                    "description": "- The amount of decimal places for floating-point values",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26404,
            "description": "Convert the path to an SVG <path> element, as a string.",
            "params": [
                {
                    "name": "decimalPlaces",
                    "description": "- The amount of decimal places for floating-point values",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26430,
            "description": "Convert the path to a DOM element.",
            "params": [
                {
                    "name": "decimalPlaces",
                    "description": "- The amount of decimal places for floating-point values",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "",
                "type": "SVGPathElement"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26492,
            "description": "Convert an 8-bit unsigned integer to a list of 1 byte.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26504,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26510,
            "description": "Convert a 8-bit signed integer to a list of 1 byte.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26519,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26525,
            "description": "Convert an ASCII string to a list of bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26539,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26547,
            "description": "Convert a 16-bit unsigned integer to a list of 2 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26556,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26562,
            "description": "Convert a 16-bit signed integer to a list of 2 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26576,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26582,
            "description": "Convert a 24-bit unsigned integer to a list of 3 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26591,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26597,
            "description": "Convert a 32-bit unsigned integer to a list of 4 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26606,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26612,
            "description": "Convert a 32-bit unsigned integer to a list of 4 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26626,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26641,
            "description": "Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26659,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26665,
            "description": "Convert a 4-char tag to a list of 4 bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26675,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26696,
            "description": "Convert a numeric operand or charstring number to a variable-size list of bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26717,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26725,
            "description": "Convert a signed number between -32768 and +32767 to a three-byte value.\nThis ensures we always use three bytes, but is not the most compact format.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26735,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26741,
            "description": "Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\nThis is useful if you want to be sure you always use four bytes,\nat the expense of wasting a few bytes for smaller numbers.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26752,
            "constant": "",
            "type": "{number}",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26758,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26796,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26810,
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "numBytes",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26826,
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "numBytes",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26842,
            "description": "Convert a JavaScript string to UTF16-BE.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26858,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26876,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 26922,
            "description": "Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\nstring, or 'undefined' if the encoding is unsupported. For example, we do\nnot support Chinese, Japanese or Korean because these would need large\nmapping tables.",
            "params": [
                {
                    "name": "dataView",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "dataLength",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27005,
            "description": "Encodes an old-style Macintosh string. Returns a byte array upon success.\nIf the requested encoding is unsupported, or if the input string contains\na character that cannot be expressed in the encoding, the function returns\n'undefined'.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27041,
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27147,
            "description": "Encode a list of variation adjustment deltas.\n\nVariation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\nThey indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\nwhen generating instances of variation fonts.",
            "see": [
                "https://www.microsoft.com/typography/otspec/gvar.htm",
                "https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html"
            ],
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27177,
            "params": [
                {
                    "name": "l",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27223,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27231,
            "description": "Convert an object to a CFF DICT structure.\nThe keys should be numeric.\nThe values should be objects containing name / type / value.",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27255,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27263,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27275,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27316,
            "description": "Convert a list of CharString operations to bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27345,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27355,
            "description": "Convert an object containing name / type / value to bytes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27369,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27382,
            "description": "Convert a table object to bytes.\nA table contains a list of fields containing the metadata (name, type and default value).\nThe table itself has the field values set as attributes.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "opentype.Table"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27434,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "opentype.Table"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27513,
            "description": "Encodes the table and returns an array of bytes",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27521,
            "description": "Get the size of the table.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27529,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27544,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 27561,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 28032,
            "description": "Parse a list of items.\nRecord count is optional, if omitted it is read from the stream.\nitemCallback is one of the Parser methods.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 28065,
            "description": "Parse a list of records.\nRecord count is optional, if omitted it is read from the stream.\nExample of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 28133,
            "description": "Parse a GPOS valueRecord\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\nvalueFormat is optional, if omitted it is read from the stream.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 28184,
            "description": "Parse a list of GPOS valueRecords\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\nvalueFormat and valueCount are read from the stream.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 28223,
            "description": "Parse a list of offsets to lists of 16-bit integers,\nor a list of offsets to lists of offsets to any kind of items.\nIf itemCallback is not provided, a list of list of UShort is assumed.\nIf provided, itemCallback is called on each item and must parse the item.\nSee examples in tables/gsub.js",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30026,
            "params": [
                {
                    "name": "c",
                    "description": "- the character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The glyph index.",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30046,
            "params": [
                {
                    "name": "s",
                    "description": "- The character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index.",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30097,
            "description": "Gets the index of a glyph by name.",
            "params": [
                {
                    "name": "name",
                    "description": "- The glyph name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30106,
            "params": [
                {
                    "name": "gid",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30114,
            "alias": "opentype.addGlyphNames",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "opentype.Font"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30177,
            "typedef": "GlyphOptions",
            "type": "Object",
            "itemtype": "property",
            "name": "{string} [name] - The glyph name",
            "class": "p5",
            "subprops": [
                {
                    "name": "unicode",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "unicodes",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "xMin",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yMin",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xMax",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yMax",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "advanceWidth",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        {
            "file": "p5.js",
            "line": 30207,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "GlyphOptions"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30249,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30260,
            "description": "Calculate the minimum bounding box for this glyph.",
            "return": {
                "description": "",
                "type": "opentype.BoundingBox"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30268,
            "description": "Convert the glyph to a Path we can draw on a drawing context.",
            "params": [
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "- xScale, yScale to stretch the glyph.",
                    "type": "Object="
                },
                {
                    "name": "if",
                    "description": "hinting is to be used, the font",
                    "type": "opentype.Font"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Path"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30346,
            "description": "Split the glyph into contours.\nThis function is here for backwards compatibility, and to\nprovide raw access to the TrueType glyph outlines.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30377,
            "description": "Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30434,
            "description": "Draw the glyph on the given context.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "- xScale, yScale to stretch the glyph.",
                    "type": "Object="
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30446,
            "description": "Draw the points of the glyph.\nOn-curve points will be drawn in blue, off-curve points will be drawn in red.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30496,
            "description": "Draw lines indicating important font measurements.\nBlack lines indicate the origin of the coordinate system (point 0,0).\nBlue lines indicate the glyph bounding box.\nGreen line indicates the advance width of the glyph.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30586,
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30598,
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30607,
            "alias": "opentype.glyphLoader",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "opentype.Font"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30617,
            "description": "Generate a stub glyph that can be filled with all metadata *except*\nthe \"points\" and \"path\" properties, which must be loaded only once\nthe glyph's path is actually requested for text shaping.",
            "alias": "opentype.ttfGlyphLoader",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "opentype.Font"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "parseGlyph",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "buildPath",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 30649,
            "alias": "opentype.cffGlyphLoader",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "opentype.Font"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "parseCFFCharstring",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "charstring",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34369,
            "description": "Binary search an object by \"tag\" property",
            "instance": "",
            "itemtype": "method",
            "name": "searchTag",
            "memberof": "opentype.Layout",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "tag",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34380,
            "description": "Binary search in a list of numbers",
            "instance": "",
            "itemtype": "method",
            "name": "binSearch",
            "memberof": "opentype.Layout",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34391,
            "description": "Get or create the Layout table (GSUB, GPOS etc).",
            "params": [
                {
                    "name": "create",
                    "description": "- Whether to create a new one.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The GSUB or GPOS table.",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34404,
            "description": "Returns all scripts in the substitution table.",
            "instance": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34419,
            "description": "Returns the best bet for a script name.\nReturns 'DFLT' if it exists.\nIf not, returns 'latn' if it exists.\nIf neither exist, returns undefined.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34445,
            "description": "Returns all LangSysRecords in the given script.",
            "instance": "",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "create",
                    "description": "- forces the creation of this script table if it doesn't exist.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "An object with tag and script properties.",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34478,
            "description": "Returns a language system table",
            "instance": "",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dlft'"
                },
                {
                    "name": "create",
                    "description": "- forces the creation of this langSysTable if it doesn't exist.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34510,
            "description": "Get a specific feature table.",
            "instance": "",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dlft'"
                },
                {
                    "name": "feature",
                    "description": "- One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm",
                    "type": "String"
                },
                {
                    "name": "create",
                    "description": "- forces the creation of the feature table if it doesn't exist.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34551,
            "description": "Get the lookup tables of a given type for a script/language/feature.",
            "instance": "",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dlft'"
                },
                {
                    "name": "feature",
                    "description": "- 4-letter feature code",
                    "type": "String"
                },
                {
                    "name": "lookupType",
                    "description": "- 1 to 9",
                    "type": "Number"
                },
                {
                    "name": "create",
                    "description": "- forces the creation of the lookup table if it doesn't exist, with no subtables.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34596,
            "description": "Find a glyph in a class definition table\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table",
            "params": [
                {
                    "name": "classDefTable",
                    "description": "- an OpenType Layout class definition table",
                    "type": "Object"
                },
                {
                    "name": "glyphIndex",
                    "description": "- the index of the glyph to find",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "-1 if not found",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34619,
            "description": "Find a glyph in a coverage table\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table",
            "params": [
                {
                    "name": "coverageTable",
                    "description": "- an OpenType Layout coverage table",
                    "type": "Object"
                },
                {
                    "name": "glyphIndex",
                    "description": "- the index of the glyph to find",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "-1 if not found",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34637,
            "description": "Returns the list of glyph indexes of a coverage table.\nFormat 1: the list is stored raw\nFormat 2: compact list as range records.",
            "instance": "",
            "params": [
                {
                    "name": "coverageTable",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34679,
            "description": "Init some data for faster and easier access later.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34687,
            "description": "Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.",
            "params": [
                {
                    "name": "leftIndex",
                    "description": "- left glyph index",
                    "type": "Integer"
                },
                {
                    "name": "rightIndex",
                    "description": "- right glyph index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34732,
            "description": "List all kerning lookup tables.",
            "params": [
                {
                    "name": "script",
                    "description": "- use font.position.getDefaultScriptName() for a better default value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "return": {
                "description": "The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)",
                "type": "Object[]"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34790,
            "description": "Create a default GSUB table.",
            "return": {
                "description": "gsub - The GSUB table.",
                "type": "Object"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34816,
            "description": "List all single substitutions (lookup type 1) for a given script, language, and feature.",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                },
                {
                    "name": "feature",
                    "description": "- 4-character feature name ('aalt', 'salt', 'ss01'...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "substitutions - The list of substitutions.",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34851,
            "description": "List all alternates (lookup type 3) for a given script, language, and feature.",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                },
                {
                    "name": "feature",
                    "description": "- 4-character feature name ('aalt', 'salt'...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "alternates - The list of alternates",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34877,
            "description": "List all ligatures (lookup type 4) for a given script, language, and feature.\nThe result is an array of ligature objects like { sub: [ids], by: id }",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name ('liga', 'rlig', 'dlig'...)",
                    "type": "String"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "return": {
                "description": "ligatures - The list of ligatures.",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34912,
            "description": "Add or modify a single substitution (lookup type 1)\nFormat 2, more flexible, is always used.",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name ('liga', 'rlig', 'dlig'...)",
                    "type": "String"
                },
                {
                    "name": "substitution",
                    "description": "- { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.",
                    "type": "Object"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34954,
            "description": "Add or modify an alternate substitution (lookup type 1)",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name ('liga', 'rlig', 'dlig'...)",
                    "type": "String"
                },
                {
                    "name": "substitution",
                    "description": "- { sub: id, by: [ids] }",
                    "type": "Object"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 34995,
            "description": "Add a ligature (lookup type 4)\nLigatures with more components must be stored ahead of those with fewer components in order to be found",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name ('liga', 'rlig', 'dlig'...)",
                    "type": "String"
                },
                {
                    "name": "ligature",
                    "description": "- { sub: [ids], by: id }",
                    "type": "Object"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 35057,
            "description": "List all feature data for a given script and language.",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name",
                    "type": "String"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "return": {
                "description": "substitutions - The list of substitutions.",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 35083,
            "description": "Add a substitution to a feature for a given script and language.",
            "params": [
                {
                    "name": "feature",
                    "description": "- 4-letter feature name",
                    "type": "String"
                },
                {
                    "name": "sub",
                    "description": "- the substitution to add (an object like { sub: id or [ids], by: id or [ids] })",
                    "type": "Object"
                },
                {
                    "name": "script",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'DFLT'"
                },
                {
                    "name": "language",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 38595,
            "description": "Mathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n                      (pv)\n                   .-'\n            rpd .-'\n             .-*\n        d .-'90°'\n       .-'       '\n    .-'           '\n *-'               ' b\nrp                  '\n                     '\n                      '\n          p *----------*-------------- (fv)\n                        pm\n\nrpdx = rpx + d * pv.x\nrpdy = rpy + d * pv.y\n\nequation of line b\n\n y - rpdy = pvns * (x- rpdx)\n\n y = p.y\n\n x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n  * pm\n  |\\\n  | \\\n  |  \\\n  |   \\\n  |    \\\n  |     \\\n  |      \\\n  |       \\\n  |        \\\n  |         \\ b\n  |          \\\n  |           \\\n  |            \\    .-' (pv)\n  |         90° \\.-'\n  |           .-'* rpd\n  |        .-'\n  *     *-'  d\n  p     rp\n\nrpdx = rpx + d * pv.x\nrpdy = rpy + d * pv.y\n\nequation of line b:\n         pvns ... normal slope to pv\n\n y - rpdy = pvns * (x - rpdx)\n\n x = p.x\n\n y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n                            .'(fv)\n                          .'\n                        .* pm\n                      .' !\n                    .'    .\n                  .'      !\n                .'         . b\n              .'           !\n             *              .\n            p               !\n                       90°   .    ... (pv)\n                         ...-*-'''\n                ...---'''    rpd\n       ...---'''   d\n *--'''\nrp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n\t equation of line b:\n  pvns... normal slope to pv\n\n  y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n  fvs ... slope of freedom vector (=fy/fx)\n\n  y - py = fvs * (x - px)\n\n\non pm both equations are true for same x/y\n\n  y - rpdy = pvns * (x - rpdx)\n\n  y - py = fvs * (x - px)\n\nform to y and set equal:\n\n  pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\nexpand:\n\n  pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\nswitch:\n\n  fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\nsolve for x:\n\n  fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n        fvs * px - pvns * rpdx + rpdy - py\n  x =  -----------------------------------\n               fvs - pvns\n\nand:\n\n  y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n         (+6)\n  rp1o *---->*rp1\n       .     .                          (+12)\n       .     .                  rp2o *---------->* rp2\n       .     .                       .           .\n       .     .                       .           .\n       .    10          20           .           .\n       |.........|...................|           .\n             .   .                               .\n             .   . (+8)                          .\n              po *------>*p                      .\n             .           .                       .\n             .    12     .          24           .\n             |...........|.......................|\n                                36\n\n\n\t-------\n\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .                      (-10)\n       .         .              rp2 *<---------* rpo2\n       .         .                   .         .\n       .         .                   .         .\n       .    10   .          30       .         .\n       |.........|.............................|\n                 .                   .\n                 . (+5)              .\n              po *--->* p            .\n                 .    .              .\n                 .    .   20         .\n                 |....|..............|\n                   5        15\n\n\n\t-------\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .\n       .         .\n  rp2o *-------->*rp2\n\n\n                             (+10)\n                        po *-------->* p\n\n\t-------\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .\n       .         .(+30)\n  rp2o *---------------------------->*rp2\n\n\n                                      (+25)\n                        po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 38839,
            "typedef": "FontOptions",
            "type": "Object",
            "itemtype": "property",
            "name": "{Boolean} empty - whether to create a new empty font",
            "class": "p5",
            "subprops": [
                {
                    "name": "familyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "styleName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "postScriptName",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "designer",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "designerURL",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "manufacturer",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "manufacturerURL",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "license",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "licenseURL",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "version",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "copyright",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "trademark",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "unitsPerEm",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ascender",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "descender",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "createdTimestamp",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "weightClass",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "widthClass",
                    "description": "",
                    "type": "String="
                },
                {
                    "name": "fsSelection",
                    "description": "",
                    "type": "String="
                }
            ]
        },
        {
            "file": "p5.js",
            "line": 38961,
            "description": "Check if the font has a glyph for the given character.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 38970,
            "description": "Convert the given character to a single glyph index.\nNote that this function assumes that there is a one-to-one mapping between\nthe given character and a glyph; for complex scripts this might not be the case.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 38981,
            "description": "Convert the given character to a single Glyph object.\nNote that this function assumes that there is a one-to-one mapping between\nthe given character and a glyph; for complex scripts this might not be the case.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 38999,
            "description": "Convert the given text to a list of Glyph objects.\nNote that there is no strict one-to-one mapping between characters and\nglyphs, so the list of returned glyphs can be larger or smaller than the\nlength of the given string.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph[]"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39061,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39069,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Glyph"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39084,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39096,
            "description": "Retrieve the value of the kerning pair between the left glyph (or its index)\nand the right glyph (or its index). If no kerning pair is found, return 0.\nThe kerning value gets added to the advance width when calculating the spacing\nbetween glyphs.\nFor GPOS kerning, this method uses the default script and language, which covers\nmost use cases. To have greater control, use font.position.getKerningValue .",
            "params": [
                {
                    "name": "leftGlyph",
                    "description": "",
                    "type": "opentype.Glyph"
                },
                {
                    "name": "rightGlyph",
                    "description": "",
                    "type": "opentype.Glyph"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39118,
            "typedef": "GlyphRenderOptions",
            "type": "Object",
            "itemtype": "property",
            "name": "{string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n                              See https://www.microsoft.com/typography/otspec/scripttags.htm",
            "class": "p5",
            "subprops": [
                {
                    "name": "language",
                    "description": "- language system used to determine which features to apply.\n                                       See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'dflt'"
                },
                {
                    "name": "kerning",
                    "description": "- whether to include kerning values",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "features",
                    "description": "- OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n                                See https://www.microsoft.com/typography/otspec/featuretags.htm",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "p5.js",
            "line": 39137,
            "description": "Helper function that invokes the given callback for each glyph in the given text.\nThe callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text",
            "params": [
                {
                    "name": "text",
                    "description": "- The text to apply.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39197,
            "description": "Create a Path object that represents the given text.",
            "params": [
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Path"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39220,
            "description": "Create an array of Path objects that represent the glyphs of a given text.",
            "params": [
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Path[]"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39244,
            "description": "Returns the advance width of a text.\n\nThis is something different than Path.getBoundingBox() as for example a\nsuffixed whitespace increases the advanceWidth but not the bounding box\nor an overhanging letter like a calligraphic 'f' might have a quite larger\nbounding box than its advance width.\n\nThis corresponds to canvas2dContext.measureText(text).width",
            "params": [
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "return": {
                "description": "advance width"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39263,
            "description": "Draw the text on the given drawing context.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39276,
            "description": "Draw the points of all glyphs in the text.\nOn-curve points will be drawn in blue, off-curve points will be drawn in red.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39297,
            "description": "Draw lines indicating important font measurements for all glyphs in the text.\nBlack lines indicate the origin of the coordinate system (point 0,0).\nBlue lines indicate the glyph bounding box.\nGreen line indicates the advance width of the glyph.",
            "params": [
                {
                    "name": "ctx",
                    "description": "- A 2D drawing context, like Canvas.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "- The text to create.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- Horizontal position of the beginning of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "- Vertical position of the *baseline* of the text.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fontSize",
                    "description": "- Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "72"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "GlyphRenderOptions="
                }
            ],
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39320,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39331,
            "description": "Validate",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39358,
            "description": "Convert the font object to a SFNT data structure.\nThis structure contains all the necessary tables and metadata to create a binary OTF file.",
            "return": {
                "description": "",
                "type": "opentype.Table"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39366,
            "deprecated": true,
            "deprecationMessage": "Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39375,
            "description": "Converts a `opentype.Font` into an `ArrayBuffer`",
            "return": {
                "description": "",
                "type": "ArrayBuffer"
            },
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39391,
            "description": "Initiate a download of the OpenType font.",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39435,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39451,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39466,
            "access": "private",
            "tagname": "",
            "class": "p5"
        },
        {
            "file": "p5.js",
            "line": 39891,
            "description": "The opentype library.",
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 39897,
            "description": "Loads a font from a file. The callback throws an error message as the first parameter if it fails\nand the font as an ArrayBuffer in the second parameter if it succeeds.",
            "params": [
                {
                    "name": "path",
                    "description": "- The path of the file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- The function to call when the font load completes",
                    "type": "Function"
                }
            ],
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 39913,
            "description": "Loads a font from a URL. The callback throws an error message as the first parameter if it fails\nand the font as an ArrayBuffer in the second parameter if it succeeds.",
            "params": [
                {
                    "name": "url",
                    "description": "- The URL of the font file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- The function to call when the font load completes",
                    "type": "Function"
                }
            ],
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 39939,
            "description": "Parses OpenType table entries.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 39966,
            "description": "Parses WOFF table entries.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 40000,
            "typedef": "TableData",
            "type": "Object",
            "itemtype": "property",
            "name": "{DataView} data - The DataView",
            "class": "p5",
            "namespace": "opentype",
            "subprops": [
                {
                    "name": "offset",
                    "description": "- The data offset.",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "p5.js",
            "line": 40007,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "DataView"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "TableData"
            },
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 40038,
            "description": "Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\nThrows an error if the font could not be parsed.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Font"
            },
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 40260,
            "description": "Asynchronously load the font from a URL or a filesystem. When done, call the callback\nwith two arguments `(err, font)`. The `err` will be null on success,\nthe `font` is a Font object.\nWe use the node.js callback convention so that\nopentype.js can integrate with frameworks like async.js.",
            "alias": "opentype.load",
            "params": [
                {
                    "name": "url",
                    "description": "- The URL of the font to load.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- The callback.",
                    "type": "Function"
                }
            ],
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 40287,
            "description": "Synchronously load the font from a URL or file.\nWhen done, returns the font object or throws an error.",
            "alias": "opentype.loadSync",
            "params": [
                {
                    "name": "url",
                    "description": "- The URL of the font to load.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "opentype.Font"
            },
            "class": "p5",
            "namespace": "opentype"
        },
        {
            "file": "p5.js",
            "line": 43786,
            "description": "Convert an HSLA array to HSBA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "p5.js",
            "line": 43809,
            "description": "Convert an HSLA array to RGBA.\n\nWe need to change basis from HSLA to something that can be more easily be\nprojected onto RGBA. We will choose hue and brightness as our first two\ncomponents, and pick a convenient third one ('zest') so that we don't need\nto calculate formal HSBA saturation.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "p5.js",
            "line": 43873,
            "description": "Convert an RGBA array to HSBA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "p5.js",
            "line": 43912,
            "description": "Convert an RGBA array to HSLA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "p5.js",
            "line": 44094,
            "description": "Extracts the HSB brightness value from a color or pixel array.",
            "itemtype": "method",
            "name": "brightness",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the brightness value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nlet c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nlet value = brightness(c); // Sets 'value' to 255\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nlet c = color('hsb(60, 100%, 50%)');\nfill(c);\nrect(15, 20, 35, 60);\nlet value = brightness(c); // A 'value' of 50% is 127.5\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "Left half of canvas salmon pink and the right half with it's brightness colored white.\nLeft half of canvas olive colored and the right half with it's brightness color gray.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44138,
            "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n\nNote that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency.\n\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\nstrings and all named color strings are supported. In this case, an alpha\nnumber value as a second argument is not supported, the RGBA form should be\nused.",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "gray",
                    "description": "number specifying value between white and black.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "alpha value relative to current color range\n                                (default is 0-255)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "resulting color",
                "type": "p5.Color"
            },
            "example": [
                "\n<div>\n<code>\nlet c = color(255, 204, 0);\nfill(c);\nnoStroke();\nrect(30, 20, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\nlet c = color(255, 204, 0);\nfill(c);\nnoStroke();\nellipse(25, 25, 80, 80); // Draw left circle\n// Using only one value generates a grayscale value.\nc = color(65);\nfill(c);\nellipse(75, 75, 80, 80);\n</code>\n</div>\n\n<div>\n<code>\n// You can use named SVG & CSS colors\nlet c = color('magenta');\nfill(c);\nnoStroke();\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Example of hex color codes\nnoStroke();\nlet c = color('#0f0');\nfill(c);\nrect(0, 10, 45, 80);\nc = color('#00ff00');\nfill(c);\nrect(55, 10, 45, 80);\n</code>\n</div>\n\n<div>\n<code>\n// RGB and RGBA color strings are also supported\n// these all set to the same color (solid blue)\nlet c;\nnoStroke();\nc = color('rgb(0,0,255)');\nfill(c);\nrect(10, 10, 35, 35); // Draw rectangle\nc = color('rgb(0%, 0%, 100%)');\nfill(c);\nrect(55, 10, 35, 35); // Draw rectangle\nc = color('rgba(0, 0, 255, 1)');\nfill(c);\nrect(10, 55, 35, 35); // Draw rectangle\nc = color('rgba(0%, 0%, 100%, 1)');\nfill(c);\nrect(55, 55, 35, 35); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// HSL color can also be specified by value\nlet c = color('hsl(160, 100%, 50%)');\nnoStroke();\nfill(c);\nrect(0, 10, 45, 80); // Draw rectangle\nc = color('hsla(160, 100%, 50%, 0.5)');\nfill(c);\nrect(55, 10, 45, 80); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// HSB color can also be specified\nlet c = color('hsb(160, 100%, 50%)');\nnoStroke();\nfill(c);\nrect(0, 10, 45, 80); // Draw rectangle\nc = color('hsba(160, 100%, 50%, 0.5)');\nfill(c);\nrect(55, 10, 45, 80); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\nlet c = color(50, 55, 100);\nfill(c);\nrect(0, 10, 45, 80); // Draw left rect\ncolorMode(HSB, 100);\nc = color(50, 55, 100);\nfill(c);\nrect(55, 10, 45, 80);\n</code>\n</div>"
            ],
            "alt": "Yellow rect in middle right of canvas, with 55 pixel width and height.\nYellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.\nBright fuchsia rect in middle of canvas, 60 pixel width and height.\nTwo bright green rects on opposite sides of the canvas, both 45x80.\nFour blue rects in each corner of the canvas, each are 35x35.\nBright sea green rect on left and darker rect on right of canvas, both 45x80.\nDark green rect on left and lighter green rect on right of canvas, both 45x80.\nDark blue rect on left and light teal rect on right of canvas, both 45x80.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44279,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44291,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44297,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44304,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "p5.Color"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44319,
            "description": "Extracts the green value from a color or pixel array.",
            "itemtype": "method",
            "name": "green",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the green value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet c = color(20, 75, 200); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(15, 20, 35, 60); // Draw left rectangle\n\nlet greenValue = green(c); // Get green in 'c'\nprint(greenValue); // Print \"75.0\"\nfill(0, greenValue, 0); // Use 'greenValue' in new fill\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>"
            ],
            "alt": "blue rect on left and green on right, both with black outlines & 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44348,
            "description": "Extracts the hue value from a color or pixel array.\n\nHue exists in both HSB and HSL. This function will return the\nHSB-normalized hue when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL-normalized hue otherwise. (The values will only be different if the\nmaximum hue setting for each system is different.)",
            "itemtype": "method",
            "name": "hue",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the hue",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nlet c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nlet value = hue(c); // Sets 'value' to \"0\"\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "salmon pink rect on left and black on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44383,
            "description": "Blends two colors to find a third color somewhere between them. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first color, 0.1 is very near the first color, 0.5 is halfway\nin between, etc. An amount below 0 will be treated as 0. Likewise, amounts\nabove 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\nbut necessary because otherwise numbers outside the range will produce\nstrange and unexpected colors.\n\nThe way that colors are interpolated depends on the current color mode.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "interpolate from this color",
                    "type": "p5.Color"
                },
                {
                    "name": "c2",
                    "description": "interpolate to this color",
                    "type": "p5.Color"
                },
                {
                    "name": "amt",
                    "description": "number between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "interpolated color",
                "type": "p5.Color"
            },
            "example": [
                "\n<div>\n<code>\ncolorMode(RGB);\nstroke(255);\nbackground(51);\nlet from = color(218, 165, 32);\nlet to = color(72, 61, 139);\ncolorMode(RGB); // Try changing to HSB.\nlet interA = lerpColor(from, to, 0.33);\nlet interB = lerpColor(from, to, 0.66);\nfill(from);\nrect(10, 20, 20, 60);\nfill(interA);\nrect(30, 20, 20, 60);\nfill(interB);\nrect(50, 20, 20, 60);\nfill(to);\nrect(70, 20, 20, 60);\n</code>\n</div>"
            ],
            "alt": "4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44480,
            "description": "Extracts the HSL lightness value from a color or pixel array.",
            "itemtype": "method",
            "name": "lightness",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the lightness",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSL);\nlet c = color(156, 100, 50, 1);\nfill(c);\nrect(15, 20, 35, 60);\nlet value = lightness(c); // Sets 'value' to 50\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "light pastel green rect on left and dark grey rect on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44510,
            "description": "Extracts the red value from a color or pixel array.",
            "itemtype": "method",
            "name": "red",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the red value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet c = color(255, 204, 0); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(15, 20, 35, 60); // Draw left rectangle\n\nlet redValue = red(c); // Get red in 'c'\nprint(redValue); // Print \"255.0\"\nfill(redValue, 0, 0); // Use 'redValue' in new fill\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\ncolorMode(RGB, 255); // Sets the range for red, green, and blue to 255\nlet c = color(127, 255, 0);\ncolorMode(RGB, 1); // Sets the range for red, green, and blue to 1\nlet myColor = red(c);\nprint(myColor); // 0.4980392156862745\n</code>\n</div>"
            ],
            "alt": "yellow rect on left and red rect on right, both with black outlines and 35x60.\ngrey canvas",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44550,
            "description": "Extracts the saturation value from a color or pixel array.\n\nSaturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL saturation otherwise.",
            "itemtype": "method",
            "name": "saturation",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the saturation value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nlet c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nlet value = saturation(c); // Sets 'value' to 126\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "deep pink rect on left and grey rect on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44918,
            "description": "The setRed function sets the red component of a color.\nThe range depends on your color mode, in the default RGB mode it's between 0 and 255.",
            "itemtype": "method",
            "name": "setRed",
            "params": [
                {
                    "name": "red",
                    "description": "the new red value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet backgroundColor;\n\nfunction setup() {\n  backgroundColor = color(100, 50, 150);\n}\n\nfunction draw() {\n  backgroundColor.setRed(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44947,
            "description": "The setGreen function sets the green component of a color.\nThe range depends on your color mode, in the default RGB mode it's between 0 and 255.",
            "itemtype": "method",
            "name": "setGreen",
            "params": [
                {
                    "name": "green",
                    "description": "the new green value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet backgroundColor = color(100, 50, 150);\nfunction draw() {\n  backgroundColor.setGreen(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44971,
            "description": "The setBlue function sets the blue component of a color.\nThe range depends on your color mode, in the default RGB mode it's between 0 and 255.",
            "itemtype": "method",
            "name": "setBlue",
            "params": [
                {
                    "name": "blue",
                    "description": "the new blue value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet backgroundColor = color(100, 50, 150);\nfunction draw() {\n  backgroundColor.setBlue(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 44995,
            "description": "The setAlpha function sets the transparency (alpha) value of a color.\nThe range depends on your color mode, in the default RGB mode it's between 0 and 255.",
            "itemtype": "method",
            "name": "setAlpha",
            "params": [
                {
                    "name": "alpha",
                    "description": "the new alpha value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  clear();\n  background(200);\n  squareColor = color(100, 50, 100);\n  squareColor.setAlpha(128 + 128 * sin(millis() / 1000));\n  fill(squareColor);\n  rect(13, 13, width - 26, height - 26);\n}\n</code>\n</div>"
            ],
            "alt": "a square with gradually changing opacity on a gray background",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45066,
            "description": "Hue is the same in HSB and HSL, but the maximum value may be different.\nThis function will return the HSB-normalized saturation when supplied with\nan HSB color object, but will default to the HSL-normalized saturation\notherwise.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45097,
            "description": "Saturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object, but will default\nto the HSL saturation otherwise.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45116,
            "description": "CSS named colors.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45270,
            "description": "These regular expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases the\nlegibility and comprehensibility of the code.\n\nNote that RGB values of .9 are not parsed by IE, but are supported here for\ncolor string consistency.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45283,
            "description": "Full color string patterns. The capture groups are necessary.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45420,
            "description": "For a number of different inputs, returns a color formatted as [r, g, b, a]\narrays, with each component normalized between 0 and 1.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "An 'array-like' object that represents a list of\n                         arguments",
                    "type": "Array",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "a color formatted as [r, g, b, a]\n                         Example:\n                         input        ==> output\n                         g            ==> [g, g, g, 255]\n                         g,a          ==> [g, g, g, a]\n                         r, g, b      ==> [r, g, b, 255]\n                         r, g, b, a   ==> [r, g, b, a]\n                         [g]          ==> [g, g, g, 255]\n                         [g, a]       ==> [g, g, g, a]\n                         [r, g, b]    ==> [r, g, b, 255]\n                         [r, g, b, a] ==> [r, g, b, a]",
                "type": "Number[]"
            },
            "example": [
                "\n<div>\n<code>\n// todo\n</code>\n</div>"
            ],
            "alt": "//todo",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45645,
            "description": "For HSB and HSL, interpret the gray level as a brightness/lightness\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\ngray level according to the blue maximum.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45881,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current color\n                       mode)",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the current\n                       color mode)",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the current\n                       color mode)",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45893,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red, green, blue\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45900,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "image",
                    "description": "image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)",
                    "type": "p5.Image"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45914,
            "description": "Clears the pixels within a buffer. This function only clears the canvas.\nIt will not clear objects created by createX() methods such as\n<a href=\"#/p5/createVideo\">createVideo()</a> or <a href=\"#/p5/createDiv\">createDiv()</a>.\nUnlike the main graphics context, pixels in additional graphics areas created\nwith <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely\nor partially transparent. This function clears everything to make all of\nthe pixels 100% transparent.",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Clear the screen on mouse press.\nfunction draw() {\n  ellipse(mouseX, mouseY, 20, 20);\n}\nfunction mousePressed() {\n  clear();\n  background(128);\n}\n</code>\n</div>"
            ],
            "alt": "small white ellipses are continually drawn at mouse's x and y coordinates.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 45948,
            "description": "<a href=\"#/p5/colorMode\">colorMode()</a> changes the way p5.js interprets\ncolor data. By default, the parameters for <a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>,\nand <a href=\"#/p5/color\">color()</a> are defined by values between 0 and 255\nusing the RGB color model. This is equivalent to setting colorMode(RGB, 255).\nSetting colorMode(HSB) lets you use the HSB system instead. By default, this\nis colorMode(HSB, 360, 100, 100, 1). You can also use HSL.\n\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)",
                    "type": "Constant"
                },
                {
                    "name": "max",
                    "description": "range for all values",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(RGB, 100);\nfor (let i = 0; i < 100; i++) {\n  for (let j = 0; j < 100; j++) {\n    stroke(i, j, 0);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 100);\nfor (let i = 0; i < 100; i++) {\n  for (let j = 0; j < 100; j++) {\n    stroke(i, j, 100);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\ncolorMode(RGB, 255);\nlet c = color(127, 255, 0);\ncolorMode(RGB, 1);\nlet myColor = c._getRed();\ntext(myColor, 10, 10, 80, 80);\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\ncolorMode(RGB, 255, 255, 255, 1);\nbackground(255);\nstrokeWeight(4);\nstroke(255, 0, 10, 0.3);\nellipse(40, 40, 50, 50);\nellipse(50, 50, 40, 40);\n</code>\n</div>"
            ],
            "alt": "Green to red gradient from bottom L to top R. shading originates from top left.\nRainbow gradient from left to right. Brightness increasing to white at top.\nunknown image.\n50x50 ellipse at middle L & 40x40 ellipse at center. Translucent pink outlines.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46023,
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "max1",
                    "description": "range for the red or hue depending on the\n                             current color mode",
                    "type": "Number"
                },
                {
                    "name": "max2",
                    "description": "range for the green or saturation depending\n                             on the current color mode",
                    "type": "Number"
                },
                {
                    "name": "max3",
                    "description": "range for the blue or brightness/lightness\n                             depending on the current color mode",
                    "type": "Number"
                },
                {
                    "name": "maxA",
                    "description": "range for the alpha",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46067,
            "description": "Sets the color used to fill shapes. For example, if you run fill(204, 102, 0),\nall shapes drawn after the fill command will be filled with the color orange.\nThis color is either specified in terms of the RGB or HSB color depending on\nthe current <a href=\"#/p5/colorMode\">colorMode()</a>. (The default color space\nis RGB, with each value in the range from 0 to 255). The alpha range by default\nis also 0 to 255.\n\nIf a single string argument is provided, RGB, RGBA and Hex CSS color strings\nand all named color strings are supported. In this case, an alpha number\nvalue as a second argument is not supported, the RGBA form should be used.\n\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the fill color.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nfill(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nfill(255, 204, 0);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nfill(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nfill('red');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nfill('#fae');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nfill('#222222');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nfill('rgb(0,255,0)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nfill('rgba(0,255,0, 0.25)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nfill('rgb(100%,0%,10%)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nfill('rgba(100%,0%,100%,0.5)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nfill(color(0, 0, 255));\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "alt": "60x60 dark charcoal grey rect with black outline in center of canvas.\n60x60 yellow rect with black outline in center of canvas.\n60x60 royal blue rect with black outline in center of canvas.\n60x60 red rect with black outline in center of canvas.\n60x60 pink rect with black outline in center of canvas.\n60x60 black rect with black outline in center of canvas.\n60x60 light green rect with black outline in center of canvas.\n60x60 soft green rect with black outline in center of canvas.\n60x60 red rect with black outline in center of canvas.\n60x60 dark fuchsia rect with black outline in center of canvas.\n60x60 blue rect with black outline in center of canvas.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46194,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46200,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46207,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46214,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "color",
                    "description": "the fill color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46227,
            "description": "Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called,\nnothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noFill",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrect(15, 10, 55, 55);\nnoFill();\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noFill();\n  stroke(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(45, 45, 45);\n}\n</code>\n</div>"
            ],
            "alt": "white rect top middle and noFill rect center. Both 60x60 with black outlines.\nblack canvas with purple cube wireframe spinning",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46268,
            "description": "Disables drawing the stroke (outline). If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a>\nare called, nothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noStroke",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoStroke();\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  fill(240, 150, 150);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(45, 45, 45);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 white rect at center. no outline.\nblack canvas with pink cube spinning",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46308,
            "description": "Sets the color used to draw lines and borders around shapes. This color\nis either specified in terms of the RGB or HSB color depending on the\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a> (the default color space\nis RGB, with each value in the range from 0 to 255). The alpha range by\ndefault is also 0 to 255.\n\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\nstrings and all named color strings are supported. In this case, an alpha\nnumber value as a second argument is not supported, the RGBA form should be\nused.\n\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the stroke color.",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nstrokeWeight(4);\nstroke(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nstroke(255, 204, 0);\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nstrokeWeight(4);\nstroke(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nstroke('red');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nstroke('#fae');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nstroke('#222222');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nstroke('rgb(0,255,0)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nstroke('rgba(0,255,0,0.25)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nstroke('rgb(100%,0%,10%)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nstroke('rgba(100%,0%,100%,0.5)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nstroke(color(0, 0, 255));\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "alt": "60x60 white rect at center. Dark charcoal grey outline.\n60x60 white rect at center. Yellow outline.\n60x60 white rect at center. Royal blue outline.\n60x60 white rect at center. Red outline.\n60x60 white rect at center. Pink outline.\n60x60 white rect at center. Black outline.\n60x60 white rect at center. Bright green outline.\n60x60 white rect at center. Soft green outline.\n60x60 white rect at center. Red outline.\n60x60 white rect at center. Dark fuchsia outline.\n60x60 white rect at center. Blue outline.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46447,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46453,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46460,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46467,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "color",
                    "description": "the stroke color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46481,
            "description": "All drawing that follows <a href=\"#/p5/erase\">erase()</a> will subtract from\nthe canvas.Erased areas will reveal the web page underneath the canvas.Erasing\ncan be canceled with <a href=\"#/p5/noErase\">noErase()</a>.\n\nDrawing done with <a href=\"#/p5/image\">image()</a> and <a href=\"#/p5/background\">\nbackground()</a> in between <a href=\"#/p5/erase\">erase()</a> and\n<a href=\"#/p5/noErase\">noErase()</a> will not erase the canvas but works as usual.",
            "itemtype": "method",
            "name": "erase",
            "params": [
                {
                    "name": "strengthFill",
                    "description": "A number (0-255) for the strength of erasing for a shape's fill.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "strengthStroke",
                    "description": "A number (0-255) for the strength of erasing for a shape's stroke.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbackground(100, 100, 250);\nfill(250, 100, 100);\nrect(20, 20, 60, 60);\nerase();\nellipse(25, 30, 30);\nnoErase();\n</code>\n</div>\n\n<div>\n<code>\nbackground(150, 250, 150);\nfill(100, 100, 250);\nrect(20, 20, 60, 60);\nstrokeWeight(5);\nerase(150, 255);\ntriangle(50, 10, 70, 50, 90, 10);\nnoErase();\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  smooth();\n  createCanvas(100, 100, WEBGL);\n  // Make a &lt;p&gt; element and put it behind the canvas\n  let p = createP('I am a dom element');\n  p.center();\n  p.style('font-size', '20px');\n  p.style('text-align', 'center');\n  p.style('z-index', '-9999');\n}\n\nfunction draw() {\n  background(250, 250, 150);\n  fill(15, 195, 185);\n  noStroke();\n  sphere(30);\n  erase();\n  rotateY(frameCount * 0.02);\n  translate(0, 0, 40);\n  torus(15, 5);\n  noErase();\n}\n</code>\n</div>"
            ],
            "alt": "60x60 centered pink rect, purple background. Elliptical area in top-left of rect is erased white.\n60x60 centered purple rect, mint green background. Triangle in top-right is partially erased with fully erased outline.\n60x60 centered teal sphere, yellow background. Torus rotating around sphere erases to reveal black text underneath.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46565,
            "description": "Ends erasing that was started with <a href=\"#/p5/erase\">erase()</a>.\nThe <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n<a href=\"#/p5/blendMode\">blendMode()</a> settings will return to what they were\nprior to calling <a href=\"#/p5/erase\">erase()</a>.",
            "itemtype": "method",
            "name": "noErase",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbackground(235, 145, 15);\nnoStroke();\nfill(30, 45, 220);\nrect(30, 10, 10, 80);\nerase();\nellipse(50, 50, 60);\nnoErase();\nrect(70, 10, 10, 80);\n</code>\n</div>"
            ],
            "alt": "Orange background, with two tall blue rectangles. A centered ellipse erased the first blue rect but not the second.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46614,
            "description": "The default, two-dimensional renderer.",
            "itemtype": "property",
            "name": "P2D",
            "type": "String",
            "final": 1,
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 46620,
            "description": "One of the two render modes in p5.js: P2D (default renderer) and WEBGL\nEnables 3D render by introducing the third dimension: Z",
            "itemtype": "property",
            "name": "{Number} ALT",
            "type": "String",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, HALF_PI);\n</code></div>",
                "\n<div><code>\narc(50, 50, 80, 80, 0, PI);\n</code></div>",
                "\n<div><code>\narc(50, 50, 80, 80, 0, QUARTER_PI);\n</code></div>",
                "\n<div><code>\narc(50, 50, 80, 80, 0, TAU);\n</code></div>",
                "\n<div><code>\narc(50, 50, 80, 80, 0, TWO_PI);\n</code></div>",
                "\n<div class='norender'><code>\nfunction setup() {\n  angleMode(DEGREES);\n}\n</code></div>\n/ exports.TWO_PI = TWO_PI;\n         var DEGREES = 'degrees';\n         /**\nConstant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\np5.js interprates and calculates angles (either RADIANS or DEGREES).",
                "\n<div class='norender'><code>\nfunction setup() {\n  angleMode(RADIANS);\n}\n</code></div>\n/ exports.DEGREES = DEGREES;\n         var RADIANS = 'radians';\n         exports.RADIANS = RADIANS;\n         var DEG_TO_RAD = _PI / 180.0;\n         exports.DEG_TO_RAD = DEG_TO_RAD;\n         var RAD_TO_DEG = 180.0 / _PI;\n\n         // SHAPE\n         /**"
            ],
            "alt": "80x80 white ellipse shape in center of canvas.\n/ exports.TAU = TAU;\n         var TWO_PI = _PI * 2;\n         /**\nConstant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\np5.js interprates and calculates angles (either DEGREES or RADIANS).",
            "default": "butt\n/ exports.PROJECT = PROJECT;\n         var SQUARE = 'butt';\n         /**",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "p5.js",
            "line": 47440,
            "description": "The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the\nnumber of frames that have been displayed since the program started. Inside\n<a href=\"#/p5/setup\">setup()</a> the value is 0, after the first iteration\nof draw it is 1, etc.",
            "itemtype": "property",
            "name": "frameCount",
            "type": "Integer",
            "readonly": "",
            "example": [
                "\n<div><code>\nfunction setup() {\n  frameRate(30);\n  textSize(30);\n  textAlign(CENTER);\n}\n\nfunction draw() {\n  background(200);\n  text(frameCount, width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "numbers rapidly counting upward with frame count set to 30.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47467,
            "description": "The system variable <a href=\"#/p5/deltaTime\">deltaTime</a> contains the time\ndifference between the beginning of the previous frame and the beginning\nof the current frame in milliseconds.\n\nThis variable is useful for creating time sensitive animation or physics\ncalculation that should stay constant regardless of frame rate.",
            "itemtype": "property",
            "name": "deltaTime",
            "type": "Integer",
            "readonly": "",
            "example": [
                "\n<div><code>\nlet rectX = 0;\nlet fr = 30; //starting FPS\nlet clr;\n\nfunction setup() {\n  background(200);\n  frameRate(fr); // Attempt to refresh at starting FPS\n  clr = color(255, 0, 0);\n}\n\nfunction draw() {\n  background(200);\n  rectX = rectX + 1 * (deltaTime / 50); // Move Rectangle in relation to deltaTime\n\n  if (rectX >= width) {\n    // If you go off screen.\n    if (fr === 30) {\n      clr = color(0, 0, 255);\n      fr = 10;\n      frameRate(fr); // make frameRate 10 FPS\n    } else {\n      clr = color(255, 0, 0);\n      fr = 30;\n      frameRate(fr); // make frameRate 30 FPS\n    }\n    rectX = 0;\n  }\n  fill(clr);\n  rect(rectX, 40, 20, 20);\n}\n</code></div>"
            ],
            "alt": "red rect moves left to right, followed by blue rect moving at the same speed\nwith a lower frame rate. Loops.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47517,
            "description": "Confirms if the window a p5.js program is in is \"focused,\" meaning that\nthe sketch will accept mouse or keyboard input. This variable is\n\"true\" if the window is focused and \"false\" if not.",
            "itemtype": "property",
            "name": "focused",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div><code>\n// To demonstrate, put two windows side by side.\n// Click on the window that the p5 sketch isn't in!\nfunction draw() {\n  background(200);\n  noStroke();\n  fill(0, 200, 0);\n  ellipse(25, 25, 50, 50);\n\n  if (!focused) {\n                                          // or \"if (focused === false)\"\n    stroke(200, 0, 0);\n    line(0, 0, 100, 100);\n    line(100, 0, 0, 100);\n  }\n}\n</code></div>"
            ],
            "alt": "green 50x50 ellipse at top left. Red X covers canvas when page focus changes",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47548,
            "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. The values for parameters x and y\nmust be less than the dimensions of the image.",
            "itemtype": "method",
            "name": "cursor",
            "params": [
                {
                    "name": "type",
                    "description": "Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\n                              External: path for cursor's images\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n                              For more information on Native CSS cursors and url visit:\n                              https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",
                    "type": "String|Constant"
                },
                {
                    "name": "x",
                    "description": "the horizontal active spot of the cursor (must be less than 32)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the vertical active spot of the cursor (must be less than 32)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n// Move the mouse across the quadrants\n// to see the cursor change\nfunction draw() {\n  line(width / 2, 0, width / 2, height);\n  line(0, height / 2, width, height / 2);\n  if (mouseX < 50 && mouseY < 50) {\n    cursor(CROSS);\n  } else if (mouseX > 50 && mouseY < 50) {\n    cursor('progress');\n  } else if (mouseX > 50 && mouseY > 50) {\n    cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n  } else {\n    cursor('grab');\n  }\n}\n</code></div>"
            ],
            "alt": "canvas is divided into four quadrants. cursor on first is a cross, second is a progress,\nthird is a custom cursor using path to the cursor and fourth is a grab.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47616,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within \n<a href=\"#/p5/setup\">setup()</a> is recommended. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"), \nwhich is set to 60 frames per second on most computers. A frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth \nanimations. This is the same as setFrameRate(val).\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns\nthe current framerate. The draw function must run at least once before it will\nreturn a value. This is the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not\nof the type numbers or are non positive also returns current framerate.",
            "itemtype": "method",
            "name": "frameRate",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n<div><code>\nlet rectX = 0;\nlet fr = 30; //starting FPS\nlet clr;\n\nfunction setup() {\n  background(200);\n  frameRate(fr); // Attempt to refresh at starting FPS\n  clr = color(255, 0, 0);\n}\n\nfunction draw() {\n  background(200);\n  rectX = rectX += 1; // Move Rectangle\n\n  if (rectX >= width) {\n      // If you go off screen.\n    if (fr === 30) {\n      clr = color(0, 0, 255);\n      fr = 10;\n      frameRate(fr); // make frameRate 10 FPS\n    } else {\n      clr = color(255, 0, 0);\n      fr = 30;\n      frameRate(fr); // make frameRate 30 FPS\n    }\n    rectX = 0;\n  }\n  fill(clr);\n  rect(rectX, 40, 20, 20);\n}\n</code></div>"
            ],
            "alt": "blue rect moves left to right, followed by red rect moving faster. Loops.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47676,
            "itemtype": "method",
            "name": "frameRate",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47693,
            "description": "Returns the current framerate.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47703,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\nrecommended. The default rate is 60 frames per second.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47719,
            "description": "Hides the cursor from view.",
            "itemtype": "method",
            "name": "noCursor",
            "example": [
                "\n<div><code>\nfunction setup() {\n  noCursor();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(mouseX, mouseY, 10, 10);\n}\n</code></div>"
            ],
            "alt": "cursor becomes 10x 10 white ellipse the moves with mouse x and y.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47742,
            "description": "System variable that stores the width of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
            "itemtype": "property",
            "name": "displayWidth",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47760,
            "description": "System variable that stores the height of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
            "itemtype": "property",
            "name": "displayHeight",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47778,
            "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth.",
            "itemtype": "property",
            "name": "windowWidth",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47793,
            "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight.",
            "itemtype": "property",
            "name": "windowHeight",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47809,
            "description": "The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once\nevery time the browser window is resized. This is a good place to resize the\ncanvas or do any other adjustments to accommodate the new window size.",
            "itemtype": "method",
            "name": "windowResized",
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n  background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47863,
            "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47875,
            "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47887,
            "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow.",
            "itemtype": "method",
            "name": "fullscreen",
            "params": [
                {
                    "name": "val",
                    "description": "whether the sketch should be in fullscreen mode\nor not",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "current fullscreen state",
                "type": "Boolean"
            },
            "example": [
                "\n<div>\n<code>\n// Clicking in the box toggles fullscreen on and off.\nfunction setup() {\n  background(200);\n}\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    let fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n</code>\n</div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47937,
            "description": "Sets the pixel scaling for high pixel density displays. By default\npixel density is set to match display density, call pixelDensity(1)\nto turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\nthe current pixel density of the sketch.",
            "itemtype": "method",
            "name": "pixelDensity",
            "params": [
                {
                    "name": "val",
                    "description": "whether or how much the sketch should scale",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  pixelDensity(1);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  pixelDensity(3.0);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "fuzzy 50x50 white ellipse with black outline in center of canvas.\nsharp 50x50 white ellipse with black outline in center of canvas.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47973,
            "itemtype": "method",
            "name": "pixelDensity",
            "return": {
                "description": "current pixel density of the sketch",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 47992,
            "description": "Returns the pixel density of the current display the sketch is running on.",
            "itemtype": "method",
            "name": "displayDensity",
            "return": {
                "description": "current pixel density of the display",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  let density = displayDensity();\n  pixelDensity(density);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 white ellipse with black outline in center of canvas.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48049,
            "description": "Gets the current URL. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "url",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nlet url;\nlet x = 100;\n\nfunction setup() {\n  fill(0);\n  noStroke();\n  url = getURL();\n}\n\nfunction draw() {\n  background(200);\n  text(url, x, height / 2);\n  x--;\n}\n</code>\n</div>"
            ],
            "alt": "current url (http://p5js.org/reference/#/p5/getURL) moves right to left.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48082,
            "description": "Gets the current URL path as an array. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
            "itemtype": "method",
            "name": "getURLPath",
            "return": {
                "description": "path components",
                "type": "String[]"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  let urlPath = getURLPath();\n  for (let i = 0; i < urlPath.length; i++) {\n    text(urlPath[i], 10, i * 20 + 20);\n  }\n}\n</code></div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48107,
            "description": "Gets the current URL params as an Object. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using sketch the edtior's present or share URLs.",
            "itemtype": "method",
            "name": "getURLParams",
            "return": {
                "description": "URL params",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender notest'>\n<code>\n// Example: http://p5js.org?year=2014&month=May&day=15\n\nfunction setup() {\n  let params = getURLParams();\n  text(params.day, 10, 20);\n  text(params.month, 10, 40);\n  text(params.year, 10, 60);\n}\n</code>\n</div>"
            ],
            "alt": "This example does not render anything.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48386,
            "description": "Takes a message and a p5 function func, and adds a link pointing to\nthe reference documentation of func at the end of the message",
            "itemtype": "method",
            "name": "mapToReference",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "message",
                    "description": "the words to be said",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "the name of the function to link",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48418,
            "description": "Prints out a fancy, colorful message to the console log",
            "itemtype": "method",
            "name": "report",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "message",
                    "description": "the words to be said",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "the name of the function to link",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "CSS color string or error type",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "console logs"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48465,
            "description": "This is a generic method that can be called from anywhere in the p5\nlibrary to alert users to a common error.",
            "itemtype": "method",
            "name": "_friendlyError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "message",
                    "description": "message to be printed",
                    "type": "Number"
                },
                {
                    "name": "method",
                    "description": "name of method",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "CSS color string or error type (Optional)",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48479,
            "description": "This is called internally if there is a error with autoplay.",
            "itemtype": "method",
            "name": "_friendlyAutoplayError",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48496,
            "description": "An implementation of\nhttps://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm to\ncompute the Levenshtein distance. It gives a measure of how dissimilar\ntwo strings are. If the \"distance\" between them is small enough, it is\nreasonable to think that one is the misspelled version of the other.",
            "itemtype": "method",
            "name": "computeEditDistance",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w1",
                    "description": "the first word",
                    "type": "String"
                },
                {
                    "name": "w2",
                    "description": "the second word",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the \"distance\" between the two words, a smaller value\n                  indicates that the words are similar",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48547,
            "description": "checks if the various functions such as setup, draw, preload have been\ndefined with capitalization mistakes",
            "itemtype": "method",
            "name": "checkForUserDefinedFunctions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The current default context. It's set to window in\n\"global mode\" and to a p5 instance in \"instance mode\"",
                    "type": "*"
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48601,
            "description": "compares the the symbol caught in the ReferenceErrror to everything\nin misusedAtTopLevel ( all public p5 properties ). The use of\nmisusedAtTopLevel here is for convenience as it was an array that was\nalready defined when spelling check was implemented. For this particular\nuse-case, it's a misnomer.",
            "itemtype": "method",
            "name": "handleMisspelling",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "errSym",
                    "description": "the symbol to whose spelling to check",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "the ReferenceError object",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "a boolean value indicating if this error was likely due\nto a mis-spelling",
                "type": "Boolean"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48713,
            "description": "prints a friendly stacktrace which only includes user-written functions\nand is easier for newcomers to understand",
            "itemtype": "method",
            "name": "printFriendlyStack",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "friendlyStack",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48758,
            "description": "Takes a stacktrace array and filters out all frames that show internal p5\ndetails. It also uses this processed stack to figure out if the error\nerror happened internally within the library, and if the error was due to\na non-loadX() method being used in preload\n\"Internally\" here means that the error exact location of the error (the\ntop of the stack) is a piece of code write in the p5.js library (which may\nor may not have been called from the user's sketch)",
            "itemtype": "method",
            "name": "processStack",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "stacktrace",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array with two elements, [isInternal, friendlyStack]\nisInternal: a boolean indicating if the error happened internally\nfriendlyStack: the simplified stacktrace, with internal details filtered",
                "type": "Array"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 48898,
            "description": "The main function for handling global errors. Called when an error\nhappens and is responsible for detecting the type of error that\nhas happened and showing the appropriate message",
            "itemtype": "method",
            "name": "fesErrorMonitor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The object to extract error details from",
                    "type": "*"
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 49137,
            "description": "Prints out all the colors in the color pallete with white text.\nFor color blindness testing.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 49317,
            "requires": [
                "core\n\nThis file contains the part of the FES responsible for dealing with\nfile load errors\n/ if (typeof IS_MINIFIED !== 'undefined') {\n           _main.default._friendlyFileLoadError = function() {};\n         } else {\n           // mapping used by `_friendlyFileLoadError`\n           var fileLoadErrorCases = function fileLoadErrorCases(num",
                "filePath) {\n             var suggestion = (0",
                "_internationalization.translator)(\n               'fes.fileLoadError.suggestion'",
                "{\n                 filePath: filePath",
                "link: 'https://github.com/processing/p5.js/wiki/Local-server'\n               }\n             );\n\n             switch (num) {\n               case 0:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.image'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadImage'\n                 };\n\n               case 1:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.xml'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadXML'\n                 };\n\n               case 2:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.table'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadTable'\n                 };\n\n               case 3:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.strings'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadStrings'\n                 };\n\n               case 4:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.font'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadFont'\n                 };\n\n               case 5:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.json'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadJSON'\n                 };\n\n               case 6:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.bytes'",
                "{\n                       suggestion: suggestion\n                     }\n                   )",
                "method: 'loadBytes'\n                 };\n\n               case 7:\n                 return {\n                   message: (0",
                "_internationalization.translator)(\n                     'fes.fileLoadError.large'\n                   )",
                "method: 'loadX'\n                 };\n\n               case 8:\n                 return {\n                   message: (0",
                "_internationalization.translator)('fes.fileLoadError.gif')",
                "method: 'loadImage'\n                 };\n             }\n           };\n\n           /**\nThis is called internally if there is a error during file loading."
            ],
            "itemtype": "method",
            "name": "_friendlyFileLoadError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "errorType",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "filePath",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 49495,
            "description": "Given an Error object, extract the most information from it.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "object",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "of stack frames",
                "type": "Array"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 50527,
            "description": "Validates parameters\nparam  {String}               func    the name of the function\nparam  {Array}                args    user input arguments\n\nexample:\n const a;\n ellipse(10,10,a,5);\nconsole ouput:\n \"It looks like ellipse received an empty variable in spot #2.\"\n\nexample:\n ellipse(10,\"foo\",5,5);\nconsole output:\n \"ellipse was expecting a number for parameter #1,\n          received \"foo\" instead.\"",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 50669,
            "requires": [
                "constants\n/ function modeAdjust(a",
                "b",
                "c",
                "d",
                "mode) {\n           if (mode === constants.CORNER) {\n             return { x: a",
                "y: b",
                "w: c",
                "h: d };\n           } else if (mode === constants.CORNERS) {\n             return { x: a",
                "y: b",
                "w: c - a",
                "h: d - b };\n           } else if (mode === constants.RADIUS) {\n             return { x: a - c",
                "y: b - d",
                "w: 2 * c",
                "h: 2 * d };\n           } else if (mode === constants.CENTER) {\n             return { x: a - c * 0.5",
                "y: b - d * 0.5",
                "w: c",
                "h: d };\n           }\n         }\n         var _default = { modeAdjust: modeAdjust };\n         exports.default = _default;\n       }",
                "{ './constants': 48 }\n     ]",
                "56: [\n       function(_dereq_",
                "module",
                "exports) {\n         'use strict';\n         var _main = _interopRequireDefault(_dereq_('../core/main'));\n         var _internationalization = _dereq_('./internationalization');\n         function _interopRequireDefault(obj) {\n           return obj && obj.__esModule ? obj : { default: obj };\n         }\n\n         /**\n_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing"
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 50820,
            "description": "This is our i18next \"backend\" plugin. It tries to fetch languages\nfrom a CDN.\n/ var FetchResources = /*#__PURE__*/ (function() {\n           function FetchResources(services, options) {\n             _classCallCheck(this, FetchResources);\n             this.init(services, options);\n           }\n\n           // run fetch with a timeout. Automatically rejects on timeout\n           // default timeout = 2000 ms\n           _createClass(FetchResources, [\n             {\n               key: 'fetchWithTimeout',\n               value: function fetchWithTimeout(url, options) {\n                 var timeout =\n                   arguments.length > 2 && arguments[2] !== undefined\n                     ? arguments[2]\n                     : 2000;\n                 return Promise.race([\n                   fetch(url, options),\n                   new Promise(function(_, reject) {\n                     return setTimeout(function() {\n                       return reject(new Error('timeout'));\n                     }, timeout);\n                   })\n                 ]);\n               }\n             },\n             {\n               key: 'init',\n               value: function init(services) {\n                 var options =\n                   arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                 this.services = services;\n                 this.options = options;\n               }\n             },\n             {\n               key: 'read',\n               value: function read(language, namespace, callback) {\n                 var loadPath = this.options.loadPath;\n\n                 if (language === this.options.fallback) {\n                   // if the default language of the user is the same as our inbuilt fallback,\n                   // there's no need to fetch resources from the cdn. This won't actually\n                   // need to run when we use \"partialBundledLanguages\" in the init\n                   // function.\n                   callback(null, fallbackResources[language][namespace]);\n                 } else if (languages.includes(language)) {\n                   // The user's language is included in the list of languages\n                   // that we so far added translations for.\n\n                   var url = this.services.interpolator.interpolate(loadPath, {\n                     lng: language,\n                     ns: namespace\n                   });\n\n                   this.loadUrl(url, callback);\n                 } else {\n                   // We don't have translations for this language. i18next will use\n                   // the default language instead.\n                   callback('Not found', false);\n                 }\n               }\n             },\n             {\n               key: 'loadUrl',\n               value: function loadUrl(url, callback) {\n                 this.fetchWithTimeout(url)\n                   .then(\n                     function(response) {\n                       var ok = response.ok;\n\n                       if (!ok) {\n                         // caught in the catch() below\n                         throw new Error('failed loading '.concat(url));\n                       }\n                       return response.json();\n                     },\n                     function() {\n                       // caught in the catch() below\n                       throw new Error('failed loading '.concat(url));\n                     }\n                   )\n                   .then(function(data) {\n                     return callback(null, data);\n                   })\n                   .catch(callback);\n               }\n             }\n           ]);\n           return FetchResources;\n         })();\n\n         FetchResources.type = 'backend';\n\n         /**\nThis is our translation function. Give it a key and\nit will retreive the appropriate string\n(within supported languages) according to the\nuser's browser's language settings.",
            "itemtype": "method",
            "name": "translator",
            "params": [
                {
                    "name": "key",
                    "description": "a key that corresponds to a message in our translation files",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "values for use in the message under the given `key`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "message (with values inserted) in the user's browser language",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 51190,
            "description": "The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn't\nbe called again after its initial execution.\n\nNote: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\nfunctions, including <a href=\"#/p5/draw\">draw()</a>.",
            "itemtype": "method",
            "name": "setup",
            "example": [
                "\n<div><code>\nlet a = 0;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nfunction draw() {\n  rect(a++ % width, 10, 2, 80);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 51221,
            "description": "Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\nstill be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\nshould never be called explicitly.\n\nIt should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\n<a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\ncode inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\ninside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\n\nThe number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\nthe <a href=\"#/p5/frameRate\">frameRate()</a> function.\n\nThere can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\nexist if you want the code to run continuously, or to process events such\nas <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\nyour program, as shown in the above example.\n\nIt is important to note that the drawing coordinate system will be reset\nat the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\nwithin <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\nundone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\nover time. On the other hand, styling applied (ex: fill, stroke, etc) will\nremain in effect.",
            "itemtype": "method",
            "name": "draw",
            "example": [
                "\n<div><code>\nlet yPos = 0;\nfunction setup() {\n  // setup() runs once\n  frameRate(30);\n}\nfunction draw() {\n  // draw() loops forever, until stopped\n  background(204);\n  yPos = yPos - 1;\n  if (yPos < 0) {\n    yPos = height;\n  }\n  line(0, yPos, width, yPos);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 51576,
            "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it. While all functions and\nvariables and objects created by the p5 library will be removed, any\nother global variables created by your code will remain.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nfunction draw() {\n  ellipse(50, 50, 10, 10);\n}\n\nfunction mousePressed() {\n  remove(); // remove whole sketch on mouse press\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 51900,
            "description": "Allows for the friendly error system (FES) to be turned off when creating a sketch,\nwhich can give a significant boost to performance when needed.\nSee <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>\ndisabling the friendly error system</a>.",
            "itemtype": "property",
            "name": "disableFriendlyErrors",
            "type": "Boolean",
            "example": [
                "\n<div class=\"norender notest\"><code>\np5.disableFriendlyErrors = true;\n\nfunction setup() {\n  createCanvas(100, 50);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "p5.js",
            "line": 51996,
            "description": "Attaches the element to the parent specified. A way of setting\n the container for the element. Accepts either a string ID, DOM\n node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.\n For more ways to position the canvas, see the\n <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n positioning the canvas</a> wiki page.",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "parent",
                    "description": "the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n                         of desired parent element",
                    "type": "String|p5.Element|Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class=\"norender notest\"><code>\n // Add the following comment to html file.\n // &lt;div id=\"myContainer\">&lt;/div>\n// The js code\n let cnv = createCanvas(100, 100);\n cnv.parent('myContainer');\n </code></div>\n<div class='norender'><code>\n let div0 = createDiv('this is the parent');\n let div1 = createDiv('this is the child');\n div1.parent(div0); // use p5.Element\n </code></div>\n<div class='norender'><code>\n let div0 = createDiv('this is the parent');\n div0.id('apples');\n let div1 = createDiv('this is the child');\n div1.parent('apples'); // use id\n </code></div>\n<div class='norender notest'><code>\n let elt = document.getElementById('myParentDiv');\n let div1 = createDiv('this is the child');\n div1.parent(elt); // use element from page\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52042,
            "itemtype": "method",
            "name": "parent",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52063,
            "description": "Sets the ID of the element. If no ID argument is passed in, it instead\n returns the current ID of the element.\n Note that only one element can have a particular id in a page.\n The <a href=\"#/p5.Element/class\">.class()</a> function can be used\n to identify multiple elements with the same class name.",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n function setup() {\n   let cnv = createCanvas(100, 100);\n   // Assigns a CSS selector ID to\n   // the canvas element.\n   cnv.id('mycanvas');\n }\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52088,
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "the id of the element",
                "type": "String"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52103,
            "description": "Adds given class to the element. If no class argument is passed in, it\n instead returns a string containing the current class(es) of the element.",
            "itemtype": "method",
            "name": "class",
            "params": [
                {
                    "name": "class",
                    "description": "class to add",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n function setup() {\n   let cnv = createCanvas(100, 100);\n   // Assigns a CSS selector class 'small'\n   // to the canvas element.\n   cnv.class('small');\n }\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52125,
            "itemtype": "method",
            "name": "class",
            "return": {
                "description": "the class of the element",
                "type": "String"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52138,
            "description": "The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called\nonce after every time a mouse button is pressed over the element. Some mobile\nbrowsers may also trigger this event on a touch screen, if the user performs\na quick tap. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               pressed over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv, d, g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mousePressed(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any click anywhere\nfunction mousePressed() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52195,
            "description": "The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a\nmouse button is pressed twice over the element. This can be used to\nattach element and action specific event listeners.",
            "itemtype": "method",
            "name": "doubleClicked",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               double clicked over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nlet cnv, d, g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.doubleClicked(changeGray); // attach listener for\n  // canvas double click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any double click anywhere\nfunction doubleClicked() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is double clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52241,
            "description": "The <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called\nonce after every time a mouse wheel is scrolled over the element. This can\nbe used to attach element specific event listeners.\n\nThe function accepts a callback function as argument which will be executed\nwhen the `wheel` event is triggered on the element, the callback function is\npassed one argument `event`. The `event.deltaY` property returns negative\nvalues if the mouse wheel is rotated up or away from the user and positive\nin the other direction. The `event.deltaX` does the same as `event.deltaY`\nexcept it reads the horizontal wheel scroll of the mouse wheel.\n\nOn OS X with \"natural\" scrolling enabled, the `event.deltaY` values are\nreversed.",
            "itemtype": "method",
            "name": "mouseWheel",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               scrolled over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv, d, g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseWheel(changeSize); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with mousewheel movement\n// anywhere on screen\nfunction mouseWheel() {\n  g = g + 10;\n}\n\n// this function fires with mousewheel movement\n// over canvas only\nfunction changeSize(event) {\n  if (event.deltaY > 0) {\n    d = d + 10;\n  } else {\n    d = d - 10;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52303,
            "description": "The <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is\ncalled once after every time a mouse button is released over the element.\nSome mobile browsers may also trigger this event on a touch screen, if the\nuser performs a quick tap. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseReleased",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               released over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv, d, g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseReleased(changeGray); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires after the mouse has been\n// released\nfunction mouseReleased() {\n  d = d + 10;\n}\n\n// this function fires after the mouse has been\n// released while on canvas\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52352,
            "description": "The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is\ncalled once after a mouse button is pressed and released over the element.\nSome mobile browsers may also trigger this event on a touch screen, if the\nuser performs a quick tap.This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseClicked",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               clicked over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet cnv, d, g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseClicked(changeGray); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires after the mouse has been\n// clicked anywhere\nfunction mouseClicked() {\n  d = d + 10;\n}\n\n// this function fires after the mouse has been\n// clicked on canvas\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code>\n</div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52403,
            "description": "The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a\nmouse moves over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse moves\n                               over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet d = 30;\nlet g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseMoved(changeSize); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  fill(200);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires when mouse moves anywhere on\n// page\nfunction mouseMoved() {\n  g = g + 5;\n  if (g > 255) {\n    g = 0;\n  }\n}\n\n// this function fires when mouse moves over canvas\nfunction changeSize() {\n  d = d + 2;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52459,
            "description": "The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a\nmouse moves onto the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse moves\n                               onto the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet d;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseOver(changeGray);\n  d = 10;\n}\n\nfunction draw() {\n  ellipse(width / 2, height / 2, d, d);\n}\n\nfunction changeGray() {\n  d = d + 10;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52500,
            "description": "The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a\nmouse moves off the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOut",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse\n                               moves off of an element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet d;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseOut(changeGray);\n  d = 10;\n}\n\nfunction draw() {\n  ellipse(width / 2, height / 2, d, d);\n}\n\nfunction changeGray() {\n  d = d + 10;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52541,
            "description": "The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchStarted",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch\n                               starts over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet d;\nlet g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchStarted(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchStarted() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52588,
            "description": "The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch moves over\n                               the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchMoved(changeGray); // attach listener for\n  // canvas click only\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52627,
            "description": "The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchEnded",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch ends\n                               over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet cnv;\nlet d;\nlet g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchEnded(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchEnded() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52674,
            "description": "The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a\nfile is dragged over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a file is\n                               dragged over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\n// To test this sketch, simply drag a\n// file over the canvas\nfunction setup() {\n  let c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('Drag file', width / 2, height / 2);\n  c.dragOver(dragOverCallback);\n}\n\n// This function will be called whenever\n// a file is dragged over the canvas\nfunction dragOverCallback() {\n  background(240);\n  text('Dragged over', width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52712,
            "description": "The .dragLeave() function is called once after every time a\ndragged file leaves the element area. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragLeave",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a file is\n                               dragged off the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\n// To test this sketch, simply drag a file\n// over and then out of the canvas area\nfunction setup() {\n  let c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('Drag file', width / 2, height / 2);\n  c.dragLeave(dragLeaveCallback);\n}\n\n// This function will be called whenever\n// a file is dragged out of the canvas\nfunction dragLeaveCallback() {\n  background(240);\n  text('Dragged off', width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52776,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "p5.js",
            "line": 52970,
            "description": "Removes a Graphics object from the page and frees any resources\nassociated with it.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nlet bg;\nfunction setup() {\n  bg = createCanvas(100, 100);\n  bg.background(0);\n  image(bg, 0, 0);\n  bg.remove();\n}\n</code></div>\n\n<div><code>\nlet bg;\nfunction setup() {\n  pixelDensity(1);\n  createCanvas(100, 100);\n  stroke(255);\n  fill(0);\n\n  // create and draw the background image\n  bg = createGraphics(100, 100);\n  bg.background(200);\n  bg.ellipse(50, 50, 80, 80);\n}\nfunction draw() {\n  let t = millis() / 1000;\n  // draw the background\n  if (bg) {\n    image(bg, frameCount % 100, 0);\n    image(bg, frameCount % 100 - 100, 0);\n  }\n  // draw the foreground\n  let p = p5.Vector.fromAngle(t, 35).add(50, 50);\n  ellipse(p.x, p.y, 30);\n}\nfunction mouseClicked() {\n  // remove the background\n  if (bg) {\n    bg.remove();\n    bg = null;\n  }\n}\n</code></div>"
            ],
            "alt": "no image\na multi-colored circle moving back and forth over a scrolling background.",
            "class": "p5.Graphics",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 53195,
            "description": "Resize our canvas element.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 53465,
            "description": "Helper fxn to check font type (system or otf)",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 53521,
            "description": "Helper fxn to measure ascent and descent.\nAdapted from http://stackoverflow.com/a/25355178",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 53615,
            "description": "p5.Renderer2D\nThe 2D graphics canvas renderer class.\nextends p5.Renderer",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 54026,
            "description": "Generate a cubic Bezier representing an arc on the unit circle of total\nangle `size` radians, beginning `start` radians above the x-axis. Up to\nfour of these curves are combined to make a full arc.\n\nSee www.joecridge.me/bezier.pdf for an explanation of the method.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55177,
            "description": "Creates a canvas element in the document, and sets the dimensions of it\nin pixels. This method should be called only once at the start of setup.\nCalling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a\nsketch will result in very unpredictable behavior. If you want more than\none drawing canvas you could use <a href=\"#/p5/createGraphics\">createGraphics</a>\n(hidden by default but it can be shown).\n\nImportant note: in 2D mode (i.e. when `p5.Renderer` is not set) the origin (0,0)\nis positioned at the top left of the screen. In 3D mode (i.e. when `p5.Renderer`\nis set to `WEBGL`), the origin is positioned at the center of the canvas.\nSee [this issue](https://github.com/processing/p5.js/issues/1545) for more information.\n\nThe system variables width and height are set by the parameters passed to this\nfunction. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the\nwindow will be given a default size of 100x100 pixels.\n\nFor more ways to position the canvas, see the\n<a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\npositioning the canvas</a> wiki page.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "either P2D or WEBGL",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Renderer"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 50);\n  background(153);\n  line(0, 0, width, height);\n}\n</code>\n</div>"
            ],
            "alt": "Black line extending from top-left of canvas to bottom right.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55289,
            "description": "Resizes the canvas to given width and height. The canvas will be cleared\nand draw will be called immediately, allowing the sketch to re-render itself\nin the resized canvas.",
            "itemtype": "method",
            "name": "resizeCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                },
                {
                    "name": "noRedraw",
                    "description": "don't redraw the canvas immediately",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n  background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "alt": "No image displayed.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55347,
            "description": "Removes the default canvas for a p5 sketch that doesn't require a canvas",
            "itemtype": "method",
            "name": "noCanvas",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  noCanvas();\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55368,
            "description": "Creates and returns a new p5.Renderer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels.",
            "itemtype": "method",
            "name": "createGraphics",
            "params": [
                {
                    "name": "w",
                    "description": "width of the offscreen graphics buffer",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the offscreen graphics buffer",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "either P2D or WEBGL\n                              undefined defaults to p2d",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "offscreen graphics buffer",
                "type": "p5.Graphics"
            },
            "example": [
                "\n<div>\n<code>\nlet pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(100, 100);\n}\n\nfunction draw() {\n  background(200);\n  pg.background(100);\n  pg.noStroke();\n  pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\n  image(pg, 50, 50);\n  image(pg, 0, 0, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "4 grey squares alternating light and dark grey. White quarter circle mid-left.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55407,
            "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. <b>This is the default blending mode.</b></li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks. <em>(2D)</em></li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights. <em>(2D)</em></li>\n<li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n</ul>\n\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.",
            "itemtype": "method",
            "name": "blendMode",
            "params": [
                {
                    "name": "mode",
                    "description": "blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nblendMode(LIGHTEST);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>\n\n<div>\n<code>\nblendMode(MULTIPLY);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>"
            ],
            "alt": "translucent image thick red & blue diagonal rounded lines intersecting center\nThick red & blue diagonal rounded lines intersecting center. dark at overlap",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 55820,
            "description": "Draws an ellipse (oval) to the screen. By default, the first two parameters\nset the location of the center of the ellipse, and the third and fourth\nparameters set the shape's width and height. If no height is specified, the\nvalue of width is used for both the width and height. If a negative height or\nwidth is specified, the absolute value is taken.\n\nAn ellipse with equal width and height is a circle.The origin may be changed\nwith the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the center of ellipse.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the center of ellipse.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the ellipse.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nellipse(56, 46, 55, 55);\n</code>\n</div>"
            ],
            "alt": "white ellipse with black outline in middle-right of canvas that is 55x55",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 55847,
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "detail",
                    "description": "number of radial sectors to draw (for WebGL mode)",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 55860,
            "description": "Draws a circle to the screen. A circle is a simple closed shape. It is the set\nof all points in a plane that are at a given distance from a given point,\nthe centre. This function is a special case of the ellipse() function, where\nthe width and height of the ellipse are the same. Height and width of the\nellipse correspond to the diameter of the circle. By default, the first two\nparameters set the location of the centre of the circle, the third sets the\ndiameter of the circle.",
            "itemtype": "method",
            "name": "circle",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the centre of the circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the centre of the circle.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "diameter of the circle.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Draw a circle at location (30, 30) with a diameter of 20.\ncircle(30, 30, 20);\n</code>\n</div>"
            ],
            "alt": "white circle with black outline in mid of canvas that is 55x55.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 55924,
            "description": "Draws a line (a direct path between two points) to the screen. If called with\nonly 4 parameters, it will draw a line in 2D with a default width of 1 pixel.\nThis width can be modified by using the <a href=\"#/p5/strokeWeight\">\nstrokeWeight()</a> function. A line cannot be filled, therefore the <a\nhref=\"#/p5/fill\">fill()</a> function will not affect the color of a line. So to\ncolor a line, use the <a href=\"#/p5/stroke\">stroke()</a> function.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nline(30, 20, 85, 75);\n</code>\n</div>\n\n<div>\n<code>\nline(30, 20, 85, 20);\nstroke(126);\nline(85, 20, 85, 75);\nstroke(255);\nline(85, 75, 30, 75);\n</code>\n</div>"
            ],
            "alt": "An example showing a line 78 pixels long running from mid-top to bottom-right of canvas.\nAn example showing 3 lines of various stroke sizes. Form top, bottom and right sides of a square.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 55960,
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "the z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "the z-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 55993,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nparam is the vertical value for the point. The color of the point is\nchanged with the <a href=\"#/p5/stroke\">stroke()</a> function. The size of the point\ncan be changed with the <a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "x",
                    "description": "the x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z-coordinate (for WebGL mode)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\npoint(30, 20);\npoint(85, 20);\npoint(85, 75);\npoint(30, 75);\n</code>\n</div>\n\n<div>\n<code>\npoint(30, 20);\npoint(85, 20);\nstroke('purple'); // Change the color\nstrokeWeight(10); // Make the points 10 pixels in size\npoint(85, 75);\npoint(30, 75);\n</code>\n</div>\n\n<div>\n<code>\nlet a = createVector(10, 10);\npoint(a);\nlet b = createVector(10, 20);\npoint(b);\npoint(createVector(20, 10));\npoint(createVector(20, 20));\n</code>\n</div>"
            ],
            "alt": "4 points centered in the middle-right of the canvas.\n2 large points and 2 large purple points centered in the middle-right of the canvas.\nVertices of a square of length 10 pixels towards the top-left of the canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56043,
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "coordinate_vector",
                    "description": "the coordinate vector",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56074,
            "description": "Draws a quad on the canvas. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape.\nz-arguments only work when quad() is used in WEBGL mode.",
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "the x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "the y-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "the x-coordinate of the fourth point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "the y-coordinate of the fourth point",
                    "type": "Number"
                },
                {
                    "name": "detailX",
                    "description": "number of segments in the x-direction",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in the y-direction",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nquad(38, 31, 86, 20, 69, 63, 30, 76);\n</code>\n</div>"
            ],
            "alt": "irregular white quadrilateral shape with black outline mid-right of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56104,
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "the z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "the z-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "the z-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "the z-coordinate of the fourth point",
                    "type": "Number"
                },
                {
                    "name": "detailX",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56156,
            "description": "Draws a rectangle on the canvas. A rectangle is a four-sided closed shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, may be\nchanged with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n\nThe fifth, sixth, seventh and eighth parameters, if specified,\ndetermine corner radius for the top-left, top-right, lower-right and\nlower-left corners, respectively. An omitted corner radius parameter is set\nto the value of the previously specified radius value in the parameter list.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the rectangle.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tl",
                    "description": "optional radius of top-left corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tr",
                    "description": "optional radius of top-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "br",
                    "description": "optional radius of bottom-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bl",
                    "description": "optional radius of bottom-left corner.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Draw a rectangle at location (30, 20) with a width and height of 55.\nrect(30, 20, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners, each having a radius of 20.\nrect(30, 20, 55, 55, 20);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners having the following radii:\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\nrect(30, 20, 55, 55, 20, 15, 10, 5);\n</code>\n</div>"
            ],
            "alt": "55x55 white rect with black outline in mid-right of canvas.\n55x55 white rect with black outline and rounded edges in mid-right of canvas.\n55x55 white rect with black outline and rounded edges of different radii.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56207,
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "detailX",
                    "description": "number of segments in the x-direction (for WebGL mode)",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in the y-direction (for WebGL mode)",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56222,
            "description": "Draws a square to the screen. A square is a four-sided shape with every angle\nat ninety degrees, and equal side size. This function is a special case of the\nrect() function, where the width and height are the same, and the parameter\nis called \"s\" for side size. By default, the first two parameters set the\nlocation of the upper-left corner, the third sets the side size of the square.\nThe way these parameters are interpreted, may be changed with the <a\nhref=\"#/p5/rectMode\">rectMode()</a> function.\n\nThe fourth, fifth, sixth and seventh parameters, if specified,\ndetermine corner radius for the top-left, top-right, lower-right and\nlower-left corners, respectively. An omitted corner radius parameter is set\nto the value of the previously specified radius value in the parameter list.",
            "itemtype": "method",
            "name": "square",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the square.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the square.",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "side size of the square.",
                    "type": "Number"
                },
                {
                    "name": "tl",
                    "description": "optional radius of top-left corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tr",
                    "description": "optional radius of top-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "br",
                    "description": "optional radius of bottom-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bl",
                    "description": "optional radius of bottom-left corner.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Draw a square at location (30, 20) with a side size of 55.\nsquare(30, 20, 55);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a square with rounded corners, each having a radius of 20.\nsquare(30, 20, 55, 20);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a square with rounded corners having the following radii:\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\nsquare(30, 20, 55, 20, 15, 10, 5);\n</code>\n</div>"
            ],
            "alt": "55x55 white square with black outline in mid-right of canvas.\n55x55 white square with black outline and rounded edges in mid-right of canvas.\n55x55 white square with black outline and rounded edges of different radii.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56311,
            "description": "Draws a triangle to the canvas. A triangle is a plane created by connecting\nthree points. The first two arguments specify the first point, the middle two\narguments specify the second point, and the last two arguments specify the\nthird point.",
            "itemtype": "method",
            "name": "triangle",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate of the third point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntriangle(30, 75, 58, 20, 86, 75);\n</code>\n</div>"
            ],
            "alt": "white triangle with black outline in mid-right of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "p5.js",
            "line": 56544,
            "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\n\nThe default mode is CORNER, which interprets the first two parameters as the\nupper-left corner of the shape, while the third and fourth parameters are its\nwidth and height.\n\nrectMode(CORNERS) interprets the first two parameters as the location of\none of the corners, and the third and fourth parameters as the location of\nthe diagonally opposite corner. Note, the rectangle is drawn between the\ncoordinates, so it is not neccesary that the first corner be the upper left\ncorner.\n\nrectMode(CENTER) interprets the first two parameters as the shape's center\npoint, while the third and fourth parameters are its width and height.\n\nrectMode(RADIUS) also uses the first two parameters as the shape's center\npoint, but uses the third and fourth parameters to specify half of the shape's\nwidth and height respectively.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrectMode(CORNER);\nfill(255);\nrect(25, 25, 50, 50); // Draw white rectangle using CORNER mode\n\nrectMode(CORNERS);\nfill(100);\nrect(25, 25, 50, 50); // Draw gray rectangle using CORNERS mode\n</code>\n</div>\n\n<div>\n<code>\nrectMode(RADIUS);\nfill(255);\nrect(50, 50, 30, 30); // Draw white rectangle using RADIUS mode\n\nrectMode(CENTER);\nfill(100);\nrect(50, 50, 30, 30); // Draw gray rectangle using CENTER mode\n</code>\n</div>"
            ],
            "alt": "50x50 white rect at center and 25x25 grey rect in the top left of the other.\n50x50 white rect at center and 25x25 grey rect in the center of the other.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 56613,
            "description": "Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\nimprove image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\ndefault in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\nimages, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\nsmooth (antialiased) edges on your geometry.",
            "itemtype": "method",
            "name": "smooth",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "alt": "2 pixelated 36x36 white ellipses one left one right of center. On black.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 56648,
            "description": "Sets the style for rendering line endings. These ends are either rounded,\nsquared or extended, each of which specified with the corresponding\nparameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
            "itemtype": "method",
            "name": "strokeCap",
            "params": [
                {
                    "name": "cap",
                    "description": "either ROUND, SQUARE or PROJECT",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Example of different strokeCaps\nstrokeWeight(12.0);\nstrokeCap(ROUND);\nline(20, 30, 80, 30);\nstrokeCap(SQUARE);\nline(20, 50, 80, 50);\nstrokeCap(PROJECT);\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "alt": "3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 56688,
            "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled or rounded and specified with the\ncorresponding parameters MITER, BEVEL and ROUND. The default joint is\nMITER.\n\nThe parameter to this method must be written in ALL CAPS because they are\npredefined as constants in ALL CAPS and Javascript is a case-sensitive language.",
            "itemtype": "method",
            "name": "strokeJoin",
            "params": [
                {
                    "name": "join",
                    "description": "either MITER, BEVEL, ROUND",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Example of MITER type of joints\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\n// Example of BEVEL type of joints\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\n// Example of ROUND type of joints\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Right-facing arrowhead shape with pointed tip in center of canvas.\nRight-facing arrowhead shape with flat tip in center of canvas.\nRight-facing arrowhead shape with rounded tip in center of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 56760,
            "description": "Sets the width of the stroke used for lines, points and the border around\nshapes. All widths are set in units of pixels.",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "the weight of the stroke (in pixels)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Example of different stroke weights\nstrokeWeight(1); // Default\nline(20, 20, 80, 20);\nstrokeWeight(4); // Thicker\nline(20, 40, 80, 40);\nstrokeWeight(10); // Beastly\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "alt": "3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 56933,
            "description": "Given the x or y co-ordinate values of control and anchor points of a bezier\ncurve, it evaluates the x or y coordinate of the bezier at position t. The\nparameters a and d are the x or y coordinates of first and last points on the\ncurve while b and c are of the control points.The final parameter t is the\nposition of the resultant point which is given between 0 and 1.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
            "itemtype": "method",
            "name": "bezierPoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the value of the Bezier at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nlet x1 = 85,\n    x2 = 10,\n    x3 = 90,\n    x4 = 15;\nlet y1 = 20,\n    y2 = 10,\n    y3 = 90,\n    y4 = 80;\nbezier(x1, y1, x2, y2, x3, y3, x4, y4);\nfill(255);\nlet steps = 10;\nfor (let i = 0; i <= steps; i++) {\n  let t = i / steps;\n  let x = bezierPoint(x1, x2, x3, x4, t);\n  let y = bezierPoint(y1, y2, y3, y4, t);\n  circle(x, y, 5);\n}\n</code>\n</div>"
            ],
            "alt": "10 points plotted on a given bezier at equal distances.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 56988,
            "description": "Evaluates the tangent to the Bezier at position t for points a, b, c, d.\nThe parameters a and d are the first and last points\non the curve, and b and c are the control points.\nThe final parameter t varies between 0 and 1.",
            "itemtype": "method",
            "name": "bezierTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nlet steps = 6;\nfill(255);\nfor (let i = 0; i <= steps; i++) {\n  let t = i / steps;\n  // Get the location of the point\n  let x = bezierPoint(85, 10, 90, 15, t);\n  let y = bezierPoint(20, 10, 90, 80, t);\n  // Get the tangent points\n  let tx = bezierTangent(85, 10, 90, 15, t);\n  let ty = bezierTangent(20, 10, 90, 80, t);\n  // Calculate an angle from the tangent points\n  let a = atan2(ty, tx);\n  a += PI;\n  stroke(255, 102, 0);\n  line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\n  // The following line of code makes a line\n  // inverse of the above line\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n  stroke(0);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nstroke(255, 102, 0);\nlet steps = 16;\nfor (let i = 0; i <= steps; i++) {\n  let t = i / steps;\n  let x = bezierPoint(85, 10, 90, 15, t);\n  let y = bezierPoint(20, 10, 90, 80, t);\n  let tx = bezierTangent(85, 10, 90, 15, t);\n  let ty = bezierTangent(20, 10, 90, 80, t);\n  let a = atan2(ty, tx);\n  a -= HALF_PI;\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}\n</code>\n</div>"
            ],
            "alt": "s-shaped line with 6 short orange lines showing the tangents at those points.\ns-shaped line with 6 short orange lines showing lines coming out the underside of the bezier.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57067,
            "description": "Draws a curved line on the screen between two points, given as the\nmiddle four parameters. The first two parameters are a control point, as\nif the curve came from this point even though it's not drawn. The last\ntwo parameters similarly describe the other control point. <br /><br />\nLonger curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\ntogether or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\n<a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\nThe <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.",
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the ending control point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\nstroke(0);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nstroke(255, 102, 0);\ncurve(73, 24, 73, 61, 15, 65, 15, 65);\n</code>\n</div>\n\n<div>\n<code>\n// Define the curve points as JavaScript objects\nlet p1 = { x: 5, y: 26 };\nlet p2 = { x: 73, y: 24 };\nlet p3 = { x: 73, y: 61 };\nlet p4 = { x: 15, y: 65 };\nnoFill();\nstroke(255, 102, 0);\ncurve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\nstroke(0);\ncurve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\nstroke(255, 102, 0);\ncurve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\nstroke(0);\ncurve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\nstroke(255, 102, 0);\ncurve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);\n</code>\n</div>"
            ],
            "alt": "horseshoe shape with orange ends facing left and black curved center.\nhorseshoe shape with orange ends facing left and black curved center.\ncurving black and orange lines.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57135,
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57169,
            "description": "Sets the resolution at which curves display. The default value is 20 while\nthe minimum value is 3.\n\nThis function is only useful when using the WEBGL renderer\nas the default canvas renderer does not use this\ninformation.",
            "itemtype": "method",
            "name": "curveDetail",
            "params": [
                {
                    "name": "resolution",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  curveDetail(5);\n}\nfunction draw() {\n  background(200);\n\n  curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\n}\n</code>\n</div>"
            ],
            "alt": "white arch shape with a low level of curve detail.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57209,
            "description": "Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a>\nand <a href=\"#/p5/curveVertex\">curveVertex()</a>.The parameter tightness\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value for tightness (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
            "itemtype": "method",
            "name": "curveTightness",
            "params": [
                {
                    "name": "amount",
                    "description": "amount of deformation from the original vertices",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Move the mouse left and right to see the curve change\nfunction setup() {\n  createCanvas(100, 100);\n  noFill();\n}\n\nfunction draw() {\n  background(204);\n  let t = map(mouseX, 0, width, -5, 5);\n  curveTightness(t);\n  beginShape();\n  curveVertex(10, 26);\n  curveVertex(10, 26);\n  curveVertex(83, 24);\n  curveVertex(83, 61);\n  curveVertex(25, 65);\n  curveVertex(25, 65);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "Line shaped like right-facing arrow,points move with mouse-x and warp shape.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57255,
            "description": "Evaluates the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are control points\nof the curve, and b and c are the start and end points of the curve.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
            "itemtype": "method",
            "name": "curvePoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first control point of the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "bezier value at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nfill(255);\nellipseMode(CENTER);\nlet steps = 6;\nfor (let i = 0; i <= steps; i++) {\n  let t = i / steps;\n  let x = curvePoint(5, 5, 73, 73, t);\n  let y = curvePoint(26, 26, 24, 61, t);\n  ellipse(x, y, 5, 5);\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\nline hooking down to right-bottom with 13 5x5 white ellipse points"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57304,
            "description": "Evaluates the tangent to the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points on the curve,\nand b and c are the control points.",
            "itemtype": "method",
            "name": "curveTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second conrol point",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nlet steps = 6;\nfor (let i = 0; i <= steps; i++) {\n  let t = i / steps;\n  let x = curvePoint(5, 73, 73, 15, t);\n  let y = curvePoint(26, 24, 61, 65, t);\n  //ellipse(x, y, 5, 5);\n  let tx = curveTangent(5, 73, 73, 15, t);\n  let ty = curveTangent(26, 24, 61, 65, t);\n  let a = atan2(ty, tx);\n  a -= PI / 2.0;\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}\n</code>\n</div>"
            ],
            "alt": "right curving line mid-right of canvas with 7 short lines radiating from it.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "p5.js",
            "line": 57489,
            "description": "Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\ncomplex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\n<a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.\n\nThe parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\nTRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, and TESS (WebGL only). After calling the\n<a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\ndrawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\ncurrent stroke color and filled with the fill color.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\n<a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "kind",
                    "description": "either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(LINES);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLES);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_STRIP);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nvertex(90, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_FAN);\nvertex(57.5, 50);\nvertex(57.5, 15);\nvertex(92, 50);\nvertex(57.5, 85);\nvertex(22, 50);\nvertex(57.5, 15);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUADS);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 75);\nvertex(50, 20);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 75);\nvertex(85, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUAD_STRIP);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 20);\nvertex(50, 75);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 20);\nvertex(85, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(20, 20);\nvertex(40, 20);\nvertex(40, 40);\nvertex(60, 40);\nvertex(60, 60);\nvertex(20, 60);\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white square-shape with black outline in middle-right of canvas.\n4 black points in a square shape in middle-right of canvas.\n2 horizontal black lines. In the top-right and bottom-right of canvas.\n3 line shape with horizontal on top, vertical in middle and horizontal bottom.\nsquare line shape in middle-right of canvas.\n2 white triangle shapes mid-right canvas. left one pointing up and right down.\n5 horizontal interlocking and alternating white triangles in mid-right canvas.\n4 interlocking white triangles in 45 degree rotated square-shape.\n2 white rectangle shapes in mid-right canvas. Both 20x55.\n3 side-by-side white rectangles center rect is smaller in mid-right canvas.\nThick white l-shape with black outline mid-top-left of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 57693,
            "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. For WebGL mode bezierVertex() can be used in 2D\nas well as 3D mode. 2D mode expects 6 parameters, while 3D mode\nexpects 9 parameters (including z coordinates).\n\nThe first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\ncall, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\npoint. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nbezierVertex(50, 80, 60, 25, 30, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n  point(-25, 30);\n  point(25, 30);\n  point(25, -30);\n  point(-25, -30);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  vertex(-25, 30);\n  bezierVertex(25, 30, 25, -30, -25, -30);\n  endShape();\n\n  beginShape();\n  vertex(-25, 30, 20);\n  bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "crescent-shaped line in middle of canvas. Points facing left.\nwhite crescent shape in middle of canvas. Points facing left.\ncrescent shape in middle of canvas with another crescent shape on positive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 57775,
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the anchor point (for WebGL mode)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 57826,
            "description": "Specifies vertex coordinates for curves. This function may only\nbe used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\nis no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\nFor WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n2D mode expects 2 parameters, while 3D mode expects 3 parameters.\n\nThe first and last points in a series of curveVertex() lines will be used to\nguide the beginning and end of a the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with curveVertex() will draw\nthe curve between the second, third, and fourth points. The\ncurveVertex() function is an implementation of Catmull-Rom\nsplines.",
            "itemtype": "method",
            "name": "curveVertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(5);\npoint(84, 91);\npoint(68, 19);\npoint(21, 17);\npoint(32, 91);\nstrokeWeight(1);\n\nnoFill();\nbeginShape();\ncurveVertex(84, 91);\ncurveVertex(84, 91);\ncurveVertex(68, 19);\ncurveVertex(21, 17);\ncurveVertex(32, 91);\ncurveVertex(32, 91);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Upside-down u-shape line, mid canvas. left point extends beyond canvas view.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 57871,
            "itemtype": "method",
            "name": "curveVertex",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the vertex (for WebGL mode)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n\n  point(-25, 25);\n  point(-25, 25);\n  point(-25, -25);\n  point(25, -25);\n  point(25, 25);\n  point(25, 25);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  curveVertex(-25, 25);\n  curveVertex(-25, 25);\n  curveVertex(-25, -25);\n  curveVertex(25, -25);\n  curveVertex(25, 25);\n  curveVertex(25, 25);\n  endShape();\n\n  beginShape();\n  curveVertex(-25, 25, 20);\n  curveVertex(-25, 25, 20);\n  curveVertex(-25, -25, 20);\n  curveVertex(25, -25, 20);\n  curveVertex(25, 25, 20);\n  curveVertex(25, 25, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "Upside-down u-shape line, mid canvas with the same shape in positive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 57943,
            "description": "Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\nshapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.",
            "itemtype": "method",
            "name": "endContour",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white rect and smaller grey rect with red outlines in center of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58002,
            "description": "The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\ncalled after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endShape()</a> is called, all of image data\ndefined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endShape",
            "params": [
                {
                    "name": "mode",
                    "description": "use CLOSE to close the shape",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\n\nbeginShape();\nvertex(20, 20);\nvertex(45, 20);\nvertex(45, 80);\nendShape(CLOSE);\n\nbeginShape();\nvertex(50, 20);\nvertex(75, 20);\nvertex(75, 80);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Triangle line shape with smallest interior angle on bottom and upside-down L.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58087,
            "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\nmust be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\nFor WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n2D mode expects 4 parameters, while 3D mode expects 6 parameters\n(including z coordinates).\n\nThis function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "x-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nstrokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\npoint(20, 80);\npoint(80, 80);\npoint(80, 60);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nquadraticVertex(20, 80, 80, 80);\nvertex(80, 60);\nendShape();\n</code>\n</div>"
            ],
            "alt": "arched-shaped black line with 4 pixel thick stroke weight.\nbackwards s-shaped black line with 4 pixel thick stroke weight.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58152,
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cz",
                    "description": "z-coordinate for the control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the anchor point (for WebGL mode)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n\n  point(-35, -35);\n  point(35, -35);\n  point(0, 0);\n  point(-35, 35);\n  point(35, 35);\n  point(35, 10);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  vertex(-35, -35);\n  quadraticVertex(35, -35, 0, 0);\n  quadraticVertex(-35, 35, 35, 35);\n  vertex(35, 10);\n  endShape();\n\n  beginShape();\n  vertex(-35, -35, 20);\n  quadraticVertex(35, -35, 20, 0, 0, 20);\n  quadraticVertex(-35, 35, 20, 35, 35, 20);\n  vertex(35, 10, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "backwards s-shaped black line with the same s-shaped line in postive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58256,
            "description": "All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions.",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(3);\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\ncreateCanvas(100, 100, WEBGL);\nbackground(240, 240, 240);\nfill(237, 34, 93);\nnoStroke();\nbeginShape();\nvertex(0, 35);\nvertex(35, 0);\nvertex(0, -35);\nvertex(-35, 0);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\ncreateCanvas(100, 100, WEBGL);\nbackground(240, 240, 240);\nfill(237, 34, 93);\nnoStroke();\nbeginShape();\nvertex(-10, 10);\nvertex(0, 35);\nvertex(10, 10);\nvertex(35, 0);\nvertex(10, -8);\nvertex(0, -35);\nvertex(-10, -8);\nvertex(-35, 0);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nstrokeWeight(3);\nstroke(237, 34, 93);\nbeginShape(LINES);\nvertex(10, 35);\nvertex(90, 35);\nvertex(10, 65);\nvertex(90, 65);\nvertex(35, 10);\nvertex(35, 90);\nvertex(65, 10);\nvertex(65, 90);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\n// Click to change the number of sides.\n// In WebGL mode, custom shapes will only\n// display hollow fill sections when\n// all calls to vertex() use the same z-value.\n\nlet sides = 3;\nlet angle, px, py;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n  fill(237, 34, 93);\n  strokeWeight(3);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateZ(frameCount * 0.01);\n  ngon(sides, 0, 0, 80);\n}\n\nfunction mouseClicked() {\n  if (sides > 6) {\n    sides = 3;\n  } else {\n    sides++;\n  }\n}\n\nfunction ngon(n, x, y, d) {\n  beginShape(TESS);\n  for (let i = 0; i < n + 1; i++) {\n    angle = TWO_PI / n * i;\n    px = x + sin(angle) * d / 2;\n    py = y - cos(angle) * d / 2;\n    vertex(px, py, 0);\n  }\n  for (let i = 0; i < n + 1; i++) {\n    angle = TWO_PI / n * i;\n    px = x + sin(angle) * d / 4;\n    py = y - cos(angle) * d / 4;\n    vertex(px, py, 0);\n  }\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "4 black points in a square shape in middle-right of canvas.\n4 points making a diamond shape.\n8 points making a star.\n8 points making 4 lines.\nA rotating 3D shape with a hollow section in the middle.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58387,
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "u",
                    "description": "the vertex's texture u-coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v",
                    "description": "the vertex's texture v-coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58469,
            "description": "shim for Uint8ClampedArray.slice\n(allows arrayCopy to work with pixels[])\nwith thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\nEnumerable set to false to protect for...in from\nUint8ClampedArray.prototype pollution.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58490,
            "description": "this is implementation of Object.assign() which is unavailable in\nIE11 and (non-Chrome) Android browsers.\nThe assign() method is used to copy the values of all enumerable\nown properties from one or more source objects to a target object.\nIt will return the target object.\nModified from https://github.com/ljharb/object.assign",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "p5.js",
            "line": 58686,
            "description": "By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously,\nexecuting the code within it. If the sketch is stopped with\n<a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>,\nisLooping() returns the current state for use within custom event handlers.",
            "itemtype": "method",
            "name": "isLooping",
            "example": [
                "\n<div>\n<code>\nlet checkbox, button, colBG, colFill;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  button = createButton('Colorize if loop()');\n  button.position(0, 120);\n  button.mousePressed(changeBG);\n\n  checkbox = createCheckbox('loop()', true);\n  checkbox.changed(checkLoop);\n\n  colBG = color(0);\n  colFill = color(255);\n}\n\nfunction changeBG() {\n  if (isLooping()) {\n    colBG = color(random(255), random(255), random(255));\n    colFill = color(random(255), random(255), random(255));\n  }\n}\n\nfunction checkLoop() {\n  if (this.checked()) {\n    loop();\n  } else {\n    noLoop();\n  }\n}\n\nfunction draw() {\n  background(colBG);\n  fill(colFill);\n  ellipse(frameCount % width, height / 2, 50);\n}\n</code>\n</div>"
            ],
            "alt": "Ellipse moves slowly from left. Checkbox toggles loop()/noLoop().\nButton colorizes sketch if isLooping().",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 58744,
            "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores these\nsettings. Note that these functions are always used together. They allow you to\nchange the style and transformation settings and later return to what you had.\nWhen a new state is started with <a href=\"#/p5/push\">push()</a>, it builds on\nthe current style and transform information. The <a href=\"#/p5/push\">push()</a>\nand <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)\n\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions:\n<a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/noFill\">noFill()</a>,\n<a href=\"#/p5/noStroke\">noStroke()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>,\n<a href=\"#/p5/tint\">tint()</a>,\n<a href=\"#/p5/noTint\">noTint()</a>,\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n<a href=\"#/p5/strokeCap\">strokeCap()</a>,\n<a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>,\n<a href=\"#/p5/rectMode\">rectMode()</a>,\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n<a href=\"#/p5/colorMode\">colorMode()</a>,\n<a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>,\n<a href=\"#/p5/textSize\">textSize()</a>,\n<a href=\"#/p5/textLeading\">textLeading()</a>,\n<a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n<a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>,\n<a href=\"#/p5/scale\">scale()</a>,\n<a href=\"#/p5/shearX\">shearX()</a>,\n<a href=\"#/p5/shearY\">shearY()</a>,\n<a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n\nIn WEBGL mode additional style settings are stored. These are controlled by the\nfollowing functions: <a href=\"#/p5/setCamera\">setCamera()</a>,\n<a href=\"#/p5/ambientLight\">ambientLight()</a>,\n<a href=\"#/p5/directionalLight\">directionalLight()</a>,\n<a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>,\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n<a href=\"#/p5/shininess\">shininess()</a>,\n<a href=\"#/p5/normalMaterial\">normalMaterial()</a>\nand <a href=\"#/p5/shader\">shader()</a>.",
            "itemtype": "method",
            "name": "push",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\ntranslate(50, 0);\nellipse(0, 50, 33, 33); // Middle circle\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>\n\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33); // Left-middle circle\n\npush(); // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33); // Right-middle circle\npop(); // Restore previous state\n\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>"
            ],
            "alt": "Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 58843,
            "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores\nthese settings. Note that these functions are always used together. They allow\nyou to change the style and transformation settings and later return to what\nyou had. When a new state is started with <a href=\"#/p5/push\">push()</a>, it\nbuilds on the current style and transform information. The <a href=\"#/p5/push\">push()</a>\nand <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)\n\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions:\n<a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/noFill\">noFill()</a>,\n<a href=\"#/p5/noStroke\">noStroke()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>,\n<a href=\"#/p5/tint\">tint()</a>,\n<a href=\"#/p5/noTint\">noTint()</a>,\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n<a href=\"#/p5/strokeCap\">strokeCap()</a>,\n<a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>,\n<a href=\"#/p5/rectMode\">rectMode()</a>,\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n<a href=\"#/p5/colorMode\">colorMode()</a>,\n<a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>,\n<a href=\"#/p5/textSize\">textSize()</a>,\n<a href=\"#/p5/textLeading\">textLeading()</a>,\n<a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n<a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>,\n<a href=\"#/p5/scale\">scale()</a>,\n<a href=\"#/p5/shearX\">shearX()</a>,\n<a href=\"#/p5/shearY\">shearY()</a>,\n<a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n\nIn WEBGL mode additional style settings are stored. These are controlled by\nthe following functions:\n<a href=\"#/p5/setCamera\">setCamera()</a>,\n<a href=\"#/p5/ambientLight\">ambientLight()</a>,\n<a href=\"#/p5/directionalLight\">directionalLight()</a>,\n<a href=\"#/p5/pointLight\">pointLight()</a>,\n<a href=\"#/p5/texture\">texture()</a>,\n<a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n<a href=\"#/p5/shininess\">shininess()</a>,\n<a href=\"#/p5/normalMaterial\">normalMaterial()</a> and\n<a href=\"#/p5/shader\">shader()</a>.",
            "itemtype": "method",
            "name": "pop",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\ntranslate(50, 0);\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(0, 50, 33, 33); // Middle circle\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>\n\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33); // Left-middle circle\n\npush(); // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33); // Right-middle circle\npop(); // Restore previous state\n\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>"
            ],
            "alt": "Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 58944,
            "description": "Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This\nfunction allows the program to update the display window only when necessary,\nfor example when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a>\nor <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\n\nIn structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a>\nwithin events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This\nis because <a href=\"#/p5/redraw\">redraw()</a> does not run\n<a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates\nan update is needed).\n\nThe <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when\ncalled inside <a href=\"#/p5/draw\">draw()</a>.To enable/disable animations,\nuse <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\n\nIn addition you can set the number of redraws per method call. Just\nadd an integer as single parameter for the number of redraws.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "n",
                    "description": "Redraw for n-times. The default value is 1.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nlet x = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n  noLoop();\n}\n\nfunction draw() {\n  background(204);\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  x += 1;\n  redraw();\n}\n</code>\n</div>\n\n<div class='norender'>\n<code>\nlet x = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n  noLoop();\n}\n\nfunction draw() {\n  background(204);\n  x += 1;\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  redraw(5);\n}\n</code>\n</div>"
            ],
            "alt": "black line on far left of canvas\nblack line on far left of canvas",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59050,
            "description": "The `p5()` constructor enables you to activate \"instance mode\" instead of normal\n\"global mode\". This is an advanced topic. A short description and example is\nincluded below. Please see\n<a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\">\nDan Shiffman's Coding Train video tutorial</a> or this\n<a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a>\nfor more info.\n\nBy default, all p5.js functions are in the global namespace (i.e. bound to the window\nobject), meaning you can call them simply `ellipse()`, `fill()`, etc. However, this\nmight be inconvenient if you are mixing with other JS libraries (synchronously or\nasynchronously) or writing long programs of your own. p5.js currently supports a\nway around this problem called \"instance mode\". In instance mode, all p5 functions\nare bound up in a single variable instead of polluting your global namespace.\n\nOptionally, you can specify a default container for the canvas and any other elements\nto append to with a second argument. You can give the ID of an element in your html,\nor an html node itself.\n\nNote that creating instances like this also allows you to have more than one p5 sketch on\na single web page, as they will each be wrapped up with their own set up variables. Of\ncourse, you could also use iframes to have multiple sketches in global mode.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "sketch",
                    "description": "a function containing a p5.js sketch",
                    "type": "Object"
                },
                {
                    "name": "node",
                    "description": "ID or pointer to HTML DOM node to contain sketch in",
                    "type": "String|Object"
                },
                {
                    "name": "a",
                    "description": "numbers which define the 2x3 matrix to be multiplied, or an array of numbers",
                    "type": "Number|Array"
                },
                {
                    "name": "b",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\nconst s = p => {\n  let x = 100;\n  let y = 100;\n\n  p.setup = function() {\n    p.createCanvas(700, 410);\n  };\n\n  p.draw = function() {\n    p.background(0);\n    p.fill(255);\n    p.rect(x, y, 50, 50);\n  };\n};\n\nnew p5(s); // invoke p5\n</code></div>",
                "\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  let step = frameCount % 20;\n  background(200);\n  // Equivalent to translate(x, y);\n  applyMatrix(1, 0, 0, 1, 40 + step, 50);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  let step = frameCount % 20;\n  background(200);\n  translate(50, 50);\n  // Equivalent to scale(x, y);\n  applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  let step = frameCount % 20;\n  let angle = map(step, 0, 20, 0, TWO_PI);\n  let cos_a = cos(angle);\n  let sin_a = sin(angle);\n  background(200);\n  translate(50, 50);\n  // Equivalent to rotate(angle);\n  applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  let step = frameCount % 20;\n  let angle = map(step, 0, 20, -PI / 4, PI / 4);\n  background(200);\n  translate(50, 50);\n  // equivalent to shearX(angle);\n  let shear_factor = 1 / tan(PI / 2 - angle);\n  applyMatrix(1, 0, shear_factor, 1, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noFill();\n}\n\nfunction draw() {\n  background(200);\n  rotateY(PI / 6);\n  stroke(153);\n  box(35);\n  let rad = millis() / 1000;\n  // Set rotation angles\n  let ct = cos(rad);\n  let st = sin(rad);\n  // Matrix for rotation around the Y axis\n  // prettier-ignore\n  applyMatrix(  ct, 0.0,  st,  0.0,\n               0.0, 1.0, 0.0,  0.0,\n               -st, 0.0,  ct,  0.0,\n               0.0, 0.0, 0.0,  1.0);\n  stroke(255);\n  box(50);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(200);\n  let testMatrix = [1, 0, 0, 1, 0, 0];\n  applyMatrix(testMatrix);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "A rectangle translating to the right\nA rectangle shrinking to the center\nA rectangle rotating clockwise about the center\nA rectangle shearing\nA rectangle in the upper left corner",
            "chainable": 1,
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59300,
            "description": "Replaces the current matrix with the identity matrix.",
            "itemtype": "method",
            "name": "resetMatrix",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\napplyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\nrect(0, 0, 20, 20);\n// Note that the translate is also reset.\nresetMatrix();\nrect(0, 0, 20, 20);\n</code>\n</div>"
            ],
            "alt": "A rotated retangle in the center with another at the top left corner",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59325,
            "description": "Rotates a shape by the amount specified by the angle parameter. This\nfunction accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles\ncan be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n\nTechnically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "(in 3d) the axis to rotate around",
                    "type": "p5.Vector|Number[]",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 2, height / 2);\nrotate(PI / 3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>"
            ],
            "alt": "white 52x52 rect with black outline at center rotated counter 45 degrees",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59364,
            "description": "Rotates a shape around X axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateX(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the x axis.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59400,
            "description": "Rotates a shape around Y axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateY(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the y axis.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59436,
            "description": "Rotates a shape around Z axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.\n\nThis method works in WEBGL mode only.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateZ(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the z axis.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59474,
            "description": "Increases or decreases the size of a shape by expanding or contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\nwithin <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\n\nUsing this function with the z parameter is only available in WEBGL mode.\nThis function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given",
                    "type": "Number|p5.Vector|Number[]"
                },
                {
                    "name": "y",
                    "description": "percent to scale the object in the y-axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "percent to scale the object in the z-axis (webgl only)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5);\nrect(30, 20, 50, 50);\n</code>\n</div>\n\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5, 1.3);\nrect(30, 20, 50, 50);\n</code>\n</div>"
            ],
            "alt": "white 52x52 rect with black outline at center rotated counter 45 degrees\n2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59518,
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "scales",
                    "description": "per-axis percents to scale the object",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59548,
            "description": "Shears a shape around the x-axis by the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>,\nthe transformation is reset when the loop begins again.\n\nTechnically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current\ntransformation matrix by a rotation matrix. This function can be further\ncontrolled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
            "itemtype": "method",
            "name": "shearX",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 4, height / 4);\nshearX(PI / 4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "alt": "white irregular quadrilateral with black outline at top middle.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59587,
            "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\n<a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\nthe loop begins again.\n\nTechnically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
            "itemtype": "method",
            "name": "shearY",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 4, height / 4);\nshearY(PI / 4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "alt": "white irregular quadrilateral with black outline at middle bottom.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59626,
            "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "left/right translation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "up/down translation",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "forward/backward translation (webgl only)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(30, 20);\nrect(0, 0, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\nrect(0, 0, 55, 55); // Draw rect at original 0,0\ntranslate(30, 20);\nrect(0, 0, 55, 55); // Draw rect at new 0,0\ntranslate(14, 14);\nrect(0, 0, 55, 55); // Draw rect at new 0,0\n</code>\n</div>\n\n  \n<div>\n<code>\nfunction draw() {\n  background(200);\n  rectMode(CENTER);\n  translate(width / 2, height / 2);\n  translate(p5.Vector.fromAngle(millis() / 1000, 40));\n  rect(0, 0, 20, 20);\n}\n</code>\n</div>"
            ],
            "alt": "white 55x55 rect with black outline at center right.\n3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.\na 20x20 white rect moving in a circle around the canvas",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59679,
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "the vector to translate by",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59744,
            "description": "Stores a value in local storage under the key name.\n Local storage is saved in the browser and persists\n between browsing sessions and page reloads.\n The key can be the name of the variable but doesn't\n have to be. To retrieve stored items\n see <a href=\"#/p5/getItem\">getItem</a>.\nSensitive data such as passwords or personal information\n should not be stored in local storage.",
            "itemtype": "method",
            "name": "storeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number|Object|Boolean|p5.Color|p5.Vector"
                }
            ],
            "example": [
                "\n <div><code>\n // Type to change the letter in the\n // center of the canvas.\n // If you reload the page, it will\n // still display the last key you entered\nlet myText;\nfunction setup() {\n   createCanvas(100, 100);\n   myText = getItem('myText');\n   if (myText === null) {\n     myText = '';\n   }\n }\nfunction draw() {\n   textSize(40);\n   background(255);\n   text(myText, width / 2, height / 2);\n }\nfunction keyPressed() {\n   myText = key;\n   storeItem('myText', myText);\n }\n </code></div>"
            ],
            "alt": "When you type the key name is displayed as black text on white background.\n If you reload the page, the last letter typed is still displaying.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59841,
            "description": "Returns the value of an item that was stored in local storage\n using storeItem()",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "name that you wish to use to store in local storage",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value of stored item",
                "type": "Number|Object|String|Boolean|p5.Color|p5.Vector"
            },
            "example": [
                "\n <div><code>\n // Click the mouse to change\n // the color of the background\n // Once you have changed the color\n // it will stay changed even when you\n // reload the page.\nlet myColor;\nfunction setup() {\n   createCanvas(100, 100);\n   myColor = getItem('myColor');\n }\nfunction draw() {\n   if (myColor !== null) {\n     background(myColor);\n   }\n }\nfunction mousePressed() {\n   myColor = color(random(255), random(255), random(255));\n   storeItem('myColor', myColor);\n }\n </code></div>"
            ],
            "alt": "If you click, the canvas changes to a random color.\n If you reload the page, the canvas is still the color it\n was when the page was previously loaded.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59920,
            "description": "Clears all local storage items set with storeItem()\n for the current domain.",
            "itemtype": "method",
            "name": "clearStorage",
            "example": [
                "\n <div class=\"norender\">\n <code>\n function setup() {\n   let myNum = 10;\n   let myBool = false;\n   storeItem('myNum', myNum);\n   storeItem('myBool', myBool);\n   print(getItem('myNum')); // logs 10 to the console\n   print(getItem('myBool')); // logs false to the console\n   clearStorage();\n   print(getItem('myNum')); // logs null to the console\n   print(getItem('myBool')); // logs null to the console\n }\n </code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 59948,
            "description": "Removes an item that was stored with storeItem()",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n <div class=\"norender\">\n <code>\n function setup() {\n   let myVar = 10;\n   storeItem('myVar', myVar);\n   print(getItem('myVar')); // logs 10 to the console\n   removeItem('myVar');\n   print(getItem('myVar')); // logs null to the console\n }\n </code></div>"
            ],
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "p5.js",
            "line": 60055,
            "itemtype": "method",
            "name": "createNumberDict",
            "params": [
                {
                    "name": "object",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.NumberDict"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60085,
            "description": "Returns the number of key-value pairs currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "the number of key-value pairs in the Dictionary",
                "type": "Integer"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(1, 10);\n  myDictionary.create(2, 20);\n  myDictionary.create(3, 30);\n  print(myDictionary.size()); // logs 3 to the console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60106,
            "description": "Returns true if the given key exists in the Dictionary,\notherwise returns false.",
            "itemtype": "method",
            "name": "hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "that you want to look up",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "whether that key exists in Dictionary",
                "type": "Boolean"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  print(myDictionary.hasKey('p5')); // logs true to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60128,
            "description": "Returns the value stored at the given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "the",
                    "description": "key you want to access",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "the value stored at that key",
                "type": "Number|String"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  let myValue = myDictionary.get('p5');\n  print(myValue === 'js'); // logs true to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60154,
            "description": "Updates the value associated with the given key in case it already exists\nin the Dictionary. Otherwise a new key-value pair is added.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  myDictionary.set('p5', 'JS');\n  myDictionary.print(); // logs \"key: p5 - value: JS\" to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60181,
            "description": "private helper function to handle the user passing in objects\nduring construction or calls to create()",
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60192,
            "description": "Creates a new key-value pair in the Dictionary.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60210,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "obj",
                    "description": "key/value pair",
                    "type": "Object"
                }
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60228,
            "description": "Removes all previously stored key-value pairs from the Dictionary.",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  print(myDictionary.hasKey('p5')); // prints 'true'\n  myDictionary.clear();\n  print(myDictionary.hasKey('p5')); // prints 'false'\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60249,
            "description": "Removes the key-value pair stored at the given key from the Dictionary.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "for the pair to remove",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n  myDictionary.remove('p5');\n  myDictionary.print();\n  // above logs \"key: happy value: coding\" to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60278,
            "description": "Logs the set of items currently stored in the Dictionary to the console.",
            "itemtype": "method",
            "name": "print",
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60302,
            "description": "Converts the Dictionary into a CSV file for local download.",
            "itemtype": "method",
            "name": "saveTable",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  text('click here to save', 10, 10, 70, 80);\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    createStringDict({\n      john: 1940,\n      paul: 1942,\n      george: 1943,\n      ringo: 1940\n    }).saveTable('beatles');\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60340,
            "description": "Converts the Dictionary into a JSON file for local download.",
            "itemtype": "method",
            "name": "saveJSON",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  text('click here to save', 10, 10, 70, 80);\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    createStringDict({\n      john: 1940,\n      paul: 1942,\n      george: 1943,\n      ringo: 1940\n    }).saveJSON('beatles');\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60371,
            "description": "private helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60431,
            "description": "private helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60440,
            "description": "Add the given number to the value currently stored at the given key.\nThe sum then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "Key",
                    "description": "for the value you wish to add to",
                    "type": "Number"
                },
                {
                    "name": "Number",
                    "description": "to add to the value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(2, 5);\n  myDictionary.add(2, 2);\n  print(myDictionary.get(2)); // logs 7 to console.\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60467,
            "description": "Subtract the given number from the value currently stored at the given key.\nThe difference then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "Key",
                    "description": "for the value you wish to subtract from",
                    "type": "Number"
                },
                {
                    "name": "Number",
                    "description": "to subtract from the value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(2, 5);\n  myDictionary.sub(2, 2);\n  print(myDictionary.get(2)); // logs 3 to console.\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60490,
            "description": "Multiply the given number with the value currently stored at the given key.\nThe product then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "Key",
                    "description": "for value you wish to multiply",
                    "type": "Number"
                },
                {
                    "name": "Amount",
                    "description": "to multiply the value by",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(2, 4);\n  myDictionary.mult(2, 2);\n  print(myDictionary.get(2)); // logs 8 to console.\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60517,
            "description": "Divide the given number with the value currently stored at the given key.\nThe quotient then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "Key",
                    "description": "for value you wish to divide",
                    "type": "Number"
                },
                {
                    "name": "Amount",
                    "description": "to divide the value by",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict(2, 8);\n  myDictionary.div(2, 2);\n  print(myDictionary.get(2)); // logs 4 to console.\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60544,
            "description": "private helper function for finding lowest or highest value\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60568,
            "description": "Return the lowest number currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "minValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n  let lowestValue = myDictionary.minValue(); // value is -10\n  print(lowestValue);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60588,
            "description": "Return the highest number currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "maxValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n  let highestValue = myDictionary.maxValue(); // value is 3\n  print(highestValue);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60608,
            "description": "private helper function for finding lowest or highest key\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60630,
            "description": "Return the lowest key currently used in the Dictionary.",
            "itemtype": "method",
            "name": "minKey",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n  let lowestKey = myDictionary.minKey(); // value is 1.2\n  print(lowestKey);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60650,
            "description": "Return the highest key currently used in the Dictionary.",
            "itemtype": "method",
            "name": "maxKey",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n  let highestKey = myDictionary.maxKey(); // value is 4\n  print(highestKey);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60702,
            "description": "Searches the page for the first element that matches the given CSS selector string (can be an\nID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\">p5.Element</a>.\nThe DOM node itself can be accessed with .elt.\nReturns null if none found. You can also specify a container to search within.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS selector string of element to search for",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n                                            HTML element to search within",
                    "type": "String|p5.Element|HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Element\">p5.Element</a> containing node found",
                "type": "p5.Element|null"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  createCanvas(50, 50);\n  background(30);\n  // move canvas down and right\n  select('canvas').position(10, 30);\n}\n</code></div>\n\n<div class=\"norender\"><code>\n// select using ID\nlet a = select('#container');\nlet b = select('#beep', '#container');\nlet c;\nif (a) {\n  // select using class\n  c = select('.boop', a);\n}\n// select using CSS selector string\nlet d = select('#container #bleep');\nlet e = select('#container p');\n[a, b, c, d, e]; // unused\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60749,
            "description": "Searches the page for elements that match the given CSS selector string (can be an ID a class,\ntag name or a combination) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s in\nan array.\nThe DOM node itself can be accessed with .elt.\nReturns an empty array if none found.\nYou can also specify a container to search within.",
            "itemtype": "method",
            "name": "selectAll",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS selector string of elements to search for",
                    "type": "String"
                },
                {
                    "name": "container",
                    "description": "CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>\n                                            , or HTML element to search within",
                    "type": "String|p5.Element|HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found",
                "type": "p5.Element[]"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  createButton('btn');\n  createButton('2nd btn');\n  createButton('3rd btn');\n  let buttons = selectAll('button');\n\n  for (let i = 0; i < 3; i++) {\n    buttons[i].size(100);\n    buttons[i].position(0, i * 30);\n  }\n}\n</code></div>\n<div><code>\n// these are all valid calls to selectAll()\nlet a = selectAll('.beep');\na = selectAll('div');\na = selectAll('button', '#container');\n\nlet b = createDiv();\nb.id('container');\nlet c = select('#container');\na = selectAll('p', c);\na = selectAll('#container p');\n\nlet d = document.getElementById('container');\na = selectAll('.boop', d);\na = selectAll('#container .boop');\nconsole.log(a);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60808,
            "description": "Helper function for select and selectAll",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60823,
            "description": "Helper function for getElement and getElements.",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60857,
            "description": "Removes all elements created by p5, except any canvas / graphics\nelements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>.\nEvent handlers are removed, and element is removed from the DOM.",
            "itemtype": "method",
            "name": "removeElements",
            "example": [
                "\n<div><code>\nfunction setup() {\n  createCanvas(100, 100);\n  background('grey');\n  let div = createDiv('this is some text');\n  let p = createP('this is a paragraph');\n  div.style('font-size', '16px');\n  p.style('font-size', '16px');\n}\nfunction mousePressed() {\n  removeElements(); // this will remove the div and p, not canvas\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60889,
            "description": "The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an\nelement changes.\nThis can be used to attach an element specific event listener.",
            "itemtype": "method",
            "name": "changed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when the value of\n                               an element changes.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nlet sel;\n\nfunction setup() {\n  textAlign(CENTER);\n  background(200);\n  sel = createSelect();\n  sel.position(10, 10);\n  sel.option('pear');\n  sel.option('kiwi');\n  sel.option('grape');\n  sel.changed(mySelectEvent);\n}\n\nfunction mySelectEvent() {\n  let item = sel.value();\n  background(200);\n  text(\"it's a \" + item + '!', 50, 50);\n}\n</code></div>\n\n<div><code>\nlet checkbox;\nlet cnv;\n\nfunction setup() {\n  checkbox = createCheckbox(' fill');\n  checkbox.changed(changeFill);\n  cnv = createCanvas(100, 100);\n  cnv.position(0, 30);\n  noFill();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(50, 50, 50, 50);\n}\n\nfunction changeFill() {\n  if (checkbox.checked()) {\n    fill(0);\n  } else {\n    noFill();\n  }\n}\n</code></div>"
            ],
            "alt": "dropdown: pear, kiwi, grape. When selected text \"its a\" + selection shown.",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60956,
            "description": "The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is\ndetected with an element. The input event is often used\nto detect keystrokes in a input element, or changes on a\nslider element. This can be used to attach an element specific\nevent listener.",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when any user input is\n                               detected within the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\n// Open your console to see the output\nfunction setup() {\n  createCanvas(100, 100);\n  background('grey');\n  let inp = createInput('');\n  inp.position(0, 0);\n  inp.size(100);\n  inp.input(myInputEvent);\n}\n\nfunction myInputEvent() {\n  console.log('you are typing: ', this.value());\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 60994,
            "description": "Helpers for create methods.",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61007,
            "description": "Creates a `&lt;div&gt;&lt;/div&gt;` element in the DOM with given inner HTML.",
            "itemtype": "method",
            "name": "createDiv",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet div = createDiv('this is some text');\ndiv.style('font-size', '16px');\ndiv.position(10, 0);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61028,
            "description": "Creates a `&lt;p&gt;&lt;/p&gt;` element in the DOM with given inner HTML. Used\nfor paragraph length text.",
            "itemtype": "method",
            "name": "createP",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet p = createP('this is some text');\np.style('font-size', '16px');\np.position(10, 0);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61050,
            "description": "Creates a `&lt;span&gt;&lt;/span&gt;` element in the DOM with given inner HTML.",
            "itemtype": "method",
            "name": "createSpan",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet span = createSpan('this is some text');\nspan.position(0, 0);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61070,
            "description": "Creates an `&lt;img&gt;` element in the DOM with given src and\nalternate text.",
            "itemtype": "method",
            "name": "createImg",
            "params": [
                {
                    "name": "src",
                    "description": "src path or url for image",
                    "type": "String"
                },
                {
                    "name": "alt",
                    "description": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (`\"\"`) if that an image is not intended to be viewed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n <div><code>\nlet img = createImg(\n  'https://p5js.org/assets/img/asterisk-01.png',\n  'the p5 magenta asterisk'\n);\nimg.position(0, -10);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61087,
            "itemtype": "method",
            "name": "createImg",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "alt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "crossOrigin",
                    "description": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the `img` element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with `canvas`. if an empty string(`\"\"`) is passed, CORS is not used",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61117,
            "description": "Creates an `&lt;a&gt;&lt;/a&gt;` element in the DOM for including a hyperlink.",
            "itemtype": "method",
            "name": "createA",
            "params": [
                {
                    "name": "href",
                    "description": "url of page to link to",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "inner html of link element to display",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target where new link should open,\n                            could be _blank, _self, _parent, _top.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet a = createA('http://p5js.org/', 'this is a link');\na.position(0, 0);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61141,
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61143,
            "description": "Creates a slider `&lt;input&gt;&lt;/input&gt;` element in the DOM.\nUse .size() to set the display length of the slider.",
            "itemtype": "method",
            "name": "createSlider",
            "params": [
                {
                    "name": "min",
                    "description": "minimum value of the slider",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "maximum value of the slider",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "default value of the slider",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "step",
                    "description": "step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet slider;\nfunction setup() {\n  slider = createSlider(0, 255, 100);\n  slider.position(10, 10);\n  slider.style('width', '80px');\n}\n\nfunction draw() {\n  let val = slider.value();\n  background(val);\n}\n</code></div>\n\n<div><code>\nlet slider;\nfunction setup() {\n  colorMode(HSB);\n  slider = createSlider(0, 360, 60, 40);\n  slider.position(10, 10);\n  slider.style('width', '80px');\n}\n\nfunction draw() {\n  let val = slider.value();\n  background(val, 100, 100, 1);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61198,
            "description": "Creates a `&lt;button&gt;&lt;/button&gt;` element in the DOM.\nUse .size() to set the display size of the button.\nUse .mousePressed() to specify behavior on press.",
            "itemtype": "method",
            "name": "createButton",
            "params": [
                {
                    "name": "label",
                    "description": "label displayed on the button",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of the button",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet button;\nfunction setup() {\n  createCanvas(100, 100);\n  background(0);\n  button = createButton('click me');\n  button.position(0, 0);\n  button.mousePressed(changeBG);\n}\n\nfunction changeBG() {\n  let val = random(255);\n  background(val);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61232,
            "description": "Creates a checkbox `&lt;input&gt;&lt;/input&gt;` element in the DOM.\nCalling .checked() on a checkbox returns if it is checked or not",
            "itemtype": "method",
            "name": "createCheckbox",
            "params": [
                {
                    "name": "label",
                    "description": "label displayed after checkbox",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "value of the checkbox; checked is true, unchecked is false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet checkbox;\n\nfunction setup() {\n  checkbox = createCheckbox('label', false);\n  checkbox.changed(myCheckedEvent);\n}\n\nfunction myCheckedEvent() {\n  if (this.checked()) {\n    console.log('Checking!');\n  } else {\n    console.log('Unchecking!');\n  }\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61300,
            "description": "Creates a dropdown menu `&lt;select&gt;&lt;/select&gt;` element in the DOM.\nIt also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box.\n- `.option(name, [value])` can be used to set options for the select after it is created.\n- `.value()` will return the currently selected option.\n- `.selected()` will return current dropdown element which is an instance of <a href=\"#/p5.Element\">p5.Element</a>\n- `.selected(value)` can be used to make given option selected by default when the page first loads.\n- `.disable()` marks whole of dropdown element as disabled.\n- `.disable(value)` marks given option as disabled",
            "itemtype": "method",
            "name": "createSelect",
            "params": [
                {
                    "name": "multiple",
                    "description": "true if dropdown should support multiple selections",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet sel;\n\nfunction setup() {\n  textAlign(CENTER);\n  background(200);\n  sel = createSelect();\n  sel.position(10, 10);\n  sel.option('pear');\n  sel.option('kiwi');\n  sel.option('grape');\n  sel.selected('kiwi');\n  sel.changed(mySelectEvent);\n}\n\nfunction mySelectEvent() {\n  let item = sel.value();\n  background(200);\n  text('It is a ' + item + '!', 50, 50);\n}\n</code></div>\n\n<div><code>\nlet sel;\n\nfunction setup() {\n  textAlign(CENTER);\n  background(200);\n  sel = createSelect();\n  sel.position(10, 10);\n  sel.option('oil');\n  sel.option('milk');\n  sel.option('bread');\n  sel.disable('milk');\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61351,
            "itemtype": "method",
            "name": "createSelect",
            "params": [
                {
                    "name": "existing",
                    "description": "DOM select element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61474,
            "description": "Creates a radio button element in the DOM.It also helps existing radio buttons\nassign methods of <a href=\"#/p5.Element/\">p5.Element</a>.\n- `.option(value, [label])` can be used to create a new option for the\n  element. If an option with a value already exists, it will be returned.\n  Optionally, a label can be provided as second argument for the option.\n- `.remove(value)` can be used to remove an option for the element.\n- `.value()` method will return the currently selected value.\n- `.selected()` method will return the currently selected input element.\n- `.selected(value)` method will select the option and return it.\n- `.disable(Boolean)` method will enable/disable the whole radio button element.",
            "itemtype": "method",
            "name": "createRadio",
            "params": [
                {
                    "name": "containerElement",
                    "description": "An container HTML Element either a div\nor span inside which all existing radio inputs will be considered as options.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "A name parameter for each Input Element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet radio;\n\nfunction setup() {\n  radio = createRadio();\n  radio.option('black');\n  radio.option('white');\n  radio.option('gray');\n  radio.style('width', '60px');\n  textAlign(CENTER);\n  fill(255, 0, 0);\n}\n\nfunction draw() {\n  let val = radio.value();\n  background(val);\n  text(val, width / 2, height / 2);\n}\n</code></div>\n<div><code>\nlet radio;\n\nfunction setup() {\n  radio = createRadio();\n  radio.option(1, 'apple');\n  radio.option(2, 'bread');\n  radio.option(3, 'juice');\n  radio.style('width', '30px');\n  textAlign(CENTER);\n}\n\nfunction draw() {\n  background(200);\n  let val = radio.value();\n  if (val) {\n    text('item cost is $' + val, width / 2, height / 2);\n  }\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61532,
            "itemtype": "method",
            "name": "createRadio",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61537,
            "itemtype": "method",
            "name": "createRadio",
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61795,
            "description": "Creates a colorPicker element in the DOM for color input.\nThe .value() method will return a hex string (#rrggbb) of the color.\nThe .color() method will return a p5.Color object with the current chosen color.",
            "itemtype": "method",
            "name": "createColorPicker",
            "params": [
                {
                    "name": "value",
                    "description": "default color of element",
                    "type": "String|p5.Color",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet colorPicker;\nfunction setup() {\n  createCanvas(100, 100);\n  colorPicker = createColorPicker('#ed225d');\n  colorPicker.position(0, height + 5);\n}\n\nfunction draw() {\n  background(colorPicker.color());\n}\n</code></div>\n<div><code>\nlet inp1, inp2;\nfunction setup() {\n  createCanvas(100, 100);\n  background('grey');\n  inp1 = createColorPicker('#ff0000');\n  inp1.position(0, height + 5);\n  inp1.input(setShade1);\n  inp2 = createColorPicker(color('yellow'));\n  inp2.position(0, height + 30);\n  inp2.input(setShade2);\n  setMidShade();\n}\n\nfunction setMidShade() {\n  // Finding a shade between the two\n  let commonShade = lerpColor(inp1.color(), inp2.color(), 0.5);\n  fill(commonShade);\n  rect(20, 20, 60, 60);\n}\n\nfunction setShade1() {\n  setMidShade();\n  console.log('You are choosing shade 1 to be : ', this.value());\n}\nfunction setShade2() {\n  setMidShade();\n  console.log('You are choosing shade 2 to be : ', this.value());\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61884,
            "description": "Creates an `&lt;input&gt;&lt;/input&gt;` element in the DOM for text input.\nUse .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box.",
            "itemtype": "method",
            "name": "createInput",
            "params": [
                {
                    "name": "value",
                    "description": "default value of the input box",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type of text, ie text, password etc. Defaults to text.\n  Needs a value to be specified first.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  createCanvas(100, 100);\n  background('grey');\n  let inp = createInput('');\n  inp.position(0, 0);\n  inp.size(100);\n  inp.input(myInputEvent);\n}\n\nfunction myInputEvent() {\n  console.log('you are typing: ', this.value());\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61909,
            "itemtype": "method",
            "name": "createInput",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 61926,
            "description": "Creates an `&lt;input&gt;&lt;/input&gt;` element in the DOM of type 'file'.\nThis allows users to select local files for use in a sketch.",
            "itemtype": "method",
            "name": "createFileInput",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function for when a file is loaded",
                    "type": "Function"
                },
                {
                    "name": "multiple",
                    "description": "optional, to allow multiple files to be selected",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet input;\nlet img;\n\nfunction setup() {\n  input = createFileInput(handleFile);\n  input.position(0, 0);\n}\n\nfunction draw() {\n  background(255);\n  if (img) {\n    image(img, 0, 0, width, height);\n  }\n}\n\nfunction handleFile(file) {\n  print(file);\n  if (file.type === 'image') {\n    img = createImg(file.data, '');\n    img.hide();\n  } else {\n    img = null;\n  }\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62012,
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62082,
            "description": "Creates an HTML5 `&lt;video&gt;` element in the DOM for simple playback\nof audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a>\nand drawn into canvas using <a href=\"#/p5/image\">image()</a>. The first parameter\ncan be either a single string path to a video file, or an array of string\npaths to different formats of the same video. This is useful for ensuring\nthat your video can play across different browsers, as each supports\ndifferent formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\npage</a> for further information about supported formats.",
            "itemtype": "method",
            "name": "createVideo",
            "params": [
                {
                    "name": "src",
                    "description": "path to a video file, or array of paths for\n                            supporting different browsers",
                    "type": "String|String[]"
                },
                {
                    "name": "callback",
                    "description": "callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to video <a href=\"#/p5.Element\">p5.Element</a>",
                "type": "p5.MediaElement"
            },
            "example": [
                "\n<div><code>\nlet vid;\nfunction setup() {\n  noCanvas();\n\n  vid = createVideo(\n    ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n    vidLoad\n  );\n\n  vid.size(100, 100);\n}\n\n// This function is called when the video loads\nfunction vidLoad() {\n  vid.loop();\n  vid.volume(0);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62128,
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62130,
            "description": "Creates a hidden HTML5 `&lt;audio&gt;` element in the DOM for simple audio\nplayback. The first parameter can be either a single string path to a\naudio file, or an array of string paths to different formats of the same\naudio. This is useful for ensuring that your audio can play across\ndifferent browsers, as each supports different formats.\nSee <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\npage for further information about supported formats</a>.",
            "itemtype": "method",
            "name": "createAudio",
            "params": [
                {
                    "name": "src",
                    "description": "path to an audio file, or array of paths\n                            for supporting different browsers",
                    "type": "String|String[]",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to audio <a href=\"#/p5.Element\">p5.Element</a>",
                "type": "p5.MediaElement"
            },
            "example": [
                "\n<div><code>\nlet ele;\nfunction setup() {\n  ele = createAudio('assets/beat.mp3');\n\n  // here we set the element to autoplay\n  // The element will play as soon\n  // as it is able to do so.\n  ele.autoplay(true);\n}\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62167,
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62169,
            "itemtype": "property",
            "name": "VIDEO",
            "type": "String",
            "final": 1,
            "category": [
                "Constants"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62175,
            "itemtype": "property",
            "name": "AUDIO",
            "type": "String",
            "final": 1,
            "category": [
                "Constants"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62211,
            "description": "Creates a new HTML5 `&lt;video&gt;` element that contains the audio/video feed\nfrom a webcam. The element is separate from the canvas and is displayed by\ndefault. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>.\nThe feed can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>.\nThe loadedmetadata property can be used to detect when the element has fully\nloaded (see second example).\n\nMore specific properties of the feed can be passing in a Constraints object.\nSee the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'>\nW3C spec</a> for possible properties. Note that not all of these are supported\nby all browsers.\n\n<em>Security note</em>: A new browser security specification requires that\ngetUserMedia, which is behind <a href=\"#/p5/createCapture\">createCapture()</a>,\nonly works when you're running the code locally, or on HTTPS. Learn more\n<a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a>\nand <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>.",
            "itemtype": "method",
            "name": "createCapture",
            "params": [
                {
                    "name": "type",
                    "description": "type of capture, either VIDEO or\n                                  AUDIO if none specified, default both,\n                                  or a Constraints object",
                    "type": "String|Constant|Object"
                },
                {
                    "name": "callback",
                    "description": "function to be called once\n                                  stream has loaded",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "capture video <a href=\"#/p5.Element\">p5.Element</a>",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='notest'>\n<code>\nlet capture;\n\nfunction setup() {\n  createCanvas(100, 100);\n  capture = createCapture(VIDEO);\n  capture.hide();\n}\n\nfunction draw() {\n  image(capture, 0, 0, width, width * capture.height / capture.width);\n  filter(INVERT);\n}\n</code>\n</div>\n\n<div class='notest'>\n<code>\nfunction setup() {\n  createCanvas(480, 120);\n  let constraints = {\n    video: {\n      mandatory: {\n        minWidth: 1280,\n        minHeight: 720\n      },\n      optional: [{ maxFrameRate: 10 }]\n    },\n    audio: true\n  };\n  createCapture(constraints, function(stream) {\n    console.log(stream);\n  });\n}\n</code>\n</div>\n<div class='notest'>\n<code>\nlet capture;\n\nfunction setup() {\n  createCanvas(640, 480);\n  capture = createCapture(VIDEO);\n}\nfunction draw() {\n  background(0);\n  if (capture.loadedmetadata) {\n    let c = capture.get(0, 0, 100, 100);\n    image(c, 0, 0);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62371,
            "description": "Creates element with given tag in the DOM with given content.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tag",
                    "description": "tag for the new element",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "html content to be inserted into the element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
                "type": "p5.Element"
            },
            "example": [
                "\n<div><code>\nlet h5 = createElement('h5', 'im an h5 p5.element!');\nh5.style('color', '#00a1d3');\nh5.position(0, 0);\n</code></div>"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62397,
            "description": "Adds specified class to the element.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "class",
                    "description": "name of class to add",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n let div = createDiv('div');\n div.addClass('myClass');\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62422,
            "description": "Removes specified class from the element.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "class",
                    "description": "name of class to remove",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n // In this example, a class is set when the div is created\n // and removed when mouse is pressed. This could link up\n // with a CSS style rule to toggle style properties.\nlet div;\nfunction setup() {\n   div = createDiv('div');\n   div.addClass('myClass');\n }\nfunction mousePressed() {\n   div.removeClass('myClass');\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62453,
            "description": "Checks if specified class already set to element",
            "itemtype": "method",
            "name": "hasClass",
            "return": {
                "description": "a boolean value if element has specified class",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "c",
                    "description": "class name of class to check",
                    "type": "String"
                }
            ],
            "example": [
                "\n <div class='norender'><code>\n let div;\nfunction setup() {\n   div = createDiv('div');\n   div.addClass('show');\n }\nfunction mousePressed() {\n   if (div.hasClass('show')) {\n     div.addClass('show');\n   } else {\n     div.removeClass('show');\n   }\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62482,
            "description": "Toggles element class",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "c",
                    "description": "class name to toggle",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n let div;\nfunction setup() {\n   div = createDiv('div');\n   div.addClass('show');\n }\nfunction mousePressed() {\n   div.toggleClass('show');\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62515,
            "description": "Attaches the element  as a child to the parent specified.\n Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.\n If no argument is specified, an array of children DOM nodes is returned.",
            "itemtype": "method",
            "name": "child",
            "return": {
                "description": "an array of child nodes",
                "type": "Node[]"
            },
            "example": [
                "\n <div class='norender'><code>\n let div0 = createDiv('this is the parent');\n let div1 = createDiv('this is the child');\n div0.child(div1); // use p5.Element\n </code></div>\n <div class='norender'><code>\n let div0 = createDiv('this is the parent');\n let div1 = createDiv('this is the child');\n div1.id('apples');\n div0.child('apples'); // use id\n </code></div>\n <div class='norender notest'><code>\n // this example assumes there is a div already on the page\n // with id \"myChildDiv\"\n let div0 = createDiv('this is the parent');\n let elt = document.getElementById('myChildDiv');\n div0.child(elt); // use element from page\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62543,
            "itemtype": "method",
            "name": "child",
            "params": [
                {
                    "name": "child",
                    "description": "the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n                        to add to the current element",
                    "type": "String|p5.Element",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62568,
            "description": "Centers a p5 Element either vertically, horizontally,\nor both, relative to its parent or according to\nthe body if the Element has no parent. If no argument is passed\nthe Element is aligned both vertically and horizontally.",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "align",
                    "description": "passing 'vertical', 'horizontal' aligns element accordingly",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nfunction setup() {\n  let div = createDiv('').size(10, 10);\n  div.style('background-color', 'orange');\n  div.center();\n}\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62619,
            "description": "If an argument is given, sets the inner HTML of the element,\n replacing any existing html. If true is included as a second\n argument, html is appended instead of replacing existing html.\n If no arguments are given, returns\n the inner HTML of the element.",
            "itemtype": "method",
            "name": "html",
            "return": {
                "description": "the inner HTML of the element",
                "type": "String"
            },
            "example": [
                "\n <div class='norender'><code>\n let div = createDiv('').size(100, 100);\n div.html('hi');\n </code></div>\n <div class='norender'><code>\n let div = createDiv('Hello ').size(100, 100);\n div.html('World', true);\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62640,
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "html",
                    "description": "the HTML to be placed inside the element",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "append",
                    "description": "whether to append HTML to existing",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62658,
            "description": "Sets the position of the element. If no position type argument is given, the\n position will be relative to (0, 0) of the window.\n Essentially, this sets position:absolute and left and top\n properties of style. If an optional third argument specifying position type is given,\n the x and y coordinates will be interpreted based on the <a target=\"_blank\"\n href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.\n If no arguments given, the function returns the x and y position of the element.\nfound documentation on how to be more specific with object type\n https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc",
            "itemtype": "method",
            "name": "position",
            "return": {
                "description": "object of form { x: 0, y: 0 } containing the position of the element in an object",
                "type": "Object"
            },
            "example": [
                "\n <div><code class='norender'>\n function setup() {\n   let cnv = createCanvas(100, 100);\n   // positions canvas 50px to the right and 100px\n   // below upper left corner of the window\n   cnv.position(50, 100);\n }\n </code></div>\n <div><code class='norender'>\n function setup() {\n   let cnv = createCanvas(100, 100);\n   // positions canvas 50px to the right and 100px\n   // below upper left corner of the window\n   cnv.position(0, 0, 'fixed');\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62691,
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "x",
                    "description": "x-position relative to upper left of window (optional)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-position relative to upper left of window (optional)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "positionType",
                    "description": "it can be static, fixed, relative, sticky, initial or inherit (optional)",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62778,
            "description": "Sets the given style (css) property (1st arg) of the element with the\ngiven value (2nd arg). If a single argument is given, .style()\nreturns the value of the given property; however, if the single argument\nis given in css syntax ('text-align:center'), .style() sets the css\nappropriately.",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "property",
                    "description": "property to be set",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of property",
                "type": "String"
            },
            "example": [
                "\n<div><code class='norender'>\nlet myDiv = createDiv('I like pandas.');\nmyDiv.style('font-size', '18px');\nmyDiv.style('color', '#ff0000');\n</code></div>\n<div><code class='norender'>\nlet col = color(25, 23, 200, 50);\nlet button = createButton('button');\nbutton.style('background-color', col);\nbutton.position(10, 10);\n</code></div>\n<div><code class='norender'>\nlet myDiv;\nfunction setup() {\n  background(200);\n  myDiv = createDiv('I like gray.');\n  myDiv.position(20, 20);\n}\n\nfunction draw() {\n  myDiv.style('font-size', mouseX + 'px');\n}\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62813,
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to property",
                    "type": "String|p5.Color"
                }
            ],
            "return": {
                "description": "current value of property, if no value is given as second argument",
                "type": "String"
            },
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62870,
            "description": "Adds a new attribute or changes the value of an existing attribute\n on the specified element. If no value is specified, returns the\n value of the given attribute, or null if attribute is not set.",
            "itemtype": "method",
            "name": "attribute",
            "return": {
                "description": "value of attribute",
                "type": "String"
            },
            "example": [
                "\n <div class='norender'><code>\n let myDiv = createDiv('I like pandas.');\n myDiv.attribute('align', 'center');\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62885,
            "itemtype": "method",
            "name": "attribute",
            "params": [
                {
                    "name": "attr",
                    "description": "attribute to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to attribute",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62914,
            "description": "Removes an attribute on the specified element.",
            "itemtype": "method",
            "name": "removeAttribute",
            "params": [
                {
                    "name": "attr",
                    "description": "attribute to remove",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div><code>\n let button;\n let checkbox;\nfunction setup() {\n   checkbox = createCheckbox('enable', true);\n   checkbox.changed(enableButton);\n   button = createButton('button');\n   button.position(10, 10);\n }\nfunction enableButton() {\n   if (this.checked()) {\n     // Re-enable the button\n     button.removeAttribute('disabled');\n   } else {\n     // Disable the button\n     button.attribute('disabled', '');\n   }\n }\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62959,
            "description": "Either returns the value of the element if no arguments\ngiven, or sets the value of the element.",
            "itemtype": "method",
            "name": "value",
            "return": {
                "description": "value of the element",
                "type": "String|Number"
            },
            "example": [
                "\n<div class='norender'><code>\n// gets the value\nlet inp;\nfunction setup() {\n  inp = createInput('');\n}\n\nfunction mousePressed() {\n  print(inp.value());\n}\n</code></div>\n<div class='norender'><code>\n// sets the value\nlet inp;\nfunction setup() {\n  inp = createInput('myValue');\n}\n\nfunction mousePressed() {\n  inp.value('myValue');\n}\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 62989,
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63005,
            "description": "Shows the current element. Essentially, setting display:block for the style.",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n let div = createDiv('div');\n div.style('display', 'none');\n div.show(); // turns display to block\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63023,
            "description": "Hides the current element. Essentially, setting display:none for the style.",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nlet div = createDiv('this is a div');\ndiv.hide();\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63039,
            "description": "Sets the width and height of the element. AUTO can be used to\n only adjust one dimension at a time. If no arguments are given, it\n returns the width and height of the element in an object. In case of\n elements which need to be loaded, such as images, it is recommended\n to call the function after the element has finished loading.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "the width and height of the element in an object",
                "type": "Object"
            },
            "example": [
                "\n <div class='norender'><code>\n let div = createDiv('this is a div');\n div.size(100, 100);\n let img = createImg(\n   'assets/rockies.jpg',\n   'A tall mountain with a small forest and field in front of it on a sunny day',\n   '',\n   () => {\n     img.size(10, AUTO);\n   }\n );\n </code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63063,
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "w",
                    "description": "width of the element, either AUTO, or a number",
                    "type": "Number|Constant"
                },
                {
                    "name": "h",
                    "description": "height of the element, either AUTO, or a number",
                    "type": "Number|Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63120,
            "description": "Removes the element, stops all media streams, and deregisters all listeners.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nlet myDiv = createDiv('this is some text');\nmyDiv.remove();\n</code></div>"
            ],
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63158,
            "description": "Registers a callback that gets called every time a file that is\ndropped on the element has been loaded.\np5 will load every dropped file into memory and pass it as a p5.File object to the callback.\nMultiple files dropped at the same time will result in multiple calls to the callback.\n\nYou can optionally pass a second callback which will be registered to the raw\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event.\nThe callback will thus be provided the original\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\nDropping multiple files at the same time will trigger the second callback once per drop,\nwhereas the first callback will trigger for each loaded file.",
            "itemtype": "method",
            "name": "drop",
            "params": [
                {
                    "name": "callback",
                    "description": "callback to receive loaded file, called for each file dropped.",
                    "type": "Function"
                },
                {
                    "name": "fxn",
                    "description": "callback triggered once when files are dropped with the drop event.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nfunction setup() {\n  let c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('drop file', width / 2, height / 2);\n  c.drop(gotFile);\n}\n\nfunction gotFile(file) {\n  background(200);\n  text('received file:', width / 2, height / 2);\n  text(file.name, width / 2, height / 2 + 50);\n}\n</code></div>\n\n<div><code>\nlet img;\n\nfunction setup() {\n  let c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('drop image', width / 2, height / 2);\n  c.drop(gotFile);\n}\n\nfunction draw() {\n  if (img) {\n    image(img, 0, 0, width, height);\n  }\n}\n\nfunction gotFile(file) {\n  img = createImg(file.data, '').hide();\n}\n</code></div>"
            ],
            "alt": "Canvas turns into whatever image is dragged/dropped onto it.",
            "class": "p5.Element",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63290,
            "description": "Path to the media element source.",
            "itemtype": "property",
            "name": "src",
            "return": {
                "description": "src",
                "type": "String"
            },
            "example": [
                "\n<div><code>\nlet ele;\n\nfunction setup() {\n  background(250);\n\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n\n  //In this example we create\n  //a new p5.MediaElement via createAudio().\n  ele = createAudio('assets/beat.mp3');\n\n  //We'll set up our example so that\n  //when you click on the text,\n  //an alert box displays the MediaElement's\n  //src field.\n  textAlign(CENTER);\n  text('Click Me!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    //Show our p5.MediaElement's src field\n    alert(ele.src);\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63357,
            "description": "Play an HTML5 media element.",
            "itemtype": "method",
            "name": "play",
            "chainable": 1,
            "example": [
                "\n<div><code>\nlet ele;\n\nfunction setup() {\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n\n  //In this example we create\n  //a new p5.MediaElement via createAudio().\n  ele = createAudio('assets/beat.mp3');\n\n  background(250);\n  textAlign(CENTER);\n  text('Click to Play!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    //Here we call the play() function on\n    //the p5.MediaElement we created above.\n    //This will start the audio sample.\n    ele.play();\n\n    background(200);\n    text('You clicked Play!', width / 2, height / 2);\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63422,
            "description": "Stops an HTML5 media element (sets current time to zero).",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n<div><code>\n//This example both starts\n//and stops a sound sample\n//when the user clicks the canvas\n\n//We will store the p5.MediaElement\n//object in here\nlet ele;\n\n//while our audio is playing,\n//this will be set to true\nlet sampleIsPlaying = false;\n\nfunction setup() {\n  //Here we create a p5.MediaElement object\n  //using the createAudio() function.\n  ele = createAudio('assets/beat.mp3');\n  background(200);\n  textAlign(CENTER);\n  text('Click to play!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    background(200);\n\n    if (sampleIsPlaying) {\n      //if the sample is currently playing\n      //calling the stop() function on\n      //our p5.MediaElement will stop\n      //it and reset its current\n      //time to 0 (i.e. it will start\n      //at the beginning the next time\n      //you play it)\n      ele.stop();\n\n      sampleIsPlaying = false;\n      text('Click to play!', width / 2, height / 2);\n    } else {\n      //loop our sound element until we\n      //call ele.stop() on it.\n      ele.loop();\n\n      sampleIsPlaying = true;\n      text('Click to stop!', width / 2, height / 2);\n    }\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63486,
            "description": "Pauses an HTML5 media element.",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "example": [
                "\n<div><code>\n//This example both starts\n//and pauses a sound sample\n//when the user clicks the canvas\n\n//We will store the p5.MediaElement\n//object in here\nlet ele;\n\n//while our audio is playing,\n//this will be set to true\nlet sampleIsPlaying = false;\n\nfunction setup() {\n  //Here we create a p5.MediaElement object\n  //using the createAudio() function.\n  ele = createAudio('assets/lucky_dragons.mp3');\n  background(200);\n  textAlign(CENTER);\n  text('Click to play!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    background(200);\n\n    if (sampleIsPlaying) {\n      //Calling pause() on our\n      //p5.MediaElement will stop it\n      //playing, but when we call the\n      //loop() or play() functions\n      //the sample will start from\n      //where we paused it.\n      ele.pause();\n\n      sampleIsPlaying = false;\n      text('Click to resume!', width / 2, height / 2);\n    } else {\n      //loop our sound element until we\n      //call ele.pause() on it.\n      ele.loop();\n\n      sampleIsPlaying = true;\n      text('Click to pause!', width / 2, height / 2);\n    }\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63548,
            "description": "Set 'loop' to true for an HTML5 media element, and starts playing.",
            "itemtype": "method",
            "name": "loop",
            "chainable": 1,
            "example": [
                "\n<div><code>\n//Clicking the canvas will loop\n//the audio sample until the user\n//clicks again to stop it\n\n//We will store the p5.MediaElement\n//object in here\nlet ele;\n\n//while our audio is playing,\n//this will be set to true\nlet sampleIsLooping = false;\n\nfunction setup() {\n  //Here we create a p5.MediaElement object\n  //using the createAudio() function.\n  ele = createAudio('assets/lucky_dragons.mp3');\n  background(200);\n  textAlign(CENTER);\n  text('Click to loop!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    background(200);\n\n    if (!sampleIsLooping) {\n      //loop our sound element until we\n      //call ele.stop() on it.\n      ele.loop();\n\n      sampleIsLooping = true;\n      text('Click to stop!', width / 2, height / 2);\n    } else {\n      ele.stop();\n\n      sampleIsLooping = false;\n      text('Click to loop!', width / 2, height / 2);\n    }\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63604,
            "description": "Set 'loop' to false for an HTML5 media element. Element will stop\nwhen it reaches the end.",
            "itemtype": "method",
            "name": "noLoop",
            "chainable": 1,
            "example": [
                "\n<div><code>\n//This example both starts\n//and stops loop of sound sample\n//when the user clicks the canvas\n\n//We will store the p5.MediaElement\n//object in here\nlet ele;\n//while our audio is playing,\n//this will be set to true\nlet sampleIsPlaying = false;\n\nfunction setup() {\n  //Here we create a p5.MediaElement object\n  //using the createAudio() function.\n  ele = createAudio('assets/beat.mp3');\n  background(200);\n  textAlign(CENTER);\n  text('Click to play!', width / 2, height / 2);\n}\n\nfunction mouseClicked() {\n  //here we test if the mouse is over the\n  //canvas element when it's clicked\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n    background(200);\n\n    if (sampleIsPlaying) {\n      ele.noLoop();\n      sampleIsPlaying = false;\n      text('No more Loops!', width / 2, height / 2);\n    } else {\n      ele.loop();\n      sampleIsPlaying = true;\n      text('Click to stop looping!', width / 2, height / 2);\n    }\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63656,
            "description": "Sets up logic to check that autoplay succeeded.",
            "itemtype": "method",
            "name": "setupAutoplayFailDetection",
            "access": "private",
            "tagname": "",
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63679,
            "description": "Set HTML5 media element to autoplay or not. If no argument is specified, by\ndefault it will autoplay.",
            "itemtype": "method",
            "name": "autoplay",
            "params": [
                {
                    "name": "shouldAutoplay",
                    "description": "whether the element should autoplay",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nlet videoElement;\nfunction setup() {\n  noCanvas();\n  videoElement = createVideo(['assets/small.mp4'], onVideoLoad);\n}\nfunction onVideoLoad() {\n  // The media will play as soon as it is loaded.\n  videoElement.autoplay();\n  videoElement.volume(0);\n  videoElement.size(100, 100);\n}\n</code></div>\n\n<div><code>\nlet videoElement;\nfunction setup() {\n  noCanvas();\n  videoElement = createVideo(['assets/small.mp4'], onVideoLoad);\n}\nfunction onVideoLoad() {\n  // The media will not play untill some explicitly triggered.\n  videoElement.autoplay(false);\n  videoElement.volume(0);\n  videoElement.size(100, 100);\n}\n\nfunction mouseClicked() {\n  videoElement.play();\n}\n</code></div>"
            ],
            "alt": "An example of a video element which autoplays after it is loaded.\nAn example of a video element which waits for a trigger for playing.",
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63749,
            "description": "Sets volume for this HTML5 media element. If no argument is given,\nreturns the current volume.",
            "itemtype": "method",
            "name": "volume",
            "return": {
                "description": "current volume",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet ele;\nfunction setup() {\n  // p5.MediaElement objects are usually created\n  // by calling the createAudio(), createVideo(),\n  // and createCapture() functions.\n  // In this example we create\n  // a new p5.MediaElement via createAudio().\n  ele = createAudio('assets/lucky_dragons.mp3');\n  background(250);\n  textAlign(CENTER);\n  text('Click to Play!', width / 2, height / 2);\n}\nfunction mouseClicked() {\n  // Here we call the volume() function\n  // on the sound element to set its volume\n  // Volume must be between 0.0 and 1.0\n  ele.volume(0.2);\n  ele.play();\n  background(200);\n  text('You clicked Play!', width / 2, height / 2);\n}\n</code></div>\n<div><code>\nlet audio;\nlet counter = 0;\n\nfunction loaded() {\n  audio.play();\n}\n\nfunction setup() {\n  audio = createAudio('assets/lucky_dragons.mp3', loaded);\n  textAlign(CENTER);\n}\n\nfunction draw() {\n  if (counter === 0) {\n    background(0, 255, 0);\n    text('volume(0.9)', width / 2, height / 2);\n  } else if (counter === 1) {\n    background(255, 255, 0);\n    text('volume(0.5)', width / 2, height / 2);\n  } else if (counter === 2) {\n    background(255, 0, 0);\n    text('volume(0.1)', width / 2, height / 2);\n  }\n}\n\nfunction mousePressed() {\n  counter++;\n  if (counter === 0) {\n    audio.volume(0.9);\n  } else if (counter === 1) {\n    audio.volume(0.5);\n  } else if (counter === 2) {\n    audio.volume(0.1);\n  } else {\n    counter = 0;\n    audio.volume(0.9);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63822,
            "itemtype": "method",
            "name": "volume",
            "params": [
                {
                    "name": "val",
                    "description": "volume between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63835,
            "description": "If no arguments are given, returns the current playback speed of the\nelement. The speed parameter sets the speed where 2.0 will play the\nelement twice as fast, 0.5 will play at half the speed, and -1 will play\nthe element in normal speed in reverse.(Note that not all browsers support\nbackward playback and even if they do, playback might not be smooth.)",
            "itemtype": "method",
            "name": "speed",
            "return": {
                "description": "current playback speed of the element",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender notest'><code>\n//Clicking the canvas will loop\n//the audio sample until the user\n//clicks again to stop it\n\n//We will store the p5.MediaElement\n//object in here\nlet ele;\nlet button;\n\nfunction setup() {\n  createCanvas(710, 400);\n  //Here we create a p5.MediaElement object\n  //using the createAudio() function.\n  ele = createAudio('assets/beat.mp3');\n  ele.loop();\n  background(200);\n\n  button = createButton('2x speed');\n  button.position(100, 68);\n  button.mousePressed(twice_speed);\n\n  button = createButton('half speed');\n  button.position(200, 68);\n  button.mousePressed(half_speed);\n\n  button = createButton('reverse play');\n  button.position(300, 68);\n  button.mousePressed(reverse_speed);\n\n  button = createButton('STOP');\n  button.position(400, 68);\n  button.mousePressed(stop_song);\n\n  button = createButton('PLAY!');\n  button.position(500, 68);\n  button.mousePressed(play_speed);\n}\n\nfunction twice_speed() {\n  ele.speed(2);\n}\n\nfunction half_speed() {\n  ele.speed(0.5);\n}\n\nfunction reverse_speed() {\n  ele.speed(-1);\n}\n\nfunction stop_song() {\n  ele.stop();\n}\n\nfunction play_speed() {\n  ele.play();\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63907,
            "itemtype": "method",
            "name": "speed",
            "params": [
                {
                    "name": "speed",
                    "description": "speed multiplier for element playback",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63924,
            "description": "If no arguments are given, returns the current time of the element.\nIf an argument is given the current time of the element is set to it.",
            "itemtype": "method",
            "name": "time",
            "return": {
                "description": "current time (in seconds)",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet ele;\nlet beginning = true;\nfunction setup() {\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n\n  //In this example we create\n  //a new p5.MediaElement via createAudio().\n  ele = createAudio('assets/lucky_dragons.mp3');\n  background(250);\n  textAlign(CENTER);\n  text('start at beginning', width / 2, height / 2);\n}\n\n// this function fires with click anywhere\nfunction mousePressed() {\n  if (beginning === true) {\n    // here we start the sound at the beginning\n    // time(0) is not necessary here\n    // as this produces the same result as\n    // play()\n    ele.play().time(0);\n    background(200);\n    text('jump 2 sec in', width / 2, height / 2);\n    beginning = false;\n  } else {\n    // here we jump 2 seconds into the sound\n    ele.play().time(2);\n    background(250);\n    text('start at beginning', width / 2, height / 2);\n    beginning = true;\n  }\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63969,
            "itemtype": "method",
            "name": "time",
            "params": [
                {
                    "name": "time",
                    "description": "time to jump to (in seconds)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 63983,
            "description": "Returns the duration of the HTML5 media element.",
            "itemtype": "method",
            "name": "duration",
            "return": {
                "description": "duration",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet ele;\nfunction setup() {\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n  //In this example we create\n  //a new p5.MediaElement via createAudio().\n  ele = createAudio('assets/doorbell.mp3');\n  background(250);\n  textAlign(CENTER);\n  text('Click to know the duration!', 10, 25, 70, 80);\n}\nfunction mouseClicked() {\n  ele.play();\n  background(200);\n  //ele.duration dislpays the duration\n  text(ele.duration() + ' seconds', width / 2, height / 2);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64080,
            "description": "helper method for web GL mode to figure out if the element\nhas been modified and might need to be re-uploaded to texture\nmemory between frames.",
            "itemtype": "method",
            "name": "isModified",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "a boolean indicating whether or not the\nimage has been updated or modified since last texture upload.",
                "type": "Boolean"
            },
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64092,
            "description": "helper method for web GL mode to indicate that an element has been\nchanged or unchanged since last upload. gl texture upload will\nset this value to false after uploading the texture; or might set\nit to true if metadata has become available but there is no actual\ntexture data available yet..",
            "itemtype": "method",
            "name": "setModified",
            "params": [
                {
                    "name": "val",
                    "description": "sets whether or not the element has been\nmodified.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64106,
            "description": "Schedule an event to be called when the audio or video\nelement reaches the end. If the element is looping,\nthis will not be called. The element is passed in\nas the argument to the onended callback.",
            "itemtype": "method",
            "name": "onended",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call when the\n                            soundfile has ended. The\n                            media element will be passed\n                            in as the argument to the\n                            callback.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nfunction setup() {\n  let audioEl = createAudio('assets/beat.mp3');\n  audioEl.showControls();\n  audioEl.onended(sayDone);\n}\n\nfunction sayDone(elt) {\n  alert('done playing ' + elt.src);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64137,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64139,
            "description": "Send the audio output of this element to a specified audioNode or\np5.sound object. If no element is provided, connects to p5's main\noutput. That connection is established when this method is first called.\nAll connections are removed by the .disconnect() method.\n\nThis method is meant to be used with the p5.sound.js addon library.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "audioNode",
                    "description": "AudioNode from the Web Audio API,\nor an object from the p5.sound library",
                    "type": "AudioNode|Object"
                }
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64188,
            "description": "Disconnect all Web Audio routing, including to main output.\nThis is useful if you want to re-route the output through\naudio effects, for example.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64203,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64205,
            "description": "Show the default MediaElement controls, as determined by the web browser.",
            "itemtype": "method",
            "name": "showControls",
            "example": [
                "\n<div><code>\nlet ele;\nfunction setup() {\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n  //In this example we create\n  //a new p5.MediaElement via createAudio()\n  ele = createAudio('assets/lucky_dragons.mp3');\n  background(200);\n  textAlign(CENTER);\n  text('Click to Show Controls!', 10, 25, 70, 80);\n}\nfunction mousePressed() {\n  ele.showControls();\n  background(200);\n  text('Controls Shown', width / 2, height / 2);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64236,
            "description": "Hide the default mediaElement controls.",
            "itemtype": "method",
            "name": "hideControls",
            "example": [
                "\n<div><code>\nlet ele;\nfunction setup() {\n  //p5.MediaElement objects are usually created\n  //by calling the createAudio(), createVideo(),\n  //and createCapture() functions.\n  //In this example we create\n  //a new p5.MediaElement via createAudio()\n  ele = createAudio('assets/lucky_dragons.mp3');\n  ele.showControls();\n  background(200);\n  textAlign(CENTER);\n  text('Click to hide Controls!', 10, 25, 70, 80);\n}\nfunction mousePressed() {\n  ele.hideControls();\n  background(200);\n  text('Controls hidden', width / 2, height / 2);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64265,
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64276,
            "description": "Schedule events to trigger every time a MediaElement\n(audio/video) reaches a playback cue point.\n\nAccepts a callback function, a time (in seconds) at which to trigger\nthe callback, and an optional parameter for the callback.\n\nTime will be passed as the first parameter to the callback function,\nand param will be the second parameter.",
            "itemtype": "method",
            "name": "addCue",
            "params": [
                {
                    "name": "time",
                    "description": "Time in seconds, relative to this media\n                            element's playback. For example, to trigger\n                            an event every time playback reaches two\n                            seconds, pass in the number 2. This will be\n                            passed as the first parameter to\n                            the callback function.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Name of a function that will be\n                            called at the given time. The callback will\n                            receive time and (optionally) param as its\n                            two parameters.",
                    "type": "Function"
                },
                {
                    "name": "value",
                    "description": "An object to be passed as the\n                            second parameter to the\n                            callback function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "id ID of this cue,\n                    useful for removeCue(id)",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\n//\n//\nfunction setup() {\n  createCanvas(200, 200);\n\n  let audioEl = createAudio('assets/beat.mp3');\n  audioEl.showControls();\n\n  // schedule three calls to changeBackground\n  audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n  audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n  audioEl.addCue(5.0, changeBackground, color(255, 255, 0));\n}\n\nfunction changeBackground(val) {\n  background(val);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64339,
            "description": "Remove a callback based on its ID. The ID is returned by the\naddCue method.",
            "itemtype": "method",
            "name": "removeCue",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the cue, as returned by addCue",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nlet audioEl, id1, id2;\nfunction setup() {\n  background(255, 255, 255);\n  audioEl = createAudio('assets/beat.mp3');\n  audioEl.showControls();\n  // schedule five calls to changeBackground\n  id1 = audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n  id2 = audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n  text('Click to remove first and last Cue!', 10, 25, 70, 80);\n}\nfunction mousePressed() {\n  audioEl.removeCue(id1);\n  audioEl.removeCue(id2);\n}\nfunction changeBackground(val) {\n  background(val);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64381,
            "description": "Remove all of the callbacks that had originally been scheduled\nvia the addCue method.",
            "itemtype": "method",
            "name": "clearCues",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the cue, as returned by addCue",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nlet audioEl;\nfunction setup() {\n  background(255, 255, 255);\n  audioEl = createAudio('assets/beat.mp3');\n  //Show the default MediaElement controls, as determined by the web browser\n  audioEl.showControls();\n  // schedule calls to changeBackground\n  background(200);\n  text('Click to change Cue!', 10, 25, 70, 80);\n  audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n  audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n}\nfunction mousePressed() {\n  // here we clear the scheduled callbacks\n  audioEl.clearCues();\n  // then we add some more callbacks\n  audioEl.addCue(1, changeBackground, color(2, 2, 2));\n  audioEl.addCue(3, changeBackground, color(255, 255, 0));\n}\nfunction changeBackground(val) {\n  background(val);\n}\n</code></div>"
            ],
            "class": "p5.MediaElement",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64447,
            "description": "Underlying File object. All normal File methods can be called on this.",
            "itemtype": "property",
            "name": "file",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64459,
            "description": "File type (image, text, etc.)",
            "itemtype": "property",
            "name": "type",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64465,
            "description": "File subtype (usually the file extension jpg, png, xml, etc.)",
            "itemtype": "property",
            "name": "subtype",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64471,
            "description": "File name",
            "itemtype": "property",
            "name": "name",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64477,
            "description": "File size",
            "itemtype": "property",
            "name": "size",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64484,
            "description": "URL string containing either image data, the text contents of the file or\na parsed object if file is JSON and p5.XML if XML",
            "itemtype": "property",
            "name": "data",
            "class": "p5.File",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "p5.js",
            "line": 64637,
            "description": "The system variable accelerationY always contains the acceleration of the\ndevice along the y axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move a touchscreen device to register\n// acceleration changes.\nfunction draw() {\n  background(220, 50);\n  fill('magenta');\n  ellipse(width / 2, height / 2, accelerationY);\n}\n</code>\n</div>"
            ],
            "alt": "Magnitude of device acceleration is displayed as ellipse size",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64660,
            "description": "The system variable accelerationZ always contains the acceleration of the\ndevice along the z axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationZ",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move a touchscreen device to register\n// acceleration changes.\nfunction draw() {\n  background(220, 50);\n  fill('magenta');\n  ellipse(width / 2, height / 2, accelerationZ);\n}\n</code>\n</div>"
            ],
            "alt": "Magnitude of device acceleration is displayed as ellipse size",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64685,
            "description": "The system variable pAccelerationX always contains the acceleration of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationX",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64695,
            "description": "The system variable pAccelerationY always contains the acceleration of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationY",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64705,
            "description": "The system variable pAccelerationZ always contains the acceleration of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationZ",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64715,
            "description": "_updatePAccelerations updates the pAcceleration values",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64726,
            "description": "The system variable rotationX always contains the rotation of the\ndevice along the x axis. If the sketch <a href=\"#/p5/angleMode\">\nangleMode()</a> is set to DEGREES, the value will be -180 to 180. If\nit is set to RADIANS, the value will be -PI to PI.\n\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "itemtype": "property",
            "name": "rotationX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  //rotateZ(radians(rotationZ));\n  rotateX(radians(rotationX));\n  //rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64759,
            "description": "The system variable rotationY always contains the rotation of the\ndevice along the y axis. If the sketch <a href=\"#/p5/angleMode\">\nangleMode()</a> is set to DEGREES, the value will be -90 to 90. If\nit is set to RADIANS, the value will be -PI/2 to PI/2.\n\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "itemtype": "property",
            "name": "rotationY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  //rotateZ(radians(rotationZ));\n  //rotateX(radians(rotationX));\n  rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64792,
            "description": "The system variable rotationZ always contains the rotation of the\ndevice along the z axis. If the sketch <a href=\"#/p5/angleMode\">\nangleMode()</a> is set to DEGREES, the value will be 0 to 360. If\nit is set to RADIANS, the value will be 0 to 2*PI.\n\nUnlike rotationX and rotationY, this variable is available for devices\nwith a built-in compass only.\n\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateZ(radians(rotationZ));\n  //rotateX(radians(rotationX));\n  //rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "rotationZ",
            "type": "Number",
            "readonly": "",
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64830,
            "description": "The system variable pRotationX always contains the rotation of the\ndevice along the x axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\nthe value will be -180 to 180. If it is set to RADIANS, the value will\nbe -PI to PI.\n\npRotationX can also be used with rotationX to determine the rotate\ndirection of the device along the X-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationX - pRotationX < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nlet rotateDirection = 'clockwise';\n\n// Simple range conversion to make things simpler.\n// This is not absolutely necessary but the logic\n// will be different in that case.\n\nlet rX = rotationX + 180;\nlet pRX = pRotationX + 180;\n\nif ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\n  rotateDirection = 'clockwise';\n} else if (rX - pRX < 0 || rX - pRX > 270) {\n  rotateDirection = 'counter-clockwise';\n}\n\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationX",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64876,
            "description": "The system variable pRotationY always contains the rotation of the\ndevice along the y axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\nthe value will be -90 to 90. If it is set to RADIANS, the value will\nbe -PI/2 to PI/2.\n\npRotationY can also be used with rotationY to determine the rotate\ndirection of the device along the Y-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationY - pRotationY < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nlet rotateDirection = 'clockwise';\n\n// Simple range conversion to make things simpler.\n// This is not absolutely necessary but the logic\n// will be different in that case.\n\nlet rY = rotationY + 180;\nlet pRY = pRotationY + 180;\n\nif ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\n  rotateDirection = 'clockwise';\n} else if (rY - pRY < 0 || rY - pRY > 270) {\n  rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationY",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64921,
            "description": "The system variable pRotationZ always contains the rotation of the\ndevice along the z axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\nthe value will be 0 to 360. If it is set to RADIANS, the value will\nbe 0 to 2*PI.\n\npRotationZ can also be used with rotationZ to determine the rotate\ndirection of the device along the Z-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationZ - pRotationZ < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nlet rotateDirection = 'clockwise';\n\nif (\n  (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\n  rotationZ - pRotationZ < -270\n) {\n  rotateDirection = 'clockwise';\n} else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\n  rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationZ",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 64980,
            "description": "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a>\nmethod is stored in the turnAxis variable. The turnAxis variable is only defined within\nthe scope of deviceTurned().",
            "itemtype": "property",
            "name": "turnAxis",
            "type": "String",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees in the\n// X-axis to change the value.\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (turnAxis === 'X') {\n    if (value === 0) {\n      value = 255;\n    } else if (value === 255) {\n      value = 0;\n    }\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device turns\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65019,
            "description": "The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.",
            "itemtype": "method",
            "name": "setMoveThreshold",
            "params": [
                {
                    "name": "value",
                    "description": "The threshold value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// You will need to move the device incrementally further\n// the closer the square's color gets to white in order to change the value.\n\nlet value = 0;\nlet threshold = 0.5;\nfunction setup() {\n  setMoveThreshold(threshold);\n}\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  threshold = threshold + 0.1;\n  if (value > 255) {\n    value = 0;\n    threshold = 30;\n  }\n  setMoveThreshold(threshold);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device moves",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65062,
            "description": "The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.",
            "itemtype": "method",
            "name": "setShakeThreshold",
            "params": [
                {
                    "name": "value",
                    "description": "The threshold value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// You will need to shake the device more firmly\n// the closer the box's fill gets to white in order to change the value.\n\nlet value = 0;\nlet threshold = 30;\nfunction setup() {\n  setShakeThreshold(threshold);\n}\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  threshold = threshold + 5;\n  if (value > 255) {\n    value = 0;\n    threshold = 30;\n  }\n  setShakeThreshold(threshold);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device\nis being shaked",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65106,
            "description": "The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\nthe threshold value along X, Y or Z axis. The default threshold is set to 0.5.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>.",
            "itemtype": "method",
            "name": "deviceMoved",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Move the device around\n// to change the value.\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device moves",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65137,
            "description": "The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\nmore than 90 degrees continuously.\n\nThe axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\nvariable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\nX, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.",
            "itemtype": "method",
            "name": "deviceTurned",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees\n// to change the value.\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (value === 0) {\n    value = 255;\n  } else if (value === 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees in the\n// X-axis to change the value.\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (turnAxis === 'X') {\n    if (value === 0) {\n      value = 255;\n    } else if (value === 255) {\n      value = 0;\n    }\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device turns\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65195,
            "description": "The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\nchanges of accelerationX and accelerationY values is more than\nthe threshold value. The default threshold is set to 30.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>.",
            "itemtype": "method",
            "name": "deviceShaken",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Shake the device to change the value.\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceShaken() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device shakes",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "p5.js",
            "line": 65421,
            "description": "The variable keyCode is used to detect special keys such as BACKSPACE,\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\nYou can also check for custom keys by looking up the keyCode of any key\non a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.",
            "itemtype": "property",
            "name": "keyCode",
            "type": "Integer",
            "readonly": "",
            "example": [
                "\n<div><code>\nlet fillVal = 126;\nfunction draw() {\n  fill(fillVal);\n  rect(25, 25, 50, 50);\n}\n\nfunction keyPressed() {\n  if (keyCode === UP_ARROW) {\n    fillVal = 255;\n  } else if (keyCode === DOWN_ARROW) {\n    fillVal = 0;\n  }\n}\n</code></div>\n<div><code>\nfunction draw() {}\nfunction keyPressed() {\n  background('yellow');\n  text(`${key} ${keyCode}`, 10, 40);\n  print(key, ' ', keyCode);\n}\n</code></div>"
            ],
            "alt": "Grey rect center. turns white when up arrow pressed and black when down\nDisplay key pressed and its keyCode in a yellow box",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65460,
            "description": "The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\n\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n\nFor ASCII keys, the key that was pressed is stored in the key variable. However, it\ndoes not distinguish between uppercase and lowercase. For this reason, it\nis recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\ncase of the variable will be distinguished.\n\nBecause of how operating systems handle key repeats, holding down a key\nmay cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyPressed",
            "example": [
                "\n<div>\n<code>\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div class=\"norender\">\n<code>\nfunction keyPressed() {\n  // Do something\n  return false; // prevent any default behaviour\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when key pressed and black when released\nblack rect center. turns white when left arrow pressed and black when right.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65546,
            "description": "The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\nSee <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyReleased",
            "example": [
                "\n<div>\n<code>\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when key pressed and black when pressed again",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65598,
            "description": "The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\naction keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\na keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead.\nThe most recent key typed will be stored in the key variable.\n\nBecause of how operating systems handle key repeats, holding down a key\nwill cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default behaviors attached to various key\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "keyTyped",
            "example": [
                "\n<div>\n<code>\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyTyped() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  // uncomment to prevent any default behavior\n  // return false;\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when 'a' key typed and black when 'b' pressed",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65652,
            "description": "The onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will not fire if the user is\nnot focused on the element we must assume all keys currently down have\nbeen released.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65662,
            "description": "The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.",
            "itemtype": "method",
            "name": "keyIsDown",
            "params": [
                {
                    "name": "code",
                    "description": "The key to check for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether key is down or not",
                "type": "Boolean"
            },
            "example": [
                "\n<div><code>\nlet x = 100;\nlet y = 100;\n\nfunction setup() {\n  createCanvas(512, 512);\n  fill(255, 0, 0);\n}\n\nfunction draw() {\n  if (keyIsDown(LEFT_ARROW)) {\n    x -= 5;\n  }\n\n  if (keyIsDown(RIGHT_ARROW)) {\n    x += 5;\n  }\n\n  if (keyIsDown(UP_ARROW)) {\n    y -= 5;\n  }\n\n  if (keyIsDown(DOWN_ARROW)) {\n    y += 5;\n  }\n\n  clear();\n  ellipse(x, y, 50, 50);\n}\n</code></div>\n\n<div><code>\nlet diameter = 50;\n\nfunction setup() {\n  createCanvas(512, 512);\n}\n\nfunction draw() {\n  // 107 and 187 are keyCodes for \"+\"\n  if (keyIsDown(107) || keyIsDown(187)) {\n    diameter += 1;\n  }\n\n  // 109 and 189 are keyCodes for \"-\"\n  if (keyIsDown(109) || keyIsDown(189)) {\n    diameter -= 1;\n  }\n\n  clear();\n  fill(255, 0, 0);\n  ellipse(50, 50, diameter, diameter);\n}\n</code></div>"
            ],
            "alt": "50x50 red ellipse moves left, right, up and down with arrow presses.\n50x50 red ellipse gets bigger or smaller when + or - are pressed.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65738,
            "description": "The _areDownKeys function returns a boolean true if any keys pressed\nand a false if no keys are currently pressed.\n  \nHelps avoid instances where multiple keys are pressed simultaneously and\nreleasing a single key will then switch the\nkeyIsPressed property to true.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "p5.js",
            "line": 65899,
            "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas. The value at\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\nIf touch is used instead of mouse input, mouseX will hold the x value\nof the most recent touch point.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, 0, mouseX, 100);\n}\n</code>\n</div>"
            ],
            "alt": "horizontal black line moves left and right with mouse x-position",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 65925,
            "description": "The system variable mouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the canvas. The value at\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\nIf touch is used instead of mouse input, mouseY will hold the y value\nof the most recent touch point.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(0, mouseY, 100, mouseY);\n}\n</code>\n</div>"
            ],
            "alt": "vertical black line moves up and down with mouse y-position",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 65951,
            "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n(-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pmouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas to leave a trail\nfunction setup() {\n  //slow down the frameRate to make it more visible\n  frameRate(10);\n}\n\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, mouseY, pmouseX, pmouseY);\n  print(pmouseX + ' -> ' + mouseX);\n}\n</code>\n</div>"
            ],
            "alt": "line trail is created from cursor movements. faster movement make longer line.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 65983,
            "description": "The system variable pmouseY always contains the vertical position of\nthe mouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n(-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pmouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  //draw a square only if the mouse is not moving\n  if (mouseY === pmouseY && mouseX === pmouseX) {\n    rect(20, 20, 60, 60);\n  }\n\n  print(pmouseY + ' -> ' + mouseY);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect center, fuchsia background. rect flickers on mouse movement",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66014,
            "description": "The system variable winMouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nlet myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  let body = document.getElementsByTagName('body')[0];\n  myCanvas.parent(body);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the horizontal mouse position\n  //relative to the window\n  myCanvas.position(winMouseX + 1, windowHeight / 2);\n\n  //the y of the square is relative to the canvas\n  rect(20, mouseY, 60, 60);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect y moves with mouse y and fuchsia canvas moves with mouse x",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66052,
            "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nlet myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  let body = document.getElementsByTagName('body')[0];\n  myCanvas.parent(body);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the vertical mouse position\n  //relative to the window\n  myCanvas.position(windowWidth / 2, winMouseY + 1);\n\n  //the x of the square is relative to the canvas\n  rect(mouseX, 20, 60, 60);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect x moves with mouse x and fuchsia canvas y moves with mouse y",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66090,
            "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pwinMouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nlet myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n}\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current x position is the horizontal mouse speed\n  let speed = abs(winMouseX - pwinMouseX);\n  //change the size of the circle\n  //according to the horizontal speed\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n  //move the canvas to the mouse position\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\n}\n</code>\n</div>"
            ],
            "alt": "fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66130,
            "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window. Note: pwinMouseY will be reset to the current winMouseY\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pwinMouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nlet myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n}\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current y position is the vertical mouse speed\n  let speed = abs(winMouseY - pwinMouseY);\n  //change the size of the circle\n  //according to the vertical speed\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n  //move the canvas to the mouse position\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\n}\n</code>\n</div>"
            ],
            "alt": "fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66170,
            "description": "Processing automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button was pressed last.\nWarning: different browsers may track mouseButton differently.",
            "itemtype": "property",
            "name": "mouseButton",
            "type": "Constant",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed) {\n    if (mouseButton === LEFT) {\n      ellipse(50, 50, 50, 50);\n    }\n    if (mouseButton === RIGHT) {\n      rect(25, 25, 50, 50);\n    }\n    if (mouseButton === CENTER) {\n      triangle(23, 75, 50, 20, 78, 75);\n    }\n  }\n\n  print(mouseButton);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black ellipse appears on center of fuchsia canvas on mouse click/press.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66208,
            "description": "The boolean system variable mouseIsPressed is true if the mouse is pressed\nand false if not.",
            "itemtype": "property",
            "name": "mouseIsPressed",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed) {\n    ellipse(50, 50, 50, 50);\n  } else {\n    rect(25, 25, 50, 50);\n  }\n\n  print(mouseIsPressed);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect becomes ellipse with mouse click/press. fuchsia background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66296,
            "description": "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the page\n// to change its value\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseMoved(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect becomes lighter with mouse movements until white then resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66350,
            "description": "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\na mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\n<a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseDragged",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Drag the mouse across the page\n// to change its value\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseDragged() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseDragged() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseDragged(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns lighter with mouse click and drag until white, resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66430,
            "description": "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\n<a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mousePressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mousePressed() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mousePressed(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66511,
            "description": "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\nreleased. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseReleased",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseReleased() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseReleased(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66587,
            "description": "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers handle clicks differently, so this function is only guaranteed to be\nrun when the left mouse button is clicked. To handle other mouse buttons\nbeing pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseClicked",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nfunction mouseClicked() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseClicked(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66656,
            "description": "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\nlistener has detected a dblclick event which is a part of the\nDOM L3 specification. The doubleClicked event is fired when a\npointing device button (usually a mouse's primary button)\nis clicked twice on a single element. For more info on the\ndblclick event refer to mozilla's documentation here:\nhttps://developer.mozilla.org/en-US/docs/Web/Events/dblclick",
            "itemtype": "method",
            "name": "doubleClicked",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been double clicked\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nfunction doubleClicked() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction doubleClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction doubleClicked(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse doubleClick/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66725,
            "description": "For use with WebGL orbitControl.",
            "itemtype": "property",
            "name": "_mouseWheelDeltaY",
            "type": "Number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66733,
            "description": "For use with WebGL orbitControl.",
            "itemtype": "property",
            "name": "_pmouseWheelDeltaY",
            "type": "Number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66741,
            "description": "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\nevent is detected either triggered by an actual mouse wheel or by a\ntouchpad.<br><br>\nThe event.delta property returns the amount the mouse wheel\nhave scrolled. The values can be positive or negative depending on the\nscroll direction (on OS X with \"natural\" scrolling enabled, the signs\nare inverted).<br><br>\nBrowsers may have different default behaviors attached to various\nmouse events. To prevent any default behavior for this event, add\n\"return false\" to the end of the method.<br><br>\nDue to the current support of the \"wheel\" event on Safari, the function\nmay only work as expected if \"return false\" is included while using Safari.",
            "itemtype": "method",
            "name": "mouseWheel",
            "params": [
                {
                    "name": "event",
                    "description": "optional WheelEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet pos = 25;\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  rect(25, pos, 50, 50);\n}\n\nfunction mouseWheel(event) {\n  print(event.delta);\n  //move the square according to the vertical scroll amount\n  pos += event.delta;\n  //uncomment to block page scrolling\n  //return false;\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect moves up and down with vertical scroll. fuchsia background",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66794,
            "description": "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a>\nlocks the pointer to its current position and makes it invisible.\nUse <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since\nthe last call of draw.\nNote that not all browsers support this feature.\nThis enables you to create experiences that aren't limited by the mouse moving out of the screen\neven if it is repeatedly moved into one direction.\nFor example, a first person perspective experience.",
            "itemtype": "method",
            "name": "requestPointerLock",
            "example": [
                "\n<div class=\"notest\">\n<code>\nlet cam;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  requestPointerLock();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(255);\n  cam.pan(-movedX * 0.001);\n  cam.tilt(movedY * 0.001);\n  sphere(25);\n}\n</code>\n</div>"
            ],
            "alt": "3D scene moves according to mouse mouse movement in a first person perspective",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 66840,
            "description": "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a>\nexits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a>\nfor example to make ui elements usable etc",
            "itemtype": "method",
            "name": "exitPointerLock",
            "example": [
                "\n<div class=\"notest\">\n<code>\n//click the canvas to lock the pointer\n//click again to exit (otherwise escape)\nlet locked = false;\nfunction draw() {\n  background(237, 34, 93);\n}\nfunction mouseClicked() {\n  if (!locked) {\n    locked = true;\n    requestPointerLock();\n  } else {\n    exitPointerLock();\n    locked = false;\n  }\n}\n</code>\n</div>"
            ],
            "alt": "cursor gets locked / unlocked on mouse-click",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "p5.js",
            "line": 67033,
            "description": "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\nIf no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\nbe called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "touchMoved",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Move your finger across the page\n// to change its value\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchMoved(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns lighter with touch until white. resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67105,
            "description": "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\n<a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "touchEnded",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Release touch within the image to\n// change the value of the rectangle\n\nlet value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchEnded() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchEnded() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchEnded(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns white with touch.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67189,
            "description": "This module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67210,
            "description": "Returns the pixel buffer for a canvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "the canvas to get pixels from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "a one-dimensional array containing\n                                  the data in thc RGBA order, with integer\n                                  values between 0 and 255",
                "type": "Uint8ClampedArray"
            },
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67229,
            "description": "Returns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "i",
                    "description": "index of a 1D Image Array",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "32 bit integer value representing\n                                 ARGB value.",
                "type": "Integer"
            },
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67250,
            "description": "Modifies pixels RGBA values to values contained in the data object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixels",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "data",
                    "description": "source 1D array where each value\n                                  represents ARGB values",
                    "type": "Int32Array"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67270,
            "description": "Returns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "canvas to get image data from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "Holder of pixel data (and width and\n                                  height) for a canvas",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67290,
            "description": "Returns a blank ImageData object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67305,
            "description": "Applys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "[description]",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "func",
                    "description": "[description]",
                    "type": "Function(ImageData,Object)"
                },
                {
                    "name": "filterParam",
                    "description": "[description]",
                    "type": "Object"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67350,
            "description": "Converts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67384,
            "description": "Converts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67407,
            "description": "Sets the alpha channel to entirely opaque. No parameter is used.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67423,
            "description": "Sets each pixel to its inverse value. No parameter is used.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67438,
            "description": "Limits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67470,
            "description": "reduces the bright areas in an image",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67557,
            "description": "increases the bright areas in an image",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67831,
            "description": "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.\n\n.<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\nin the display window.\nThese values are numbers. This array is the size (including an appropriate\nfactor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\nmore info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\n\nBefore accessing the pixels of an image, the data must loaded with the\n<a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\n<a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.",
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Image\">p5.Image</a> object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n  for (let j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n\n<div>\n<code>\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n  for (let j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>\n\n<div>\n<code>\nlet pink = color(255, 102, 204);\nlet img = createImage(66, 66);\nimg.loadPixels();\nlet d = pixelDensity();\nlet halfImage = 4 * (img.width * d) * (img.height / 2 * d);\nfor (let i = 0; i < halfImage; i += 4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i + 1] = green(pink);\n  img.pixels[i + 2] = blue(pink);\n  img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "alt": "66x66 dark turquoise rect in center of canvas.\n2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67910,
            "description": "Save the current canvas as an image. The browser will either save the\nfile immediately, or prompt the user with a dialogue window.",
            "itemtype": "method",
            "name": "saveCanvas",
            "params": [
                {
                    "name": "selectedCanvas",
                    "description": "a variable\n                                representing a specific html5 canvas (optional)",
                    "type": "p5.Element|HTMLCanvasElement"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "'jpg' or 'png'",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class='norender notest'><code>\n function setup() {\n let c = createCanvas(100, 100);\n background(255, 0, 0);\n saveCanvas(c, 'myCanvas', 'jpg');\n }\n </code></div>\n <div class='norender notest'><code>\n // note that this example has the same result as above\n // if no canvas is specified, defaults to main canvas\n function setup() {\n let c = createCanvas(100, 100);\n background(255, 0, 0);\n saveCanvas('myCanvas', 'jpg');\n\n // all of the following are valid\n saveCanvas(c, 'myCanvas', 'jpg');\n saveCanvas(c, 'myCanvas.jpg');\n saveCanvas(c, 'myCanvas');\n saveCanvas(c);\n saveCanvas('myCanvas', 'png');\n saveCanvas('myCanvas');\n saveCanvas();\n }\n </code></div>"
            ],
            "alt": "no image displayed\n no image displayed\n no image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 67952,
            "itemtype": "method",
            "name": "saveCanvas",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 68249,
            "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will pop up save dialogues in an\nattempt to download all of the images that have just been created. With the\ncallback provided the image data isn't saved by default but instead passed\nas an argument to the callback function as an array of objects, with the\nsize of array equal to the total number of frames.\n\nNote that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\nTo export longer animations, you might look into a library like\n<a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.",
            "itemtype": "method",
            "name": "saveFrames",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "'jpg' or 'png'",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "Duration in seconds to save the frames for.",
                    "type": "Number"
                },
                {
                    "name": "framerate",
                    "description": "Framerate to save the frames in.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A callback function that will be executed\n                                   to handle the image data. This function\n                                   should accept an array as argument. The\n                                   array will contain the specified number of\n                                   frames of objects. Each object has three\n                                   properties: imageData - an\n                                   image/octet-stream, filename and extension.",
                    "type": "Function(Array)",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n function draw() {\n background(mouseX);\n }\n\n function mousePressed() {\n saveFrames('out', 'png', 1, 25, data => {\n   print(data);\n });\n }\n </code></div>"
            ],
            "alt": "canvas background goes from light to dark with mouse x.",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "p5.js",
            "line": 68703,
            "description": "Validates clipping params. Per drawImage spec sWidth and sHight cannot be\nnegative or greater than image intrinsic width and height",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sVal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "iVal",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68720,
            "description": "Draw an image to the p5.js canvas.\n\nThis function can be used with different numbers of parameters. The\nsimplest use requires only three parameters: img, x, and y—where (x, y) is\nthe position of the image. Two more parameters can optionally be added to\nspecify the width and height of the image.\n\nThis function can also be used with all eight Number parameters. To\ndifferentiate between all these parameters, p5.js uses the language of\n\"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\nimage\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n\"source image\" dimensions can be useful when you want to display a\nsubsection of the source image instead of the whole thing. Here's a diagram\nto explain further:\n<img src=\"assets/drawImage.png\"></img>",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "the image to display",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "x",
                    "description": "the x-coordinate of the top-left corner of the image",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate of the top-left corner of the image",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width to draw the image",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "the height to draw the image",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  // Top-left corner of the img is at (0, 0)\n  // Width and height are the img's original width and height\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  background(50);\n  // Top-left corner of the img is at (10, 10)\n  // Width and height are 50 x 50\n  image(img, 10, 10, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // Here, we use a callback to display the image after loading\n  loadImage('assets/laDefense.jpg', img => {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/gradient.png');\n}\nfunction setup() {\n  // 1. Background image\n  // Top-left corner of the img is at (0, 0)\n  // Width and height are the img's original width and height, 100 x 100\n  image(img, 0, 0);\n  // 2. Top right image\n  // Top-left corner of destination rectangle is at (50, 0)\n  // Destination rectangle width and height are 40 x 20\n  // The next parameters are relative to the source image:\n  // - Starting at position (50, 50) on the source image, capture a 50 x 50\n  // subsection\n  // - Draw this subsection to fill the dimensions of the destination rectangle\n  image(img, 50, 0, 40, 20, 50, 50, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "image of the underside of a white umbrella and gridded ceiling above\nimage of the underside of a white umbrella and gridded ceiling above",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68807,
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "dx",
                    "description": "the x-coordinate of the destination\n                          rectangle in which to draw the source image",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "the y-coordinate of the destination\n                          rectangle in which to draw the source image",
                    "type": "Number"
                },
                {
                    "name": "dWidth",
                    "description": "the width of the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "dHeight",
                    "description": "the height of the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sx",
                    "description": "the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sWidth",
                    "description": "the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sHeight",
                    "description": "the height of the subsection of the\n                           source image to draw into the destination rectangle",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68896,
            "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\n255.",
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204); // Tint blue\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204, 126); // Tint blue and set transparency\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(255, 126); // Apply transparency without changing color\n  image(img, 50, 0);\n}\n</code>\n</div>"
            ],
            "alt": "2 side by side images of umbrella and ceiling, one image with blue tint\nImages of umbrella and ceiling, one half of image with blue tint\n2 side by side images of umbrella and ceiling, one image translucent",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68967,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68972,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68978,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 68984,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "color",
                    "description": "the tint color",
                    "type": "p5.Color"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 69001,
            "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
            "itemtype": "method",
            "name": "noTint",
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  tint(0, 153, 204); // Tint blue\n  image(img, 0, 0);\n  noTint(); // Disable tint\n  image(img, 50, 0);\n}\n</code>\n</div>"
            ],
            "alt": "2 side by side images of bricks, left image with blue tint",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 69029,
            "description": "Apply the current tint color to the input image, return the resulting\ncanvas.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "image to be tinted",
                    "type": "p5.Image"
                }
            ],
            "return": {
                "description": "The resulting tinted canvas",
                "type": "Canvas"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 69065,
            "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n\nimageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\n\nimageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height.",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, or CENTER",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CORNER);\n  image(img, 10, 10, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CORNERS);\n  image(img, 10, 10, 90, 40);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CENTER);\n  image(img, 50, 50, 80, 80);\n}\n</code>\n</div>"
            ],
            "alt": "small square image of bricks\nhorizontal rectangle image of bricks\nlarge square image of bricks",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 69373,
            "description": "Helper function for animating GIF-based images with time",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69404,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69412,
            "description": "Loads the pixels data for this image into the [pixels] attribute.",
            "itemtype": "method",
            "name": "loadPixels",
            "example": [
                "\n<div><code>\nlet myImage;\nlet halfImage;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  myImage.loadPixels();\n  halfImage = 4 * myImage.width * myImage.height / 2;\n  for (let i = 0; i < halfImage; i++) {\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\n  }\n  myImage.updatePixels();\n}\n\nfunction draw() {\n  image(myImage, 0, 0, width, height);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains vertically stacked",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69447,
            "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array.\n\nIf this image is an animated GIF then the pixels will be updated\nin the frame that is currently displayed.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nlet myImage;\nlet halfImage;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  myImage.loadPixels();\n  halfImage = 4 * myImage.width * myImage.height / 2;\n  for (let i = 0; i < halfImage; i++) {\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\n  }\n  myImage.updatePixels();\n}\n\nfunction draw() {\n  image(myImage, 0, 0, width, height);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains vertically stacked",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69489,
            "itemtype": "method",
            "name": "updatePixels",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69497,
            "description": "Get a region of pixels from an image.\n\nIf no params are passed, the whole image is returned.\nIf x and y are the only params passed a single pixel is extracted.\nIf all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a>\nis returned.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "p5.Image"
            },
            "example": [
                "\n<div><code>\nlet myImage;\nlet c;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  background(myImage);\n  noStroke();\n  c = myImage.get(60, 90);\n  fill(c);\n  rect(25, 25, 50, 50);\n}\n\n//get() returns color here\n</code></div>"
            ],
            "alt": "image of rocky mountains with 50x50 green rect in front",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69534,
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "the whole <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "p5.Image"
            },
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69538,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format [R, G, B, A]",
                "type": "Number[]"
            },
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69552,
            "description": "Set the color of a single pixel or write an image into\nthis <a href=\"#/p5.Image\">p5.Image</a>.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "grayscale value | pixel array |\n                               a <a href=\"#/p5.Color\">p5.Color</a> | image to copy",
                    "type": "Number|Number[]|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n  for (let j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>"
            ],
            "alt": "2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69589,
            "description": "Resize the image to a new width and height. To make the image scale\nproportionally, use 0 as the value for the wide or high parameter.\nFor instance, to make the width of an image 150 pixels, and change\nthe height using the same proportion, use resize(150, 0).",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the resized image width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the resized image height",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nlet img;\n\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n  \nfunction draw() {\n  image(img, 0, 0);\n}\n\nfunction mousePressed() {\n  img.resize(50, 100);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. zoomed in",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69696,
            "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nlet photo;\nlet bricks;\nlet x;\nlet y;\n\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n  x = bricks.width / 2;\n  y = bricks.height / 2;\n  photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);\n  image(photo, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains and smaller image on top of bricks at top left",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69736,
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69758,
            "description": "Masks part of an image from displaying by loading another\nimage and using its alpha channel as an alpha channel for\nthis image. Masks are cumulative, one applied to an image\nobject, they cannot be removed.",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                }
            ],
            "example": [
                "\n<div><code>\nlet photo, maskImage;\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n  maskImage = loadImage('assets/mask2.png');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  photo.mask(maskImage);\n  image(photo, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains with white at right\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69820,
            "description": "Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a>\n\nTHRESHOLD\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nGRAY\nConverts any colors in the image to grayscale equivalents. No parameter\nis used.\n\nOPAQUE\nSets the alpha channel to entirely opaque. No parameter is used.\n\nINVERT\nSets each pixel to its inverse value. No parameter is used.\n\nPOSTERIZE\nLimits each channel of the image to the number of colors specified as the\nparameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nBLUR\nExecutes a Gaussian blur with the level parameter specifying the extent\nof the blurring. If no parameter is used, the blur is equivalent to\nGaussian blur of radius 1. Larger values increase the blur.\n\nERODE\nReduces the light areas. No parameter is used.\n\nDILATE\nIncreases the light areas. No parameter is used.\n\nfilter() does not work in WEBGL mode.\nA similar effect can be achieved in WEBGL mode using custom\nshaders. Adam Ferriss has written\na <a href=\"https://github.com/aferriss/p5jsShaderExamples\"\ntarget='_blank'>selection of shader examples</a> that contains many\nof the effects present in the filter examples.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filterType",
                    "description": "either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter",
                    "type": "Constant"
                },
                {
                    "name": "filterParam",
                    "description": "an optional parameter unique\n                               to each filter, see above",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nlet photo1;\nlet photo2;\n\nfunction preload() {\n  photo1 = loadImage('assets/rockies.jpg');\n  photo2 = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  photo2.filter(GRAY);\n  image(photo1, 0, 0);\n  image(photo2, width / 2, 0);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains left one in color, right in black and white",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69893,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n\nAvailable blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div><code>\nlet mountains;\nlet bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>\n<div><code>\nlet mountains;\nlet bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>\n<div><code>\nlet mountains;\nlet bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69970,
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "",
                    "type": "Constant"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 69995,
            "description": "helper method for web GL mode to indicate that an image has been\nchanged or unchanged since last upload. gl texture upload will\nset this value to false after uploading the texture.",
            "itemtype": "method",
            "name": "setModified",
            "params": [
                {
                    "name": "val",
                    "description": "sets whether or not the image has been\nmodified.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70008,
            "description": "helper method for web GL mode to figure out if the image\nhas been modified and might need to be re-uploaded to texture\nmemory between frames.",
            "itemtype": "method",
            "name": "isModified",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "a boolean indicating whether or not the\nimage has been updated or modified since last texture upload.",
                "type": "Boolean"
            },
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70021,
            "description": "Saves the image to a file and force the browser to download it.\nAccepts two strings for filename and file extension\nSupports png (default), jpg, and gif\n<br><br>\nNote that the file will only be downloaded as an animated GIF\nif the p5.Image was loaded from a GIF file.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "filename",
                    "description": "give your file a name",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "'png' or 'jpg'",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div><code>\nlet photo;\n\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n}\n\nfunction draw() {\n  image(photo, 0, 0);\n}\n\nfunction keyTyped() {\n  if (key === 's') {\n    photo.save('photo', 'png');\n  }\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70062,
            "description": "Starts an animated GIF over at the beginning state.",
            "itemtype": "method",
            "name": "reset",
            "example": [
                "\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/arnott-wallace-wink-loop-once.gif');\n}\n\nfunction draw() {\n  background(255);\n  // The GIF file that we loaded only loops once\n  // so it freezes on the last frame after playing through\n  image(gif, 0, 0);\n}\n\nfunction mousePressed() {\n  // Click to reset the GIF and begin playback from start\n  gif.reset();\n}\n</code></div>"
            ],
            "alt": "Animated image of a cartoon face that winks once and then freezes\nWhen you click it animates again, winks once and freezes",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70103,
            "description": "Gets the index for the frame that is currently visible in an animated GIF.",
            "itemtype": "method",
            "name": "getCurrentFrame",
            "return": {
                "description": "The index for the currently displaying frame in animated GIF",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n}\n\nfunction draw() {\n  let frame = gif.getCurrentFrame();\n  image(gif, 0, 0);\n  text(frame, 10, 90);\n}\n</code></div>"
            ],
            "alt": "Animated image of a cartoon eye looking around and then\nlooking outwards, in the lower-left hand corner a number counts\nup quickly to 124 and then starts back over at 0",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70134,
            "description": "Sets the index of the frame that is currently visible in an animated GIF",
            "itemtype": "method",
            "name": "setFrame",
            "params": [
                {
                    "name": "index",
                    "description": "the index for the frame that should be displayed",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n}\n\n// Move your mouse up and down over canvas to see the GIF\n// frames animate\nfunction draw() {\n  gif.pause();\n  image(gif, 0, 0);\n  // Get the highest frame number which is the number of frames - 1\n  let maxFrame = gif.numFrames() - 1;\n  // Set the current frame that is mapped to be relative to mouse position\n  let frameNumber = floor(map(mouseY, 0, height, 0, maxFrame, true));\n  gif.setFrame(frameNumber);\n}\n</code></div>"
            ],
            "alt": "A still image of a cartoon eye that looks around when you move your mouse\nup and down over the canvas",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70179,
            "description": "Returns the number of frames in an animated GIF",
            "itemtype": "method",
            "name": "numFrames",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "     The number of frames in the animated GIF\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n}\n\n// Move your mouse up and down over canvas to see the GIF\n// frames animate\nfunction draw() {\n  gif.pause();\n  image(gif, 0, 0);\n  // Get the highest frame number which is the number of frames - 1\n  let maxFrame = gif.numFrames() - 1;\n  // Set the current frame that is mapped to be relative to mouse position\n  let frameNumber = floor(map(mouseY, 0, height, 0, maxFrame, true));\n  gif.setFrame(frameNumber);\n}\n</code></div>"
            ],
            "alt": "A still image of a cartoon eye that looks around when you move your mouse\nup and down over the canvas",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70214,
            "description": "Plays an animated GIF that was paused with\n<a href=\"#/p5.Image/pause\">pause()</a>",
            "itemtype": "method",
            "name": "play",
            "example": [
                "\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/nancy-liang-wind-loop-forever.gif');\n}\n\nfunction draw() {\n  background(255);\n  image(gif, 0, 0);\n}\n\nfunction mousePressed() {\n  gif.pause();\n}\n\nfunction mouseReleased() {\n  gif.play();\n}\n</code></div>"
            ],
            "alt": "An animated GIF of a drawing of small child with\nhair blowing in the wind, when you click the image\nfreezes when you release it animates again",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70251,
            "description": "Pauses an animated GIF.",
            "itemtype": "method",
            "name": "pause",
            "example": [
                "\n<div><code>\nlet gif;\n\nfunction preload() {\n  gif = loadImage('assets/nancy-liang-wind-loop-forever.gif');\n}\n\nfunction draw() {\n  background(255);\n  image(gif, 0, 0);\n}\n\nfunction mousePressed() {\n  gif.pause();\n}\n\nfunction mouseReleased() {\n  gif.play();\n}\n</code></div>"
            ],
            "alt": "An animated GIF of a drawing of small child with\nhair blowing in the wind, when you click the image\nfreezes when you release it animates again",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70287,
            "description": "Changes the delay between frames in an animated GIF. There is an optional second parameter that\nindicates an index for a specific frame that should have its delay modified. If no index is given, all frames\nwill have the new delay.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "d",
                    "description": "the amount in milliseconds to delay between switching frames",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "the index of the frame that should have the new delay value {optional}",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nlet gifFast, gifSlow;\n\nfunction preload() {\n  gifFast = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n  gifSlow = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n}\n\nfunction setup() {\n  gifFast.resize(width / 2, height / 2);\n  gifSlow.resize(width / 2, height / 2);\n\n  //Change the delay here\n  gifFast.delay(10);\n  gifSlow.delay(100);\n}\n\nfunction draw() {\n  background(255);\n  image(gifFast, 0, 0);\n  image(gifSlow, width / 2, 0);\n}\n</code></div>"
            ],
            "alt": "Two animated gifs of cartoon eyes looking around\nThe gif on the left animates quickly, on the right\nthe animation is much slower",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "p5.js",
            "line": 70519,
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "",
                    "type": "Constant"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70548,
            "description": "Copies a region of the canvas to another region of the canvas\nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nlet img;\n\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  background(img);\n  copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\n  stroke(255);\n  noFill();\n  // Rectangle shows area being copied\n  rect(7, 22, 10, 10);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70590,
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70700,
            "description": "Applies a filter to the canvas. The presets options are:\n\nTHRESHOLD\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nGRAY\nConverts any colors in the image to grayscale equivalents. No parameter\nis used.\n\nOPAQUE\nSets the alpha channel to entirely opaque. No parameter is used.\n\nINVERT\nSets each pixel to its inverse value. No parameter is used.\n\nPOSTERIZE\nLimits each channel of the image to the number of colors specified as the\nparameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nBLUR\nExecutes a Gaussian blur with the level parameter specifying the extent\nof the blurring. If no parameter is used, the blur is equivalent to\nGaussian blur of radius 1. Larger values increase the blur.\n\nERODE\nReduces the light areas. No parameter is used.\n\nDILATE\nIncreases the light areas. No parameter is used.\n\nfilter() does not work in WEBGL mode.\nA similar effect can be achieved in WEBGL mode using custom\nshaders. Adam Ferriss has written\na <a href=\"https://github.com/aferriss/p5jsShaderExamples\"\ntarget='_blank'>selection of shader examples</a> that contains many\nof the effects present in the filter examples.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filterType",
                    "description": "either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter",
                    "type": "Constant"
                },
                {
                    "name": "filterParam",
                    "description": "an optional parameter unique\n                               to each filter, see above",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(THRESHOLD);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(GRAY);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(OPAQUE);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(INVERT);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(POSTERIZE, 3);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(DILATE);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(BLUR, 3);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(ERODE);\n}\n</code>\n</div>"
            ],
            "alt": "black and white image of a brick wall.\ngreyscale image of a brickwall\nimage of a brickwall\njade colored image of a brickwall\nred and pink image of a brickwall\nimage of a brickwall\nblurry image of a brickwall\nimage of a brickwall\nimage of a brickwall with less detail",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70874,
            "description": "Get a region of pixels, or a single pixel, from the canvas.\n\nReturns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned.\nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When\ngetting an image, the x and y parameters define the coordinates for the\nupper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\nget(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is\n```javascript\nlet x, y, d; // set these to the coordinates\nlet off = (y * width + x) * d * 4;\nlet components = [\n  pixels[off],\n  pixels[off + 1],\n  pixels[off + 2],\n  pixels[off + 3]\n];\nprint(components);\n```\nSee the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n\nIf you want to extract an array of colors or a subimage from an p5.Image object,\ntake a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  let c = get();\n  image(c, width / 2, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  let c = get(50, 90);\n  fill(c);\n  noStroke();\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "2 images of the rocky mountains, side-by-side\nImage of the rocky mountains with 50x50 green rect in center of canvas",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70944,
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "the whole <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "p5.Image"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70948,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format [R, G, B, A]",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 70963,
            "description": "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\nfunction must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\nNote that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\nwill occur.",
            "itemtype": "method",
            "name": "loadPixels",
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  image(img, 0, 0, width, height);\n  let d = pixelDensity();\n  let halfImage = 4 * (width * d) * (height * d / 2);\n  loadPixels();\n  for (let i = 0; i < halfImage; i++) {\n    pixels[i + halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "alt": "two images of the rocky mountains. one on top, one on bottom of canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71006,
            "description": "Changes the color of any pixel, or writes an image directly to the\ndisplay window.\nThe x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n\nAfter using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\nThis should be called once all pixels have been set, and must be called before\ncalling .<a href=\"#/p5/get\">get()</a> or drawing the image.\n\nSetting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\nvalues directly may be complicated when working with a retina display,\nbut will perform better when lots of pixels need to be set directly on\nevery loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "insert a grayscale value | a pixel array |\n                               a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy",
                    "type": "Number|Number[]|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet black = color(0);\nset(30, 20, black);\nset(85, 20, black);\nset(85, 75, black);\nset(30, 75, black);\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nfor (let i = 30; i < width - 15; i++) {\n  for (let j = 20; j < height - 25; j++) {\n    let c = color(204 - j, 153 - i, 0);\n    set(i, j, c);\n  }\n}\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  set(0, 0, img);\n  updatePixels();\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n</code>\n</div>"
            ],
            "alt": "4 black points in the shape of a square middle-right of canvas.\nsquare with orangey-brown gradient lightening at bottom right.\nimage of the rocky mountains. with lines like an 'x' through the center.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71078,
            "description": "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\nUse in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from\nthe array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\nnecessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\npixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\n<a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the upper-left corner of region\n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the upper-left corner of region\n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of region to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of region to update",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  image(img, 0, 0, width, height);\n  let d = pixelDensity();\n  let halfImage = 4 * (width * d) * (height * d / 2);\n  loadPixels();\n  for (let i = 0; i < halfImage; i++) {\n    pixels[i + halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "alt": "two images of the rocky mountains. one on top, one on bottom of canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71165,
            "description": "Loads a JSON file from a file or a URL, and returns an Object.\nNote that even if the JSON file contains an Array, an Object will be\nreturned with index numbers as keys.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. JSONP is supported via a polyfill and you\ncan pass in as the second argument an object with definitions of the json\ncallback following the syntax specified <a href=\"https://github.com/camsong/\nfetch-jsonp\">here</a>.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "jsonpOptions",
                    "description": "options object for jsonp related settings",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\" or \"jsonp\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "JSON data",
                "type": "Object|Array"
            },
            "example": [
                "\n\nCalling <a href=\"#/p5/loadJSON\">loadJSON()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n\n<div><code>\n// Examples use USGS Earthquake API:\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\nlet earthquakes;\nfunction preload() {\n  // Get the most recent earthquake in the database\n  let url =\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n    'summary/all_day.geojson';\n  earthquakes = loadJSON(url);\n}\n\nfunction setup() {\n  noLoop();\n}\n\nfunction draw() {\n  background(200);\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  let earthquakeMag = earthquakes.features[0].properties.mag;\n  let earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n}\n</code></div>\n\nOutside of preload(), you may supply a callback function to handle the\nobject:\n<div><code>\nfunction setup() {\n  noLoop();\n  let url =\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n    'summary/all_day.geojson';\n  loadJSON(url, drawEarthquake);\n}\n\nfunction draw() {\n  background(200);\n}\n\nfunction drawEarthquake(earthquakes) {\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  let earthquakeMag = earthquakes.features[0].properties.mag;\n  let earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n}\n</code></div>"
            ],
            "alt": "50x50 ellipse that changes from black to white depending on the current humidity\n50x50 ellipse that changes from black to white depending on the current humidity",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71249,
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Array"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71257,
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Array"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71335,
            "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n\nCalling loadStrings() inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n\n<div><code>\nlet result;\nfunction preload() {\n  result = loadStrings('assets/test.txt');\n}\n  \nfunction setup() {\n  background(200);\n  text(random(result), 10, 10, 80, 80);\n}\n</code></div>\n\nOutside of preload(), you may supply a callback function to handle the\nobject:\n\n<div><code>\nfunction setup() {\n  loadStrings('assets/test.txt', pickString);\n}\n\nfunction pickString(result) {\n  background(200);\n  text(random(result), 10, 10, 80, 80);\n}\n</code></div>"
            ],
            "alt": "randomly generated text from a file, for example \"i smell like butter\"\nrandomly generated text from a file, for example \"i have three feet\"",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71462,
            "description": "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject:\n\nAll files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadTable",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "parse the table by comma-separated values \"csv\", semicolon-separated\n                                     values \"ssv\", or tab-separated values \"tsv\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "header",
                    "description": "\"header\" to indicate table has header row",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                     <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\n                                     <a href=\"#/p5.Table\">Table</a> object is passed in as the\n                                     first argument.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Table\">Table</a> object containing data",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'>\n<code>\n// Given the following CSV file called \"mammals.csv\"\n// located in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n  //the file can be remote\n  //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n  //                  \"csv\", \"header\");\n}\n\nfunction setup() {\n  //count the columns\n  print(table.getRowCount() + ' total rows in table');\n  print(table.getColumnCount() + ' total columns in table');\n\n  print(table.getColumn('name'));\n  //[\"Goat\", \"Leopard\", \"Zebra\"]\n\n  //cycle through the table\n  for (let r = 0; r < table.getRowCount(); r++)\n    for (let c = 0; c < table.getColumnCount(); c++) {\n      print(table.getString(r, c));\n    }\n}\n</code>\n</div>"
            ],
            "alt": "randomly generated text from a file, for example \"i smell like butter\"\nrandomly generated text from a file, for example \"i have three feet\"",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71742,
            "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadXML",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "XML object containing data",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let children = xml.getChildren('animal');\n\n  for (let i = 0; i < children.length; i++) {\n    let id = children[i].getNum('id');\n    let coloring = children[i].getString('species');\n    let name = children[i].getContent();\n    print(id + ', ' + coloring + ', ' + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71859,
            "description": "This method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadBytes",
            "params": [
                {
                    "name": "file",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\n                                   completes",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if there\n                                   is an error",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object whose 'bytes' property will be the loaded buffer",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'><code>\nlet data;\n\nfunction preload() {\n  data = loadBytes('assets/mammals.xml');\n}\n\nfunction setup() {\n  for (let i = 0; i < 5; i++) {\n    console.log(data.bytes[i].toString(16));\n  }\n}\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71919,
            "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\na Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\nwhich can be used to initialize typed arrays (such as Uint8Array).",
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\n                                   \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object|Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div class='norender'><code>\n// Examples use USGS Earthquake API:\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\nlet earthquakes;\nfunction preload() {\n  // Get the most recent earthquake in the database\n  let url =\n      'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\n    'format=geojson&limit=1&orderby=time';\n  httpGet(url, 'jsonp', false, function(response) {\n    // when the HTTP request completes, populate the variable that holds the\n    // earthquake data used in the visualization.\n    earthquakes = response;\n  });\n}\n\nfunction draw() {\n  if (!earthquakes) {\n    // Wait until the earthquake data has loaded before drawing.\n    return;\n  }\n  background(200);\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  let earthquakeMag = earthquakes.features[0].properties.mag;\n  let earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n  noLoop();\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71973,
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object|Boolean"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71981,
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 71996,
            "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'POST')</code>.",
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\".\n                                   If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object|Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div>\n<code>\n// Examples use jsonplaceholder.typicode.com for a Mock Data API\n\nlet url = 'https://jsonplaceholder.typicode.com/posts';\nlet postData = { userId: 1, title: 'p5 Clicked!', body: 'p5.js is very cool.' };\n\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n}\n\nfunction mousePressed() {\n  httpPost(url, 'json', postData, function(result) {\n    strokeWeight(2);\n    text(result.body, mouseX, mouseY);\n  });\n}\n</code>\n</div>\n\n<div><code>\nlet url = 'ttps://invalidURL'; // A bad URL that will cause errors\nlet postData = { title: 'p5 Clicked!', body: 'p5.js is very cool.' };\n\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n}\n\nfunction mousePressed() {\n  httpPost(\n    url,\n    'json',\n    postData,\n    function(result) {\n      // ... won't be called\n    },\n    function(error) {\n      strokeWeight(2);\n      text(error.toString(), mouseX, mouseY);\n    }\n  );\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 72063,
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object|Boolean"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 72071,
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 72086,
            "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.<br><br>\nFor more advanced use, you may also pass in the path as the first argument\nand a object as the second argument, the signature follows the one specified\nin the Fetch API specification.\nThis method is suitable for fetching files up to size of 64MB when \"GET\" is used.",
            "itemtype": "method",
            "name": "httpDo",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "either \"GET\", \"POST\", or \"PUT\",\n                                   defaults to \"GET\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div>\n<code>\n// Examples use USGS Earthquake API:\n// https://earthquake.usgs.gov/fdsnws/event/1/#methods\n\n// displays an animation of all USGS earthquakes\nlet earthquakes;\nlet eqFeatureIndex = 0;\n\nfunction preload() {\n  let url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n  httpDo(\n    url,\n    {\n      method: 'GET',\n      // Other Request options, like special headers for apis\n      headers: { authorization: 'Bearer secretKey' }\n    },\n    function(res) {\n      earthquakes = res;\n    }\n  );\n}\n\nfunction draw() {\n  // wait until the data is loaded\n  if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\n    return;\n  }\n  clear();\n\n  let feature = earthquakes.features[eqFeatureIndex];\n  let mag = feature.properties.mag;\n  let rad = mag / 11 * ((width + height) / 2);\n  fill(255, 0, 0, 100);\n  ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\n\n  if (eqFeatureIndex >= earthquakes.features.length) {\n    eqFeatureIndex = 0;\n  } else {\n    eqFeatureIndex += 1;\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 72157,
            "itemtype": "method",
            "name": "httpDo",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Request object options as documented in the\n                                   \"fetch\" API\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "p5.js",
            "line": 72325,
            "itemtype": "method",
            "name": "createWriter",
            "params": [
                {
                    "name": "name",
                    "description": "name of the file to be created",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.PrintWriter"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  text('click here to save', 10, 10, 70, 80);\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    const writer = createWriter('squares.txt');\n    for (let i = 0; i < 10; i++) {\n      writer.print(i * i);\n    }\n    writer.close();\n    writer.clear();\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72380,
            "description": "Writes data to the PrintWriter stream",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "data",
                    "description": "all data to be written by the PrintWriter",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div class=\"norender notest\">\n<code>\n// creates a file called 'newFile.txt'\nlet writer = createWriter('newFile.txt');\n// write 'Hello world!'' to the file\nwriter.write(['Hello world!']);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile2.txt'\nlet writer = createWriter('newFile2.txt');\n// write 'apples,bananas,123' to the file\nwriter.write(['apples', 'bananas', 123]);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile3.txt'\nlet writer = createWriter('newFile3.txt');\n// write 'My name is: Teddy' to the file\nwriter.write('My name is:');\nwriter.write(' Teddy');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n  button = createButton('SAVE FILE');\n  button.position(21, 40);\n  button.mousePressed(createFile);\n}\n\nfunction createFile() {\n  // creates a file called 'newFile.txt'\n  let writer = createWriter('newFile.txt');\n  // write 'Hello world!'' to the file\n  writer.write(['Hello world!']);\n  // close the PrintWriter and save the file\n  writer.close();\n}\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72439,
            "description": "Writes data to the PrintWriter stream, and adds a new line at the end",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "data",
                    "description": "all data to be printed by the PrintWriter",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile.txt'\nlet writer = createWriter('newFile.txt');\n// creates a file containing\n//  My name is:\n//  Teddy\nwriter.print('My name is:');\nwriter.print('Teddy');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\nlet writer;\n\nfunction setup() {\n  createCanvas(400, 400);\n  // create a PrintWriter\n  writer = createWriter('newFile.txt');\n}\n\nfunction draw() {\n  writer.print([mouseX, mouseY]);\n}\n\nfunction mouseClicked() {\n  writer.close();\n}\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72480,
            "description": "Clears the data already written to the PrintWriter object",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n<div class =\"norender notest\"><code>\n// create writer object\nlet writer = createWriter('newFile.txt');\nwriter.write(['clear me']);\n// clear writer object here\nwriter.clear();\n// close writer\nwriter.close();\n</code></div>\n<div>\n<code>\nfunction setup() {\n  button = createButton('CLEAR ME');\n  button.position(21, 40);\n  button.mousePressed(createFile);\n}\n\nfunction createFile() {\n  let writer = createWriter('newFile.txt');\n  writer.write(['clear me']);\n  writer.clear();\n  writer.close();\n}\n</code>\n</div>\n"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72514,
            "description": "Closes the PrintWriter",
            "itemtype": "method",
            "name": "close",
            "example": [
                "\n<div class=\"norender notest\">\n<code>\n// create a file called 'newFile.txt'\nlet writer = createWriter('newFile.txt');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// create a file called 'newFile2.txt'\nlet writer = createWriter('newFile2.txt');\n// write some data to the file\nwriter.write([100, 101, 102]);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72563,
            "description": "Saves a given element(image, text, json, csv, wav, or html) to the client's\ncomputer. The first parameter can be a pointer to element we want to save.\nThe element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of\nStrings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table\n</a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires\np5.sound). The second parameter is a filename (including extension).The\nthird parameter is for options specific to this type of object. This method\nwill save a file that fits the given parameters.\nIf it is called without specifying an element, by default it will save the\nwhole canvas as an image file. You can optionally specify a filename as\nthe first parameter in such a case.\n**Note that it is not recommended to\ncall this method within draw, as it will open a new save dialog on every\nrender.**",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "objectOrFilename",
                    "description": "If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "filename",
                    "description": "If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.",
                    "type": "Boolean|String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Saves the canvas as an image\n cnv = createCanvas(300, 300);\n save(cnv, 'myCanvas.jpg');\n\n // Saves the canvas as an image by default\n save('myCanvas.jpg');\n </code></div>\n\n<div class=\"norender\"><code>\n // Saves p5.Image as an image\n img = createImage(10, 10);\n save(img, 'myImage.png');\n </code></div>\n\n <div class=\"norender\"><code>\n // Saves p5.Renderer object as an image\n obj = createGraphics(100, 100);\n save(obj, 'myObject.png');\n </code></div>\n\n <div class=\"norender\"><code>\n let myTable = new p5.Table();\n // Saves table as html file\n save(myTable, 'myTable.html');\n\n // Comma Separated Values\n save(myTable, 'myTable.csv');\n\n // Tab Separated Values\n save(myTable, 'myTable.tsv');\n </code></div>\n\n <div class=\"norender\"><code>\n let myJSON = { a: 1, b: true };\n\n // Saves pretty JSON\n save(myJSON, 'my.json');\n\n // Optimizes JSON filesize\n save(myJSON, 'my.json', true);\n </code></div>\n\n <div class=\"norender\"><code>\n // Saves array of strings to text file with line breaks after each item\n let arrayOfStrings = ['a', 'b'];\n save(arrayOfStrings, 'my.txt');\n </code></div>"
            ],
            "alt": "An example for saving a canvas as an image.\n An example for saving a p5.Image element as an image.\n An example for saving a p5.Renderer element.\n An example showing how to save a table in formats of HTML, CSV and TSV.\n An example for saving JSON to a txt file with some extra arguments.\n An example for saving an array of strings to text file with line breaks.",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72708,
            "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Array|Object"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optimize",
                    "description": "If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n <div><code>\n let json = {}; // new  JSON Object\n\n json.id = 0;\n json.species = 'Panthera leo';\n json.name = 'Lion';\n\n function setup() {\n createCanvas(100, 100);\n background(200);\n text('click here to save', 10, 10, 70, 80);\n }\n\n function mousePressed() {\n if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   saveJSON(json, 'lion.json');\n }\n }\n\n // saves the following to a file called \"lion.json\":\n // {\n //   \"id\": 0,\n //   \"species\": \"Panthera leo\",\n //   \"name\": \"Lion\"\n // }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72765,
            "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveStrings",
            "params": [
                {
                    "name": "list",
                    "description": "string array to be written",
                    "type": "String[]"
                },
                {
                    "name": "filename",
                    "description": "filename for output",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "the filename's extension",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isCRLF",
                    "description": "if true, change line-break to CRLF",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n <div><code>\n let words = 'apple bear cat dog';\n\n // .split() outputs an Array\n let list = split(words, ' ');\n\n function setup() {\n createCanvas(100, 100);\n background(200);\n text('click here to save', 10, 10, 70, 80);\n }\n\n function mousePressed() {\n if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n   saveStrings(list, 'nouns.txt');\n }\n }\n\n // Saves the following to a file called 'nouns.txt':\n //\n // apple\n // bear\n // cat\n // dog\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72834,
            "description": "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveTable",
            "params": [
                {
                    "name": "Table",
                    "description": "the <a href=\"#/p5.Table\">Table</a> object to save to a file",
                    "type": "p5.Table"
                },
                {
                    "name": "filename",
                    "description": "the filename to which the Table should be saved",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "can be one of \"tsv\", \"csv\", or \"html\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n let table;\n\n function setup() {\n table = new p5.Table();\n\n table.addColumn('id');\n table.addColumn('species');\n table.addColumn('name');\n\n let newRow = table.addRow();\n newRow.setNum('id', table.getRowCount() - 1);\n newRow.setString('species', 'Panthera leo');\n newRow.setString('name', 'Lion');\n\n // To save, un-comment next line then click 'run'\n // saveTable(table, 'new.csv');\n }\n\n // Saves the following to a file called 'new.csv':\n // id,species,name\n // 0,Panthera leo,Lion\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72967,
            "description": "Generate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "params": [
                {
                    "name": "dataToDownload",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 72994,
            "description": "Forces download. Accepts a url to filedata/blob, a filename,\nand an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "itemtype": "method",
            "name": "downloadFile",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "either an href generated by createObjectURL,\n                              or a Blob object containing the data",
                    "type": "String|Blob"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73040,
            "description": "Returns a file extension, or another string\nif the provided parameter has no extension.",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[fileName, fileExtension]",
                "type": "String[]"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73073,
            "description": "Returns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73085,
            "description": "Helper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73154,
            "description": "An array containing the names of the columns in the table, if the \"header\" the table is\nloaded with the \"header\" parameter.",
            "itemtype": "property",
            "name": "columns",
            "type": "String[]",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //print the column names\n  for (let c = 0; c < table.getColumnCount(); c++) {\n    print('column ' + c + ' is named ' + table.columns[c]);\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73188,
            "description": "An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the\nrows of the table. The same result as calling <a href=\"#/p5/getRows\">getRows()</a>",
            "itemtype": "property",
            "name": "rows",
            "type": "p5.TableRow[]",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73196,
            "description": "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\nan empty row is created. Typically, you would store a reference to\nthe new row in a TableRow object (see newRow in the example above),\nand then set individual values using <a href=\"#/p5/set\">set()</a>.\n\nIf a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\nduplicated and added to the table.",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "row",
                    "description": "row to be added to the table",
                    "type": "p5.TableRow",
                    "optional": true
                }
            ],
            "return": {
                "description": "the row that was added",
                "type": "p5.TableRow"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //add a row\n let newRow = table.addRow();\n newRow.setString('id', table.getRowCount() - 1);\n newRow.setString('species', 'Canis Lupus');\n newRow.setString('name', 'Wolf');\n\n //print the results\n for (let r = 0; r < table.getRowCount(); r++)\n   for (let c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73259,
            "description": "Removes a row from the table object.",
            "itemtype": "method",
            "name": "removeRow",
            "params": [
                {
                    "name": "id",
                    "description": "ID number of the row to remove",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //remove the first row\n  table.removeRow(0);\n\n  //print the results\n  for (let r = 0; r < table.getRowCount(); r++)\n    for (let c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73306,
            "description": "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\ncan then be used to get and set values of the selected row.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "rowID",
                    "description": "ID number of the row to get",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.TableRow\">p5.TableRow</a> object",
                "type": "p5.TableRow"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  let row = table.getRow(1);\n  //print it column by column\n  //note: a row is an object, not an array\n  for (let c = 0; c < table.getColumnCount(); c++) {\n    print(row.getString(c));\n  }\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73351,
            "description": "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.",
            "itemtype": "method",
            "name": "getRows",
            "return": {
                "description": "Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let rows = table.getRows();\n\n //warning: rows is an array of objects\n for (let r = 0; r < rows.length; r++) {\n   rows[r].set('name', 'Unicorn');\n }\n\n //print the results\n for (let r = 0; r < table.getRowCount(); r++)\n   for (let c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73399,
            "description": "Finds the first row in the Table that contains the value\nprovided, and returns a reference to that row. Even if\nmultiple rows are possible matches, only the first matching\nrow is returned. The column to search may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "findRow",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.TableRow"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //find the animal named zebra\n let row = table.findRow('Zebra', 'name');\n //find the corresponding species\n print(row.getString('species'));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73463,
            "description": "Finds the rows in the Table that contain the value\nprovided, and returns references to those rows. Returns an\nArray, so for must be used to iterate through all the rows,\nas shown in the example above. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "findRows",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //add another goat\n let newRow = table.addRow();\n newRow.setString('id', table.getRowCount() - 1);\n newRow.setString('species', 'Scape Goat');\n newRow.setString('name', 'Goat');\n\n //find the rows containing animals named Goat\n let rows = table.findRows('Goat', 'name');\n print(rows.length + ' Goats found');\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73531,
            "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "matchRow",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String|RegExp"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or\n                                 title (string)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "TableRow object",
                "type": "p5.TableRow"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //Search using specified regex on a given column, return TableRow object\n  let mammal = table.matchRow(new RegExp('ant'), 1);\n  print(mammal.getString(1));\n  //Output \"Panthera pardus\"\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73589,
            "description": "Finds the rows in the Table that match the regular expression provided,\nand returns references to those rows. Returns an array, so for must be\nused to iterate through all the rows, as shown in the example. The\ncolumn to search may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "matchRows",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or\n                                 title (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet table;\n\nfunction setup() {\n  table = new p5.Table();\n\n  table.addColumn('name');\n  table.addColumn('type');\n\n  let newRow = table.addRow();\n  newRow.setString('name', 'Lion');\n  newRow.setString('type', 'Mammal');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Snake');\n  newRow.setString('type', 'Reptile');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Mosquito');\n  newRow.setString('type', 'Insect');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Lizard');\n  newRow.setString('type', 'Reptile');\n\n  let rows = table.matchRows('R.*', 'type');\n  for (let i = 0; i < rows.length; i++) {\n    print(rows[i].getString('name') + ': ' + rows[i].getString('type'));\n  }\n}\n// Sketch prints:\n// Snake: Reptile\n// Lizard: Reptile\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73656,
            "description": "Retrieves all values in the specified column, and returns them\nas an array. The column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "getColumn",
            "params": [
                {
                    "name": "column",
                    "description": "String or Number of the column to return",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Array of column values",
                "type": "Array"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //getColumn returns an array that can be printed directly\n print(table.getColumn('species'));\n //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73708,
            "description": "Removes all rows from a Table. While all rows are removed,\ncolumns and column titles are maintained.",
            "itemtype": "method",
            "name": "clearRows",
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.clearRows();\n print(table.getRowCount() + ' total rows in table');\n print(table.getColumnCount() + ' total columns in table');\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73749,
            "description": "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\nTypically, you will want to specify a title, so the column\nmay be easily referenced later by name. (If no title is\nspecified, the new column's title will be null.)",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "title",
                    "description": "title of the given column",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.addColumn('carnivore');\n table.set(0, 'carnivore', 'no');\n table.set(1, 'carnivore', 'yes');\n table.set(2, 'carnivore', 'no');\n\n //print the results\n for (let r = 0; r < table.getRowCount(); r++)\n   for (let c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73799,
            "description": "Returns the total number of columns in a Table.",
            "itemtype": "method",
            "name": "getColumnCount",
            "return": {
                "description": "Number of columns in this table",
                "type": "Integer"
            },
            "example": [
                "\n <div>\n <code>\n // given the cvs file \"blobs.csv\" in /assets directory\n // ID, Name, Flavor, Shape, Color\n // Blob1, Blobby, Sweet, Blob, Pink\n // Blob2, Saddy, Savory, Blob, Blue\n\n let table;\n\n function preload() {\n table = loadTable('assets/blobs.csv');\n }\n\n function setup() {\n createCanvas(200, 100);\n textAlign(CENTER);\n background(255);\n }\n\n function draw() {\n let numOfColumn = table.getColumnCount();\n text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n }\n </code>\n </div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73835,
            "description": "Returns the total number of rows in a Table.",
            "itemtype": "method",
            "name": "getRowCount",
            "return": {
                "description": "Number of rows in this table",
                "type": "Integer"
            },
            "example": [
                "\n <div>\n <code>\n // given the cvs file \"blobs.csv\" in /assets directory\n //\n // ID, Name, Flavor, Shape, Color\n // Blob1, Blobby, Sweet, Blob, Pink\n // Blob2, Saddy, Savory, Blob, Blue\n\n let table;\n\n function preload() {\n table = loadTable('assets/blobs.csv');\n }\n\n function setup() {\n createCanvas(200, 100);\n textAlign(CENTER);\n background(255);\n }\n\n function draw() {\n text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n }\n </code>\n </div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73871,
            "description": "Removes any of the specified characters (or \"tokens\").\n\nIf no column is specified, then the values in all columns and\nrows are processed. A specific column may be referenced by\neither its ID or title.",
            "itemtype": "method",
            "name": "removeTokens",
            "params": [
                {
                    "name": "chars",
                    "description": "String listing characters to be removed",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n function setup() {\n let table = new p5.Table();\n\n table.addColumn('name');\n table.addColumn('type');\n\n let newRow = table.addRow();\n newRow.setString('name', '   $Lion  ,');\n newRow.setString('type', ',,,Mammal');\n\n newRow = table.addRow();\n newRow.setString('name', '$Snake  ');\n newRow.setString('type', ',,,Reptile');\n\n table.removeTokens(',$ ');\n print(table.getArray());\n }\n\n // prints:\n //  0  \"Lion\"   \"Mamal\"\n //  1  \"Snake\"  \"Reptile\"\n </code></div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 73945,
            "description": "Trims leading and trailing whitespace, such as spaces and tabs,\nfrom String table values. If no column is specified, then the\nvalues in all columns and rows are trimmed. A specific column\nmay be referenced by either its ID or title.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n function setup() {\n let table = new p5.Table();\n\n table.addColumn('name');\n table.addColumn('type');\n\n let newRow = table.addRow();\n newRow.setString('name', '   Lion  ,');\n newRow.setString('type', ' Mammal  ');\n\n newRow = table.addRow();\n newRow.setString('name', '  Snake  ');\n newRow.setString('type', '  Reptile  ');\n\n table.trim();\n print(table.getArray());\n }\n\n // prints:\n //  0  \"Lion\"   \"Mamal\"\n //  1  \"Snake\"  \"Reptile\"\n </code></div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74009,
            "description": "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\nobject. The column to be removed may be identified by either\nits title (a String) or its index value (an int).\nremoveColumn(0) would remove the first column, removeColumn(1)\nwould remove the second column, and so on.",
            "itemtype": "method",
            "name": "removeColumn",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or ID (number)",
                    "type": "String|Integer"
                }
            ],
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.removeColumn('id');\n print(table.getColumnCount());\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74073,
            "description": "Stores a value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String|Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  table.set(0, 'species', 'Canis Lupus');\n  table.set(0, 'name', 'Wolf');\n\n  //print the results\n  for (let r = 0; r < table.getRowCount(); r++)\n    for (let c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74122,
            "description": "Stores a Float value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  table.setNum(1, 'id', 1);\n\n  print(table.getColumn(0));\n  //[\"0\", 1, \"2\"]\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74168,
            "description": "Stores a String value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div class=\"norender\"><code>\n// Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //add a row\n  let newRow = table.addRow();\n  newRow.setString('id', table.getRowCount() - 1);\n  newRow.setString('species', 'Canis Lupus');\n  newRow.setString('name', 'Wolf');\n\n  print(table.getArray());\n}\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74213,
            "description": "Retrieves a value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.get(0, 1));\n  //Capra hircus\n  print(table.get(0, 'species'));\n  //Capra hircus\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74259,
            "description": "Retrieves a Float value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.getNum(1, 0) + 100);\n  //id 1 + 100 = 101\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74303,
            "description": "Retrieves a String value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  // table is comma separated value \"CSV\"\n  // and has specifiying header for column labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.getString(0, 0)); // 0\n  print(table.getString(0, 1)); // Capra hircus\n  print(table.getString(0, 2)); // Goat\n  print(table.getString(1, 0)); // 1\n  print(table.getString(1, 1)); // Panthera pardus\n  print(table.getString(1, 2)); // Leopard\n  print(table.getString(2, 0)); // 2\n  print(table.getString(2, 1)); // Equus zebra\n  print(table.getString(2, 2)); // Zebra\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74355,
            "description": "Retrieves all table data and returns as an object. If a column name is\npassed in, each row object will be stored with that attribute as its\ntitle.",
            "itemtype": "method",
            "name": "getObject",
            "params": [
                {
                    "name": "headerColumn",
                    "description": "Name of the column which should be used to\n                             title each row object (optional)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  let tableObject = table.getObject();\n\n  print(tableObject);\n  //outputs an object\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74420,
            "description": "Retrieves all table data and returns it as a multidimensional array.",
            "itemtype": "method",
            "name": "getArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leoperd\n// 2,Equus zebra,Zebra\n\nlet table;\n\nfunction preload() {\n  // table is comma separated value \"CSV\"\n  // and has specifiying header for column labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  let tableArray = table.getArray();\n  for (let i = 0; i < tableArray.length; i++) {\n    print(tableArray[i]);\n  }\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "p5.js",
            "line": 74577,
            "description": "Stores a Float value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a Float",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let rows = table.getRows();\n for (let r = 0; r < rows.length; r++) {\n   rows[r].setNum('id', r + 10);\n }\n\n print(table.getArray());\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "p5.js",
            "line": 74621,
            "description": "Stores a String value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a String",
                    "type": "String|Number|Boolean|Object"
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let rows = table.getRows();\n for (let r = 0; r < rows.length; r++) {\n   let name = rows[r].getString('name');\n   rows[r].setString('name', 'A ' + name + ' named George');\n }\n\n print(table.getArray());\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "p5.js",
            "line": 74666,
            "description": "Retrieves a value from the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let names = [];\n let rows = table.getRows();\n for (let r = 0; r < rows.length; r++) {\n   names.push(rows[r].get('name'));\n }\n\n print(names);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "p5.js",
            "line": 74714,
            "description": "Retrieves a Float value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "Float Floating point number",
                "type": "Number"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let rows = table.getRows();\n let minId = Infinity;\n let maxId = -Infinity;\n for (let r = 0; r < rows.length; r++) {\n   let id = rows[r].getNum('id');\n   minId = min(minId, id);\n   maxId = min(maxId, id);\n }\n print('minimum id = ' + minId + ', maximum id = ' + maxId);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "p5.js",
            "line": 74770,
            "description": "Retrieves an String value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "String",
                "type": "String"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n let table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n let rows = table.getRows();\n let longest = '';\n for (let r = 0; r < rows.length; r++) {\n   let species = rows[r].getString('species');\n   if (longest.length < species.length) {\n     longest = species;\n   }\n }\n\n print('longest: ' + longest);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "p5.js",
            "line": 74929,
            "description": "Gets the element's full name, which is returned as a String.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of the node",
                "type": "String"
            },
            "example": [
                "&lt;animal\n <div class='norender'><code>\n // The following short XML file called \"mammals.xml\" is parsed\n // in the code below.\n //\n // <?xml version=\"1.0\"?>\n // &lt;mammals&gt;\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n // &lt;/mammals&gt;\n\n let xml;\n\n function preload() {\n xml = loadXML('assets/mammals.xml');\n }\n\n function setup() {\n print(xml.getName());\n }\n\n // Sketch prints:\n // mammals\n </code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 74964,
            "description": "Sets the element's name, which is specified as a String.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "the",
                    "description": "new name of the node",
                    "type": "String"
                }
            ],
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.getName());\n  xml.setName('fish');\n  print(xml.getName());\n}\n\n// Sketch prints:\n// mammals\n// fish\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75010,
            "description": "Checks whether or not the element has any children, and returns the result\nas a boolean.",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.hasChildren());\n}\n\n// Sketch prints:\n// true\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75046,
            "description": "Get the names of all of the element's children, and returns the names as an\narray of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a>\non each child element individually.",
            "itemtype": "method",
            "name": "listChildren",
            "return": {
                "description": "names of the children of the element",
                "type": "String[]"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.listChildren());\n}\n\n// Sketch prints:\n// [\"animal\", \"animal\", \"animal\"]\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75087,
            "description": "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When\nthe name parameter is specified, then it will return all children that match\nthat name.",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "name",
                    "description": "element name",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "children of the element",
                "type": "p5.XML[]"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let animals = xml.getChildren('animal');\n\n  for (let i = 0; i < animals.length; i++) {\n    print(animals[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Leopard\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75143,
            "description": "Returns the first of the element's children that matches the name parameter\nor the child of the given index.It returns undefined if no matching\nchild is found.",
            "itemtype": "method",
            "name": "getChild",
            "params": [
                {
                    "name": "name",
                    "description": "element name or index",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.XML"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n</code></div>\n<div class='norender'><code>\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let secondChild = xml.getChild(1);\n  print(secondChild.getContent());\n}\n\n// Sketch prints:\n// \"Leopard\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75226,
            "description": "Appends a new child to the element. The child can be specified with\neither a String, which will be used as the new tag's name, or as a\nreference to an existing <a href=\"#/p5.XML\">p5.XML</a> object.\nA reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "node",
                    "description": "a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added",
                    "type": "p5.XML"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let child = new p5.XML();\n  child.setName('animal');\n  child.setAttribute('id', '3');\n  child.setAttribute('species', 'Ornithorhynchus anatinus');\n  child.setContent('Platypus');\n  xml.addChild(child);\n\n  let animals = xml.getChildren('animal');\n  print(animals[animals.length - 1].getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Leopard\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75278,
            "description": "Removes the element specified by name or index.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "name",
                    "description": "element name or index",
                    "type": "String|Integer"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  xml.removeChild('animal');\n  let children = xml.getChildren();\n  for (let i = 0; i < children.length; i++) {\n    print(children[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Leopard\"\n// \"Zebra\"\n</code></div>\n<div class='norender'><code>\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  xml.removeChild(1);\n  let children = xml.getChildren();\n  for (let i = 0; i < children.length; i++) {\n    print(children[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75350,
            "description": "Counts the specified element's number of attributes, returned as an Number.",
            "itemtype": "method",
            "name": "getAttributeCount",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getAttributeCount());\n}\n\n// Sketch prints:\n// 2\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75386,
            "description": "Gets all of the specified element's attributes, and returns them as an\narray of Strings.",
            "itemtype": "method",
            "name": "listAttributes",
            "return": {
                "description": "an array of strings containing the names of attributes",
                "type": "String[]"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.listAttributes());\n}\n\n// Sketch prints:\n// [\"id\", \"species\"]\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75451,
            "description": "Checks whether or not an element has the specified attribute.",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "the",
                    "description": "attribute to be checked",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if attribute found else false",
                "type": "Boolean"
            },
            "example": [
                "\n <div class='norender'><code>\n // The following short XML file called \"mammals.xml\" is parsed\n // in the code below.\n //\n // <?xml version=\"1.0\"?>\n // &lt;mammals&gt;\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n // &lt;/mammals&gt;\n\n let xml;\n\n function preload() {\n xml = loadXML('assets/mammals.xml');\n }\n\n function setup() {\n let firstChild = xml.getChild('animal');\n print(firstChild.hasAttribute('species'));\n print(firstChild.hasAttribute('color'));\n }\n\n // Sketch prints:\n // true\n // false\n </code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75518,
            "description": "Returns an attribute value of the element as an Number. If the defaultValue\nparameter is specified and the attribute doesn't exist, then defaultValue\nis returned. If no defaultValue is specified and the attribute doesn't\nexist, the value 0 is returned.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "name",
                    "description": "the non-null full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "the default value of the attribute",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getNum('id'));\n}\n\n// Sketch prints:\n// 0\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75587,
            "description": "Returns an attribute value of the element as an String. If the defaultValue\nparameter is specified and the attribute doesn't exist, then defaultValue\nis returned. If no defaultValue is specified and the attribute doesn't\nexist, null is returned.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "name",
                    "description": "the non-null full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "the default value of the attribute",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getString('species'));\n}\n\n// Sketch prints:\n// \"Capra hircus\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75656,
            "description": "Sets the content of an element's attribute. The first parameter specifies\nthe attribute name, while the second specifies the new content.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "the full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value of the attribute",
                    "type": "Number|String|Boolean"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getString('species'));\n  firstChild.setAttribute('species', 'Jamides zebra');\n  print(firstChild.getString('species'));\n}\n\n// Sketch prints:\n// \"Capra hircus\"\n// \"Jamides zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75697,
            "description": "Returns the content of an element. If there is no such content,\ndefaultValue is returned if specified, otherwise null is returned.",
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "defaultValue",
                    "description": "value returned if no content is found",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75738,
            "description": "Sets the element's content.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "text",
                    "description": "the new content",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  let firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n  firstChild.setContent('Mountain Goat');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Mountain Goat\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75779,
            "description": "Serializes the element into a string. This function is useful for preparing\nthe content to be sent over a http request or saved to file.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "Serialized string of the element",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nlet xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.serialize());\n}\n\n// Sketch prints:\n// <mammals>\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "p5.js",
            "line": 75888,
            "description": "Constrains a value between a minimum and maximum value.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "n",
                    "description": "number to constrain",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "high",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "constrained number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n\n  let leftWall = 25;\n  let rightWall = 75;\n\n  // xm is just the mouseX, while\n  // xc is the mouseX, but constrained\n  // between the leftWall and rightWall!\n  let xm = mouseX;\n  let xc = constrain(mouseX, leftWall, rightWall);\n\n  // Draw the walls.\n  stroke(150);\n  line(leftWall, 0, leftWall, height);\n  line(rightWall, 0, rightWall, height);\n\n  // Draw xm and xc as circles.\n  noStroke();\n  fill(150);\n  ellipse(xm, 33, 9, 9); // Not Constrained\n  fill(0);\n  ellipse(xc, 66, 9, 9); // Constrained\n}\n</code></div>"
            ],
            "alt": "2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 75932,
            "description": "Calculates the distance between two points, in either two or three dimensions.",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\n// Move your mouse inside the canvas to see the\n// change in distance between two points!\nfunction draw() {\n  background(200);\n  fill(0);\n\n  let x1 = 10;\n  let y1 = 90;\n  let x2 = mouseX;\n  let y2 = mouseY;\n\n  line(x1, y1, x2, y2);\n  ellipse(x1, y1, 7, 7);\n  ellipse(x2, y2, 7, 7);\n\n  // d is the length of the line\n  // the distance from point 1 to point 2.\n  let d = dist(x1, y1, x2, y2);\n\n  // Let's write d along the line we are drawing!\n  push();\n  translate((x1 + x2) / 2, (y1 + y2) / 2);\n  rotate(atan2(y2 - y1, x2 - x1));\n  text(nfc(d, 1), 0, -5);\n  pop();\n  // Fancy!\n}\n</code></div>"
            ],
            "alt": "2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 75976,
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76004,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "n",
                    "description": "exponent to raise",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "e^n",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n\n  // Compute the exp() function with a value between 0 and 2\n  let xValue = map(mouseX, 0, width, 0, 2);\n  let yValue = exp(xValue);\n\n  let y = map(yValue, 0, 8, height, 0);\n\n  let legend = 'exp (' + nfc(xValue, 3) + ')\\n= ' + nf(yValue, 1, 4);\n  stroke(150);\n  line(mouseX, y, mouseX, height);\n  fill(0);\n  text(legend, 5, 15);\n  noStroke();\n  ellipse(mouseX, y, 7, 7);\n\n  // Draw the exp(x) curve,\n  // over the domain of x from 0 to 2\n  noFill();\n  stroke(0);\n  beginShape();\n  for (let x = 0; x < width; x++) {\n    xValue = map(x, 0, width, 0, 2);\n    yValue = exp(xValue);\n    y = map(yValue, 0, 8, height, 0);\n    vertex(x, y);\n  }\n\n  endShape();\n  line(0, 0, 0, height);\n  line(0, height - 1, width, height - 1);\n}\n</code></div>"
            ],
            "alt": "ellipse moves along a curve with mouse x. e^n displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76053,
            "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "n",
                    "description": "number to round down",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded down number",
                "type": "Integer"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  let ax = map(mouseX, 0, 100, 0, 5);\n  let ay = 66;\n\n  //Get the floor of the mapped number.\n  let bx = floor(map(mouseX, 0, 100, 0, 5));\n  let by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76091,
            "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, and 1.0 is equal to the second point. If the\nvalue of amt is more than 1.0 or less than 0.0, the number will be\ncalculated accordingly in the ratio of the two given numbers. The lerp\nfunction is convenient for creating motion along a straight\npath and for drawing dotted lines.",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "start",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "lerped value",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  background(200);\n  let a = 20;\n  let b = 80;\n  let c = lerp(a, b, 0.2);\n  let d = lerp(a, b, 0.5);\n  let e = lerp(a, b, 0.8);\n\n  let y = 50;\n\n  strokeWeight(5);\n  stroke(0); // Draw the original points in black\n  point(a, y);\n  point(b, y);\n\n  stroke(100); // Draw the lerp points in gray\n  point(c, y);\n  point(d, y);\n  point(e, y);\n}\n</code></div>"
            ],
            "alt": "5 points horizontally staggered mid-canvas. mid 3 are grey, outer black",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76138,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "n",
                    "description": "number greater than 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "natural logarithm of n",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  let maxX = 2.8;\n  let maxY = 1.5;\n\n  // Compute the natural log of a value between 0 and maxX\n  let xValue = map(mouseX, 0, width, 0, maxX);\n  let yValue, y;\n  if (xValue > 0) {\n      // Cannot take the log of a negative number.\n    yValue = log(xValue);\n    y = map(yValue, -maxY, maxY, height, 0);\n\n    // Display the calculation occurring.\n    let legend = 'log(' + nf(xValue, 1, 2) + ')\\n= ' + nf(yValue, 1, 3);\n    stroke(150);\n    line(mouseX, y, mouseX, height);\n    fill(0);\n    text(legend, 5, 15);\n    noStroke();\n    ellipse(mouseX, y, 7, 7);\n  }\n\n  // Draw the log(x) curve,\n  // over the domain of x from 0 to maxX\n  noFill();\n  stroke(0);\n  beginShape();\n  for (let x = 0; x < width; x++) {\n    xValue = map(x, 0, width, 0, maxX);\n    yValue = log(xValue);\n    y = map(yValue, -maxY, maxY, height, 0);\n    vertex(x, y);\n  }\n  endShape();\n  line(0, 0, 0, height);\n  line(0, height / 2, width, height / 2);\n}\n</code></div>"
            ],
            "alt": "ellipse moves along a curve with mouse x. natural logarithm of n displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76193,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\na shortcut for writing dist(0, 0, x, y).",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "second value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "magnitude of vector from (0,0) to (a,b)",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  let x1 = 20;\n  let x2 = 80;\n  let y1 = 30;\n  let y2 = 70;\n\n  line(0, 0, x1, y1);\n  print(mag(x1, y1)); // Prints \"36.05551275463989\"\n  line(0, 0, x2, y1);\n  print(mag(x2, y1)); // Prints \"85.44003745317531\"\n  line(0, 0, x1, y2);\n  print(mag(x1, y2)); // Prints \"72.80109889280519\"\n  line(0, 0, x2, y2);\n  print(mag(x2, y2)); // Prints \"106.3014581273465\"\n}\n</code></div>"
            ],
            "alt": "4 lines of different length radiate from top left of canvas.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76231,
            "description": "Re-maps a number from one range to another.\n\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the incoming value to be converted",
                    "type": "Number"
                },
                {
                    "name": "start1",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop1",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "start2",
                    "description": "lower bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "stop2",
                    "description": "upper bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "withinBounds",
                    "description": "constrain the value to the newly mapped range",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "remapped number",
                "type": "Number"
            },
            "example": [
                "\n  <div><code>\nlet value = 25;\nlet m = map(value, 0, 100, 0, width);\nellipse(m, 50, 10, 10);\n  </code></div>\n\n  <div><code>\nfunction setup() {\n  noStroke();\n}\n\nfunction draw() {\n  background(204);\n  let x1 = map(mouseX, 0, width, 25, 75);\n  ellipse(x1, 25, 25, 25);\n  //This ellipse is constrained to the 0-100 range\n  //after setting withinBounds to true\n  let x2 = map(mouseX, 0, width, 0, 100, true);\n  ellipse(x2, 75, 25, 25);\n}\n  </code></div>"
            ],
            "alt": "10 by 10 white ellipse with in mid left canvas\n2 25 by 25 white ellipses move with mouse x. Bottom has more range from X",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76293,
            "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "n0",
                    "description": "Number to compare",
                    "type": "Number"
                },
                {
                    "name": "n1",
                    "description": "Number to compare",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "maximum Number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how max() works!\n  let numArray = [2, 1, 5, 4, 8, 9];\n  fill(0);\n  noStroke();\n  text('Array Elements', 0, 10);\n  // Draw all numbers in the array\n  let spacing = 15;\n  let elemsY = 25;\n  for (let i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  let maxX = 33;\n  let maxY = 80;\n  // Draw the Maximum value in the array.\n  textSize(32);\n  text(max(numArray), maxX, maxY);\n}\n</code></div>"
            ],
            "alt": "Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76328,
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "nums",
                    "description": "Numbers to compare",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76348,
            "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "n0",
                    "description": "Number to compare",
                    "type": "Number"
                },
                {
                    "name": "n1",
                    "description": "Number to compare",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "minimum Number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how min() works!\n  let numArray = [2, 1, 5, 4, 8, 9];\n  fill(0);\n  noStroke();\n  text('Array Elements', 0, 10);\n  // Draw all numbers in the array\n  let spacing = 15;\n  let elemsY = 25;\n  for (let i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  let maxX = 33;\n  let maxY = 80;\n  // Draw the Minimum value in the array.\n  textSize(32);\n  text(min(numArray), maxX, maxY);\n}\n</code></div>"
            ],
            "alt": "Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76383,
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "nums",
                    "description": "Numbers to compare",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76403,
            "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the example above.)",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "value",
                    "description": "incoming value to be normalized",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "normalized number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  let currentNum = mouseX;\n  let lowerBound = 0;\n  let upperBound = width; //100;\n  let normalized = norm(currentNum, lowerBound, upperBound);\n  let lineY = 70;\n  stroke(3);\n  line(0, lineY, width, lineY);\n  //Draw an ellipse mapped to the non-normalized value.\n  noStroke();\n  fill(50);\n  let s = 7; // ellipse size\n  ellipse(currentNum, lineY, s, s);\n\n  // Draw the guide\n  let guideY = lineY + 15;\n  text('0', 0, guideY);\n  textAlign(RIGHT);\n  text('100', width, guideY);\n\n  // Draw the normalized value\n  textAlign(LEFT);\n  fill(0);\n  textSize(32);\n  let normalY = 40;\n  let normalX = 20;\n  text(normalized, normalX, normalY);\n}\n</code></div>"
            ],
            "alt": "ellipse moves with mouse. 0 shown left & 100 right and updating values center",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76455,
            "description": "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3 &times; 3 &times; 3 &times; 3 &times; 3 and pow(3, -5) is equivalent to 1 /\n3 &times; 3 &times; 3 &times; 3 &times; 3. Maps to\nMath.pow().",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "n",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "power by which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "n^e",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  //Exponentially increase the size of an ellipse.\n  let eSize = 3; // Original Size\n  let eLoc = 10; // Original Location\n\n  ellipse(eLoc, eLoc, eSize, eSize);\n\n  ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\n\n  ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\n\n  ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\n}\n</code></div>"
            ],
            "alt": "small to large ellipses radiating from top left of canvas",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76489,
            "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "n",
                    "description": "number to round",
                    "type": "Number"
                },
                {
                    "name": "decimals",
                    "description": "number of decimal places to round to, default is 0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "rounded number",
                "type": "Integer"
            },
            "example": [
                "\n<div><code>\nlet x = round(3.7);\ntext(x, width / 2, height / 2);\n</code></div>\n<div><code>\nlet x = round(12.782383, 2);\ntext(x, width / 2, height / 2);\n</code></div>\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  let ax = map(mouseX, 0, 100, 0, 5);\n  let ay = 66;\n\n  // Round the mapped number.\n  let bx = round(map(mouseX, 0, 100, 0, 5));\n  let by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "\"3\" written in middle of canvas\n\"12.78\" written in middle of canvas\nhorizontal center line squared values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76543,
            "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "n",
                    "description": "number to square",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "squared number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  let eSize = 7;\n  let x1 = map(mouseX, 0, width, 0, 10);\n  let y1 = 80;\n  let x2 = sq(x1);\n  let y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100);\n  line(0, height / 2, width, height / 2);\n\n  // Draw text.\n  let spacing = 15;\n  noStroke();\n  fill(0);\n  text('x = ' + x1, 0, y1 + spacing);\n  text('sq(x) = ' + x2, 0, y2 + spacing);\n}\n</code></div>"
            ],
            "alt": "horizontal center line squared values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76589,
            "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "n",
                    "description": "non-negative number to square root",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "square root of number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  let eSize = 7;\n  let x1 = mouseX;\n  let y1 = 80;\n  let x2 = sqrt(x1);\n  let y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100);\n  line(0, height / 2, width, height / 2);\n\n  // Draw text.\n  noStroke();\n  fill(0);\n  let spacing = 15;\n  text('x = ' + x1, 0, y1 + spacing);\n  text('sqrt(x) = ' + x2, 0, y2 + spacing);\n}\n</code></div>"
            ],
            "alt": "horizontal center line squareroot values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 76676,
            "description": "Calculates the fractional part of a number.",
            "itemtype": "method",
            "name": "fract",
            "params": [
                {
                    "name": "num",
                    "description": "Number whose fractional part needs to be found out",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "fractional part of x, i.e, {x}",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  fill(0);\n  text(7345.73472742, 0, 50);\n  text(fract(7345.73472742), 0, 100);\n  text(1.4215e-15, 150, 50);\n  text(fract(1.4215e-15), 150, 100);\n}\n</code>\n</div>"
            ],
            "alt": "2 rows of numbers, the first row having 8 numbers and the second having the fractional parts of those numbers.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "p5.js",
            "line": 77020,
            "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.",
            "itemtype": "method",
            "name": "noiseSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>let xoff = 0.0;\n\nfunction setup() {\n  noiseSeed(99);\n  stroke(0, 10);\n}\n\nfunction draw() {\n  xoff = xoff + .01;\n  let n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>"
            ],
            "alt": "vertical grey lines drawing in pattern affected by noise.",
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "p5.js",
            "line": 77222,
            "description": "The y component of the vector",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77227,
            "description": "The z component of the vector",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77234,
            "description": "Returns a string representation of a vector v by calling String(v)\nor v.toString(). This method is useful for logging vectors in the\nconsole.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  let v = createVector(20, 30);\n  print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text(v1.toString(), 10, 25, 90, 75);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77287,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  let v = createVector(1, 2, 3);\n  v.set(4, 5, 6); // Sets vector to [4, 5, 6]\n\n  let v1 = createVector(0, 0, 0);\n  let arr = [1, 2, 3];\n  v1.set(arr); // Sets vector to [1, 2, 3]\n}\n</code>\n</div>\n\n<div>\n<code>\nlet v0, v1;\nfunction setup() {\n  createCanvas(100, 100);\n\n  v0 = createVector(0, 0);\n  v1 = createVector(50, 50);\n}\n\nfunction draw() {\n  background(240);\n\n  drawArrow(v0, v1, 'black');\n  v1.set(v1.x + random(-1, 1), v1.y + random(-1, 1));\n\n  noStroke();\n  text('x: ' + round(v1.x) + ' y: ' + round(v1.y), 20, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77346,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to set",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77370,
            "description": "Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v1 = createVector(1, 2, 3);\nlet v2 = v1.copy();\nprint(v1.x === v2.x && v1.y === v2.y && v1.z === v2.z);\n// Prints \"true\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77393,
            "description": "Adds x, y, and z components to a vector, adds one vector to another, or\nadds two independent vectors together. The version of the method that adds\ntwo vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others\nacts directly on the vector. Additionally, you may provide arguments to this function as an array.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to be added",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to be added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to be added",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(1, 2, 3);\nv.add(4, 5, 6);\n// v's components are set to [5, 7, 9]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v = createVector(1, 2, 3);\n// Provide arguments as an array\nlet arr = [4, 5, 6];\nv.add(arr);\n// v's components are set to [5, 7, 9]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(1, 2, 3);\nlet v2 = createVector(2, 3, 4);\n\nlet v3 = p5.Vector.add(v1, v2);\n// v3 has components [3, 5, 7]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\n// red vector + blue vector = purple vector\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'red');\n\n  let v2 = createVector(-30, 20);\n  drawArrow(v1, v2, 'blue');\n\n  let v3 = p5.Vector.add(v1, v2);\n  drawArrow(v0, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77470,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to add",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77521,
            "description": "Gives remainder of a vector when it is divided by another vector.\nSee examples for more context.",
            "itemtype": "method",
            "name": "rem",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of divisor vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component of divisor vector",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z component of divisor vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'>\n<code>\nlet v = createVector(3, 4, 5);\nv.rem(2, 3, 4);\n// v's components are set to [1, 1, 1]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(3, 4, 5);\nlet v2 = createVector(2, 3, 4);\n\nlet v3 = p5.Vector.rem(v1, v2);\n// v3 has components [1, 1, 1]\nprint(v3);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77550,
            "itemtype": "method",
            "name": "rem",
            "params": [
                {
                    "name": "value",
                    "description": "divisor vector",
                    "type": "p5.Vector | Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77613,
            "description": "Subtracts x, y, and z components from a vector, subtracts one vector from\nanother, or subtracts two independent vectors. The version of the method\nthat subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the\nother acts directly on the vector. Additionally, you may provide arguments to this function as an array.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to subtract",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to subtract",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to subtract",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(4, 5, 6);\nv.sub(1, 1, 1);\n// v's components are set to [3, 4, 5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v = createVector(4, 5, 6);\n// Provide arguments as an array\nlet arr = [1, 1, 1];\nv.sub(arr);\n// v's components are set to [3, 4, 5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(2, 3, 4);\nlet v2 = createVector(1, 2, 3);\n\nlet v3 = p5.Vector.sub(v1, v2);\n// v3 has components [1, 1, 1]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\n// red vector - blue vector = purple vector\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(70, 50);\n  drawArrow(v0, v1, 'red');\n\n  let v2 = createVector(mouseX, mouseY);\n  drawArrow(v0, v2, 'blue');\n\n  let v3 = p5.Vector.sub(v1, v2);\n  drawArrow(v2, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77690,
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to subtract",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77714,
            "description": "Multiplies the vector by a scalar, multiplies the x, y, and z components from a vector, or multiplies\nthe x, y, and z components of two independent vectors. When multiplying a vector by a scalar, the x, y,\nand z components of the vector are all multiplied by the scalar. When multiplying a vector by a vector,\nthe x, y, z components of both vectors are multiplied by each other\n(for example, with two vectors a and b: a.x * b.x, a.y * b.y, a.z * b.z). The static version of this method\ncreates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector\ndirectly. Additionally, you may provide arguments to this function as an array.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "n",
                    "description": "The number to multiply with the vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(1, 2, 3);\nv.mult(2);\n// v's components are set to [2, 4, 6]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(1, 2, 3);\nlet v1 = createVector(2, 3, 4);\nv0.mult(v1); // v0's components are set to [2, 6, 12]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(1, 2, 3);\n// Provide arguments as an array\nlet arr = [2, 3, 4];\nv0.mult(arr); // v0's components are set to [2, 6, 12]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(1, 2, 3);\nlet v1 = createVector(2, 3, 4);\nconst result = p5.Vector.mult(v0, v1);\nprint(result); // result's components are set to [2, 6, 12]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(1, 2, 3);\nlet v2 = p5.Vector.mult(v1, 2);\n// v2 has components [2, 4, 6]\nprint(v2);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = createVector(25, -25);\n  drawArrow(v0, v1, 'red');\n\n  let num = map(mouseX, 0, width, -2, 2, true);\n  let v2 = p5.Vector.mult(v1, num);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('multiplied by ' + num.toFixed(2), 5, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77807,
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "x",
                    "description": "The number to multiply with the x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The number to multiply with the y component of the vector",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The number to multiply with the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77815,
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "arr",
                    "description": "The array to multiply with the components of the vector",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77821,
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to multiply with the components of the original vector",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 77914,
            "description": "Divides the vector by a scalar, divides a vector by the x, y, and z arguments, or divides the x, y, and\nz components of two vectors against each other. When dividing a vector by a scalar, the x, y,\nand z components of the vector are all divided by the scalar. When dividing a vector by a vector,\nthe x, y, z components of the source vector are treated as the dividend, and the x, y, z components\nof the argument is treated as the divisor (for example with two vectors a and b: a.x / b.x, a.y / b.y, a.z / b.z).\nThe static version of this method creates a\nnew <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly.\nAdditionally, you may provide arguments to this function as an array.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "n",
                    "description": "The number to divide the vector by",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(6, 4, 2);\nv.div(2); //v's components are set to [3, 2, 1]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(9, 4, 2);\nlet v1 = createVector(3, 2, 4);\nv0.div(v1); // v0's components are set to [3, 2, 0.5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(9, 4, 2);\n// Provide arguments as an array\nlet arr = [3, 2, 4];\nv0.div(arr); // v0's components are set to [3, 2, 0.5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v0 = createVector(9, 4, 2);\nlet v1 = createVector(3, 2, 4);\nlet result = p5.Vector.div(v0, v1);\nprint(result); // result's components are set to [3, 2, 0.5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(6, 4, 2);\nlet v2 = p5.Vector.div(v1, 2);\n// v2 has components [3, 2, 1]\nprint(v2);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 100);\n  let v1 = createVector(50, -50);\n  drawArrow(v0, v1, 'red');\n\n  let num = map(mouseX, 0, width, 10, 0.5, true);\n  let v2 = p5.Vector.div(v1, num);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('divided by ' + num.toFixed(2), 10, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78007,
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "x",
                    "description": "The number to divide with the x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The number to divide with the y component of the vector",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The number to divide with the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78015,
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "arr",
                    "description": "The array to divide the components of the vector by",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78021,
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to divide the components of the original vector by",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78135,
            "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x\\*x + y\\*y + z\\*z).)",
            "itemtype": "method",
            "name": "mag",
            "return": {
                "description": "magnitude of the vector",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text('vector length: ' + v1.mag().toFixed(2), 10, 70, 90, 30);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>\n<div class=\"norender\">\n<code>\nlet v = createVector(20.0, 30.0, 40.0);\nlet m = v.mag();\nprint(m); // Prints \"53.85164807134504\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78183,
            "description": "Calculates the squared magnitude of the vector and returns the result\nas a float (this is simply the equation <em>(x\\*x + y\\*y + z\\*z)</em>.)\nFaster if the real length is not required in the\ncase of comparing vectors, etc.",
            "itemtype": "method",
            "name": "magSq",
            "return": {
                "description": "squared magnitude of the vector",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(6, 4, 2);\nprint(v1.magSq()); // Prints \"56\"\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text('vector length squared: ' + v1.magSq().toFixed(2), 10, 45, 90, 55);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78237,
            "description": "Calculates the dot product of two vectors. The version of the method\nthat computes the dot product of two independent vectors is a static\nmethod. See the examples for more context.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v1 = createVector(1, 2, 3);\nlet v2 = createVector(2, 3, 4);\n\nprint(v1.dot(v2)); // Prints \"20\"\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n//Static method\nlet v1 = createVector(1, 2, 3);\nlet v2 = createVector(3, 2, 1);\nprint(p5.Vector.dot(v1, v2)); // Prints \"10\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78267,
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "value",
                    "description": "value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78279,
            "description": "Calculates and returns a vector composed of the cross product between\ntwo vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "<a href=\"#/p5.Vector\">p5.Vector</a> to be crossed",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v1 = createVector(1, 2, 3);\nlet v2 = createVector(1, 2, 3);\n\nlet v = v1.cross(v2); // v's components are [0, 0, 0]\nprint(v);\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(1, 0, 0);\nlet v2 = createVector(0, 1, 0);\n\nlet crossProduct = p5.Vector.cross(v1, v2);\n// crossProduct has components [0, 0, 1]\nprint(crossProduct);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78321,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "v",
                    "description": "the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v1 = createVector(1, 0, 0);\nlet v2 = createVector(0, 1, 0);\n\nlet distance = v1.dist(v2); // distance is 1.4142...\nprint(distance);\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v1 = createVector(1, 0, 0);\nlet v2 = createVector(0, 1, 0);\n\nlet distance = p5.Vector.dist(v1, v2);\n// distance is 1.4142...\nprint(distance);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n\n  let v1 = createVector(70, 50);\n  drawArrow(v0, v1, 'red');\n\n  let v2 = createVector(mouseX, mouseY);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('distance between vectors: ' + v2.dist(v1).toFixed(2), 5, 50, 95, 50);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78392,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "normalized <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.normalize();\n// v's components are set to\n// [0.4454354, 0.8908708, 0.089087084]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nlet v_initial = createVector(10, 20, 2);\n// v_initial has components [10.0, 20.0, 2.0]\nlet v_normalized = p5.Vector.normalize(v_initial);\nprint(v_normalized);\n// returns a new vector with components set to\n// [0.4454354, 0.8908708, 0.089087084]\n// v_initial remains unchanged\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'red');\n  v1.normalize();\n  drawArrow(v0, v1.mult(35), 'blue');\n\n  noFill();\n  ellipse(50, 50, 35 * 2);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78462,
            "description": "Limit the magnitude of this vector to the value used for the <b>max</b>\nparameter.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "max",
                    "description": "the maximum magnitude for the vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.limit(5);\n// v's components are set to\n// [2.2271771, 4.4543543, 0.4454354]\n</code>\n</div>\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'red');\n  drawArrow(v0, v1.limit(35), 'blue');\n\n  noFill();\n  ellipse(50, 50, 35 * 2);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78520,
            "description": "Set the magnitude of this vector to the value used for the <b>len</b>\nparameter.",
            "itemtype": "method",
            "name": "setMag",
            "params": [
                {
                    "name": "len",
                    "description": "the new length for this vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.setMag(10);\n// v's components are set to [6.0, 8.0, 0.0]\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(50, 50);\n\n  drawArrow(v0, v1, 'red');\n\n  let length = map(mouseX, 0, width, 0, 141, true);\n  v1.setMag(length);\n  drawArrow(v0, v1, 'blue');\n\n  noStroke();\n  text('magnitude set to: ' + length.toFixed(2), 10, 70, 90, 30);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78576,
            "description": "Calculate the angle of rotation for this vector(only 2D vectors).\np5.Vectors created using <a src=\"#/p5/createVector\">createVector()</a>\nwill take the current <a = src=\"#/p5/angleMode\">angleMode</a> into consideration, and give the angle\nin radians or degree accordingly.",
            "itemtype": "method",
            "name": "heading",
            "return": {
                "description": "the angle of rotation",
                "type": "Number"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  let v1 = createVector(30, 50);\n  print(v1.heading()); // 1.0303768265243125\n\n  v1 = createVector(40, 50);\n  print(v1.heading()); // 0.8960553845713439\n\n  v1 = createVector(30, 70);\n  print(v1.heading()); // 1.1659045405098132\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'black');\n\n  let myHeading = v1.heading();\n  noStroke();\n  text(\n    'vector heading: ' +\n      myHeading.toFixed(2) +\n      ' radians or ' +\n      degrees(myHeading).toFixed(2) +\n      ' degrees',\n    10,\n    50,\n    90,\n    50\n  );\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78648,
            "description": "Rotate the vector to a specific angle (only 2D vectors), magnitude remains the\nsame",
            "itemtype": "method",
            "name": "setHeading",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(10.0, 20.0);\n// result of v.heading() is 1.1071487177940904\nv.setHeading(Math.PI);\n// result of v.heading() is now 3.141592653589793\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78673,
            "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the\nsame",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(10.0, 20.0);\n// v has components [10.0, 20.0, 0.0]\nv.rotate(HALF_PI);\n// v's components are set to [-20.0, 9.999999, 0.0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// static function implementation\nlet v = createVector(10.0, 20.0);\n// v has components [10.0, 20.0, 0.0]\nlet rotated_v = p5.Vector.rotate(v, HALF_PI);\nconsole.log(rotated_v);\n// rotated_v's components are set to [-20.0, 9.999999, 0.0]\nconsole.log(v);\n// v's components remains the same (i.e, [10.0, 20.0, 0.0])\n</code>\n</div>\n\n<div>\n<code>\nlet angle = 0;\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = createVector(50, 0);\n\n  drawArrow(v0, v1.rotate(angle), 'black');\n  angle += 0.01;\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78742,
            "description": "Calculates and returns the angle (in radians) between two vectors.",
            "itemtype": "method",
            "name": "angleBetween",
            "params": [
                {
                    "name": "value",
                    "description": "the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the angle between (in radians)",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v1 = createVector(1, 0, 0);\nlet v2 = createVector(0, 1, 0);\n\nlet angle = v1.angleBetween(v2);\n// angle is PI/2\nprint(angle);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n  let v0 = createVector(50, 50);\n\n  let v1 = createVector(50, 0);\n  drawArrow(v0, v1, 'red');\n\n  let v2 = createVector(mouseX - 50, mouseY - 50);\n  drawArrow(v0, v2, 'blue');\n\n  let angleBetween = v1.angleBetween(v2);\n  noStroke();\n  text(\n    'angle between: ' +\n      angleBetween.toFixed(2) +\n      ' radians or ' +\n      degrees(angleBetween).toFixed(2) +\n      ' degrees',\n    10,\n    50,\n    90,\n    50\n  );\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78819,
            "description": "Linear interpolate the vector to another vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "x",
                    "description": "the x component",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z component",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(1, 1, 0);\n\nv.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v1 = createVector(0, 0, 0);\nlet v2 = createVector(100, 100, 0);\n\nlet v3 = p5.Vector.lerp(v1, v2, 0.5);\n// v3 has components [50,50,0]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\nlet step = 0.01;\nlet amount = 0;\n\nfunction draw() {\n  background(240);\n  let v0 = createVector(0, 0);\n\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'red');\n\n  let v2 = createVector(90, 90);\n  drawArrow(v0, v2, 'blue');\n\n  if (amount > 1 || amount < 0) {\n    step *= -1;\n  }\n  amount += step;\n  let v3 = p5.Vector.lerp(v1, v2, amount);\n\n  drawArrow(v0, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78892,
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "v",
                    "description": "the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to",
                    "type": "p5.Vector"
                },
                {
                    "name": "amt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78908,
            "description": "Reflect the incoming vector about a normal to a line in 2D, or about a normal to a plane in 3D\nThis method acts on the vector directly",
            "itemtype": "method",
            "name": "reflect",
            "params": [
                {
                    "name": "surfaceNormal",
                    "description": "the <a href=\"#/p5.Vector\">p5.Vector</a> to reflect about, will be normalized by this method",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = createVector(4, 6); // incoming vector, this example vector is heading to the right and downward\nlet n = createVector(0, -1); // surface normal to a plane (this example normal points directly upwards)\nv.reflect(n); // v is reflected about the surface normal n.  v's components are now set to [4, -6]\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(0, 0);\n  let v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'red');\n\n  let n = createVector(0, -30);\n  drawArrow(v1, n, 'blue');\n\n  let r = v1.copy();\n  r.reflect(n);\n  drawArrow(v1, r, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78963,
            "description": "Return a representation of this vector as a float array. This is only\nfor temporary use. If used in any other fashion, the contents should be\ncopied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own\narray.",
            "itemtype": "method",
            "name": "array",
            "return": {
                "description": "an Array with the 3 values",
                "type": "Number[]"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  let v = createVector(20, 30);\n  print(v.array()); // Prints : Array [20, 30, 0]\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v = createVector(10.0, 20.0, 30.0);\nlet f = v.array();\nprint(f[0]); // Prints \"10.0\"\nprint(f[1]); // Prints \"20.0\"\nprint(f[2]); // Prints \"30.0\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 78995,
            "description": "Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vectors are equals",
                "type": "Boolean"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nlet v1 = createVector(5, 10, 20);\nlet v2 = createVector(5, 10, 20);\nlet v3 = createVector(13, 10, 19);\n\nprint(v1.equals(v2.x, v2.y, v2.z)); // true\nprint(v1.equals(v3.x, v3.y, v3.z)); // false\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nlet v1 = createVector(10.0, 20.0, 30.0);\nlet v2 = createVector(10.0, 20.0, 30.0);\nlet v3 = createVector(0.0, 0.0, 0.0);\nprint(v1.equals(v2)); // true\nprint(v1.equals(v3)); // false\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79025,
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to compare",
                    "type": "p5.Vector|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79050,
            "description": "Make a new 2D vector from an angle",
            "itemtype": "method",
            "name": "fromAngle",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length of the new vector (defaults to 1)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(200);\n\n  // Create a variable, proportional to the mouseX,\n  // varying from 0-360, to represent an angle in degrees.\n  let myDegrees = map(mouseX, 0, width, 0, 360);\n\n  // Display that variable in an onscreen text.\n  // (Note the nfc() function to truncate additional decimal places,\n  // and the \"\\xB0\" character for the degree symbol.)\n  let readout = 'angle = ' + nfc(myDegrees, 1) + '\\xB0';\n  noStroke();\n  fill(0);\n  text(readout, 5, 15);\n\n  // Create a p5.Vector using the fromAngle function,\n  // and extract its x and y components.\n  let v = p5.Vector.fromAngle(radians(myDegrees), 30);\n  let vx = v.x;\n  let vy = v.y;\n\n  push();\n  translate(width / 2, height / 2);\n  noFill();\n  stroke(150);\n  line(0, 0, 30, 0);\n  stroke(0);\n  line(0, 0, vx, vy);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79105,
            "description": "Make a new 3D vector from a pair of ISO spherical angles",
            "itemtype": "method",
            "name": "fromAngles",
            "static": 1,
            "params": [
                {
                    "name": "theta",
                    "description": "the polar angle, in radians (zero is up)",
                    "type": "Number"
                },
                {
                    "name": "phi",
                    "description": "the azimuthal angle, in radians\n                              (zero is out of the screen)",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length of the new vector (defaults to 1)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  fill(255);\n  noStroke();\n}\nfunction draw() {\n  background(255);\n\n  let t = millis() / 1000;\n\n  // add three point lights\n  pointLight(color('#f00'), p5.Vector.fromAngles(t * 1.0, t * 1.3, 100));\n  pointLight(color('#0f0'), p5.Vector.fromAngles(t * 1.1, t * 1.2, 100));\n  pointLight(color('#00f'), p5.Vector.fromAngles(t * 1.2, t * 1.1, 100));\n\n  sphere(35);\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79154,
            "description": "Make a new 2D unit vector from a random angle",
            "itemtype": "method",
            "name": "random2D",
            "static": 1,
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = p5.Vector.random2D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.0] or\n// [-0.4695841, -0.14366731, 0.0] or\n// [0.6091097, -0.22805278, 0.0]\nprint(v);\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  frameRate(1);\n}\n\nfunction draw() {\n  background(240);\n\n  let v0 = createVector(50, 50);\n  let v1 = p5.Vector.random2D();\n  drawArrow(v0, v1.mult(50), 'black');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  let arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79207,
            "description": "Make a new random 3D unit vector.",
            "itemtype": "method",
            "name": "random3D",
            "static": 1,
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet v = p5.Vector.random3D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.599168] or\n// [-0.4695841, -0.14366731, -0.8711202] or\n// [0.6091097, -0.22805278, -0.7595902]\nprint(v);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79235,
            "itemtype": "method",
            "name": "add",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "return": {
                "description": "the resulting <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79261,
            "itemtype": "method",
            "name": "rem",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "dividend <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "divisor <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79267,
            "itemtype": "method",
            "name": "rem",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79286,
            "itemtype": "method",
            "name": "sub",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "return": {
                "description": "the resulting <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79311,
            "description": "Multiplies a vector by a scalar and returns a new vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79315,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79324,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79332,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "v0",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79340,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "v0",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "arr",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79363,
            "description": "Rotates the vector (only 2D vectors) by the given angle, magnitude remains the same and returns a new vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79367,
            "itemtype": "method",
            "name": "rotate",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79390,
            "description": "Divides a vector by a scalar and returns a new vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79394,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79403,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79411,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "v0",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79419,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "v0",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "arr",
                    "description": "",
                    "type": "Number[]"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79443,
            "description": "Calculates the dot product of two vectors.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79446,
            "itemtype": "method",
            "name": "dot",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79457,
            "description": "Calculates the cross product of two vectors.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79460,
            "itemtype": "method",
            "name": "cross",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79471,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79475,
            "itemtype": "method",
            "name": "dist",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79486,
            "description": "Linear interpolate a vector to another vector and return the result as a\nnew vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79490,
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "amt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "return": {
                "description": "the lerped value",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79515,
            "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x\\*x + y\\*y + z\\*z).)",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79519,
            "itemtype": "method",
            "name": "mag",
            "static": 1,
            "params": [
                {
                    "name": "vecT",
                    "description": "the vector to return the magnitude of",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the magnitude of vecT",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79533,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79536,
            "itemtype": "method",
            "name": "normalize",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the vector to normalize",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result (Optional)",
                    "type": "p5.Vector",
                    "optional": true
                }
            ],
            "return": {
                "description": "v normalized to a length of 1",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79600,
            "description": "Sets the seed value for <a href=\"#/p5/random\">random()</a>.\n\nBy default, <a href=\"#/p5/random\">random()</a> produces different results each time the program\nis run. Set the seed parameter to a constant to return the same\npseudo-random numbers each time the software is run.",
            "itemtype": "method",
            "name": "randomSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nrandomSeed(99);\nfor (let i = 0; i < 100; i++) {\n  let r = random(0, 255);\n  stroke(r);\n  line(i, 0, i, 100);\n}\n</code>\n</div>"
            ],
            "alt": "many vertical lines drawn in white, black or grey.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79629,
            "description": "Return a random floating-point number.\n\nTakes either 0, 1 or 2 arguments.\n\nIf no argument is given, returns a random number from 0\nup to (but not including) 1.\n\nIf one argument is given and it is a number, returns a random number from 0\nup to (but not including) the number.\n\nIf one argument is given and it is an array, returns a random element from\nthat array.\n\nIf two arguments are given, returns a random number from the\nfirst argument up to (but not including) the second argument.",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "min",
                    "description": "the lower bound (inclusive)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "max",
                    "description": "the upper bound (exclusive)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfor (let i = 0; i < 100; i++) {\n  let r = random(50);\n  stroke(r * 5);\n  line(50, i, 50 + r, i);\n}\n</code>\n</div>\n<div>\n<code>\nfor (let i = 0; i < 100; i++) {\n  let r = random(-50, 50);\n  line(50, i, 50 + r, i);\n}\n</code>\n</div>\n<div>\n<code>\n// Get a random element from an array using the random(Array) syntax\nlet words = ['apple', 'bear', 'cat', 'dog'];\nlet word = random(words); // select random word\ntext(word, 10, 50); // draw the word\n</code>\n</div>"
            ],
            "alt": "100 horizontal lines from center canvas to right. size+fill change each time\n100 horizontal lines from center of canvas. height & side change each render\nword displayed at random. Either apple, bear, cat, or dog",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79682,
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "choices",
                    "description": "the array to choose from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the random element from the array",
                "type": "*"
            },
            "example": [
                ""
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79716,
            "description": "Returns a random number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.\nTakes either 0, 1 or 2 arguments.<br>\n If no args, returns a mean of 0 and standard deviation of 1.<br>\n If one arg, that arg is the mean (standard deviation is 1).<br>\n If two args, first is mean, second is standard deviation.",
            "itemtype": "method",
            "name": "randomGaussian",
            "params": [
                {
                    "name": "mean",
                    "description": "the mean",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sd",
                    "description": "the standard deviation",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n <div>\n <code>\n for (let y = 0; y < 100; y++) {\n   let x = randomGaussian(50, 15);\n   line(50, y, x, y);\n }\n </code>\n </div>\n <div>\n <code>\n let distribution = new Array(360);\nfunction setup() {\n   createCanvas(100, 100);\n   for (let i = 0; i < distribution.length; i++) {\n     distribution[i] = floor(randomGaussian(0, 15));\n   }\n }\nfunction draw() {\n   background(204);\n  translate(width / 2, width / 2);\n  for (let i = 0; i < distribution.length; i++) {\n     rotate(TWO_PI / distribution.length);\n     stroke(0);\n     let dist = abs(distribution[i]);\n     line(0, 0, dist, 0);\n   }\n }\n </code>\n </div>"
            ],
            "alt": "100 horizontal lines from center of canvas. height & side change each render\n black lines radiate from center of canvas. size determined each render",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Vector"
        },
        {
            "file": "p5.js",
            "line": 79946,
            "description": "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value.\nThis function expects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or\n-90 to 90 if the angle mode is DEGREES.",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given value",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nlet a = PI / 3.0;\nlet t = tan(a);\nlet at = atan(t);\n// Prints: \"1.0471975 : 1.7320508 : 1.0471975\"\nprint(a + ' : ' + t + ' : ' + at);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nlet a = PI + PI / 3.0;\nlet t = tan(a);\nlet at = atan(t);\n// Prints: \"4.1887902 : 1.7320508 : 1.0471975\"\nprint(a + ' : ' + t + ' : ' + at);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 79981,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI if the angleMode is RADIANS or 180 to\n-180 if the angleMode is DEGREES. The atan2<a href=\"#/p5/\">()</a> function is\nmost often used for orienting geometry to the position of the cursor.\n\nNote: The y-coordinate of the point is the first parameter, and the\nx-coordinate is the second parameter, due the the structure of calculating\nthe tangent.",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "y-coordinate of the point",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given point",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(204);\n  translate(width / 2, height / 2);\n  let a = atan2(mouseY - height / 2, mouseX - width / 2);\n  rotate(a);\n  rect(-30, -5, 60, 10);\n}\n</code>\n</div>"
            ],
            "alt": "60 by 10 rect at center of canvas rotates with mouse movements",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80017,
            "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the cosine of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet a = 0.0;\nlet inc = TWO_PI / 25.0;\nfor (let i = 0; i < 25; i++) {\n  line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\n  a = a + inc;\n}\n</code>\n</div>"
            ],
            "alt": "vertical black lines form wave patterns, extend-down on left and right side",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80044,
            "description": "Calculates the sine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the sine of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet a = 0.0;\nlet inc = TWO_PI / 25.0;\nfor (let i = 0; i < 25; i++) {\n  line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\n  a = a + inc;\n}\n</code>\n</div>"
            ],
            "alt": "vertical black lines extend down and up from center to form wave pattern",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80071,
            "description": "Calculates the tangent of an angle. This function takes into account\nthe current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers.",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet a = 0.0;\nlet inc = TWO_PI / 50.0;\nfor (let i = 0; i < 100; i = i + 2) {\n  line(i, 50, i, 50 + tan(a) * 2.0);\n  a = a + inc;\n}\n</code>"
            ],
            "alt": "vertical black lines end down and up from center to form spike pattern",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80097,
            "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radians value to convert to degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nlet rad = PI / 4;\nlet deg = degrees(rad);\nprint(rad + ' radians is ' + deg + ' degrees');\n// Prints: 0.7853981633974483 radians is 45 degrees\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80122,
            "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree value to convert to radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nlet deg = 45.0;\nlet rad = radians(deg);\nprint(deg + ' degrees is ' + rad + ' radians');\n// Prints: 45 degrees is 0.7853981633974483 radians\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80147,
            "description": "Sets the current mode of p5 to given mode. Default mode is RADIANS.",
            "itemtype": "method",
            "name": "angleMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RADIANS or DEGREES",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(204);\n  angleMode(DEGREES); // Change the mode to DEGREES\n  let a = atan2(mouseY - height / 2, mouseX - width / 2);\n  translate(width / 2, height / 2);\n  push();\n  rotate(a);\n  rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\n  pop();\n  angleMode(RADIANS); // Change the mode to RADIANS\n  rotate(a); // variable a stays the same\n  rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\n}\n</code>\n</div>"
            ],
            "alt": "40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80182,
            "description": "converts angles from the current angleMode to RADIANS",
            "itemtype": "method",
            "name": "_toRadians",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80197,
            "description": "converts angles from the current angleMode to DEGREES",
            "itemtype": "method",
            "name": "_toDegrees",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80212,
            "description": "converts angles from RADIANS into the current angleMode",
            "itemtype": "method",
            "name": "_fromRadians",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "p5.js",
            "line": 80347,
            "itemtype": "method",
            "name": "textLeading",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80360,
            "description": "Sets/gets the current font size. This size will be used in all subsequent\ncalls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "theSize",
                    "description": "the size of the letters in units of pixels",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntextSize(12);\ntext('Font Size 12', 10, 30);\ntextSize(14);\ntext('Font Size 14', 10, 60);\ntextSize(16);\ntext('Font Size 16', 10, 90);\n</code>\n</div>"
            ],
            "alt": "'Font Size 12' displayed small, 'Font Size 14' medium & 'Font Size 16' large",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80383,
            "itemtype": "method",
            "name": "textSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80396,
            "description": "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\nNote: this may be is overridden by CSS styling. For non-system fonts\n(opentype, truetype, etc.) please load styled fonts instead.",
            "itemtype": "method",
            "name": "textStyle",
            "params": [
                {
                    "name": "theStyle",
                    "description": "styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(0);\ntextSize(12);\ntextStyle(NORMAL);\ntext('Font Style Normal', 10, 15);\ntextStyle(ITALIC);\ntext('Font Style Italic', 10, 40);\ntextStyle(BOLD);\ntext('Font Style Bold', 10, 65);\ntextStyle(BOLDITALIC);\ntext('Font Style Bold Italic', 10, 90);\n</code>\n</div>"
            ],
            "alt": "Words Font Style Normal displayed normally, Italic in italic, bold in bold and bold italic in bold italics.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80424,
            "itemtype": "method",
            "name": "textStyle",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80437,
            "description": "Calculates and returns the width of any character or text string.",
            "itemtype": "method",
            "name": "textWidth",
            "params": [
                {
                    "name": "theText",
                    "description": "the String of characters to measure",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the calculated width",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\ntextSize(28);\n\nlet aChar = 'P';\nlet cWidth = textWidth(aChar);\ntext(aChar, 0, 40);\nline(cWidth, 0, cWidth, 50);\n\nlet aString = 'p5.js';\nlet sWidth = textWidth(aString);\ntext(aString, 0, 85);\nline(sWidth, 50, sWidth, 100);\n</code>\n</div>"
            ],
            "alt": "Letter P and p5.js are displayed with vertical lines at end.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80483,
            "description": "Returns the ascent of the current font at its current size. The ascent\nrepresents the distance, in pixels, of the tallest character above\nthe baseline.",
            "itemtype": "method",
            "name": "textAscent",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet base = height * 0.75;\nlet scalar = 0.8; // Different for each font\n\ntextSize(32); // Set initial text size\nlet asc = textAscent() * scalar; // Calc ascent\nline(0, base - asc, width, base - asc);\ntext('dp', 0, base); // Draw text on baseline\n\ntextSize(64); // Increase text size\nasc = textAscent() * scalar; // Recalc ascent\nline(40, base - asc, width, base - asc);\ntext('dp', 40, base); // Draw text on baseline\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80519,
            "description": "Returns the descent of the current font at its current size. The descent\nrepresents the distance, in pixels, of the character with the longest\ndescender below the baseline.",
            "itemtype": "method",
            "name": "textDescent",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet base = height * 0.75;\nlet scalar = 0.8; // Different for each font\n\ntextSize(32); // Set initial text size\nlet desc = textDescent() * scalar; // Calc ascent\nline(0, base + desc, width, base + desc);\ntext('dp', 0, base); // Draw text on baseline\n\ntextSize(64); // Increase text size\ndesc = textDescent() * scalar; // Recalc ascent\nline(40, base + desc, width, base + desc);\ntext('dp', 40, base); // Draw text on baseline\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80555,
            "description": "Helper function to measure ascent and descent.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "p5.js",
            "line": 80860,
            "description": "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\nIf textFont() is called without any argument, it will return the current font if one has\nbeen set already. If not, it will return the name of the default font as a string.\nIf textFont() is called with a font to use, it will return the p5 object.\n\n<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.",
            "itemtype": "method",
            "name": "textFont",
            "return": {
                "description": "the current font / p5 Object",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nfill(0);\ntextSize(12);\ntextFont('Georgia');\ntext('Georgia', 12, 30);\ntextFont('Helvetica');\ntext('Helvetica', 12, 60);\n</code>\n</div>\n<div>\n<code>\nlet fontRegular, fontItalic, fontBold;\nfunction preload() {\n  fontRegular = loadFont('assets/Regular.otf');\n  fontItalic = loadFont('assets/Italic.ttf');\n  fontBold = loadFont('assets/Bold.ttf');\n}\nfunction setup() {\n  background(210);\n  fill(0)\n      .strokeWeight(0)\n      .textSize(10);\n  textFont(fontRegular);\n  text('Font Style Normal', 10, 30);\n  textFont(fontItalic);\n  text('Font Style Italic', 10, 50);\n  textFont(fontBold);\n  text('Font Style Bold', 10, 70);\n}\n</code>\n</div>"
            ],
            "alt": "word 'Georgia' displayed in font Georgia and 'Helvetica' in font Helvetica\nwords Font Style Normal displayed normally, Italic in italic and bold in bold",
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 80909,
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "font",
                    "description": "a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>,\nor a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a>\n(a font that is generally available across all systems)",
                    "type": "Object|String"
                },
                {
                    "name": "size",
                    "description": "the font size to use",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 81031,
            "description": "Underlying opentype font implementation",
            "itemtype": "property",
            "name": "font",
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 81038,
            "description": "Returns a tight bounding box for the given text string using this\nfont",
            "itemtype": "method",
            "name": "textBounds",
            "params": [
                {
                    "name": "line",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "fontSize",
                    "description": "font size to use (optional) Default is 12.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "opentype options (optional)\n                           opentype fonts contains alignment and baseline options.\n                           Default is 'LEFT' and 'alphabetic'",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "a rectangle object with properties: x, y, w, h",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nlet font;\nlet textString = 'Lorem ipsum dolor sit amet.';\nfunction preload() {\n  font = loadFont('./assets/Regular.otf');\n}\nfunction setup() {\n  background(210);\n\n  let bbox = font.textBounds(textString, 10, 30, 12);\n  fill(255);\n  stroke(0);\n  rect(bbox.x, bbox.y, bbox.w, bbox.h);\n  fill(0);\n  noStroke();\n\n  textFont(font);\n  textSize(12);\n  text(textString, 10, 30);\n}\n</code>\n</div>"
            ],
            "alt": "words Lorem ipsum dol go off canvas and contained by white bounding box",
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 81184,
            "description": "Computes an array of points following the path for specified text",
            "itemtype": "method",
            "name": "textToPoints",
            "params": [
                {
                    "name": "txt",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "fontSize",
                    "description": "font size to use (optional)",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "an (optional) object that can contain:\n\n<br>sampleFactor - the ratio of path-length to number of samples\n(default=.1); higher values yield more points and are therefore\nmore precise\n\n<br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "an array of points, each with x, y, alpha (the path angle)",
                "type": "Array"
            },
            "example": [
                "\n<div>\n<code>\nlet font;\nfunction preload() {\n  font = loadFont('assets/inconsolata.otf');\n}\n\nlet points;\nlet bounds;\nfunction setup() {\n  createCanvas(100, 100);\n  stroke(0);\n  fill(255, 104, 204);\n\n  points = font.textToPoints('p5', 0, 0, 10, {\n    sampleFactor: 5,\n    simplifyThreshold: 0\n  });\n  bounds = font.textBounds(' p5 ', 0, 0, 10);\n}\n\nfunction draw() {\n  background(255);\n  beginShape();\n  translate(-bounds.x * width / bounds.w, -bounds.y * height / bounds.h);\n  for (let i = 0; i < points.length; i++) {\n    let p = points[i];\n    vertex(\n      p.x * width / bounds.w +\n        sin(20 * p.y / bounds.h + millis() / 1000) * width / 30,\n      p.y * height / bounds.h\n    );\n  }\n  endShape(CLOSE);\n}\n</code>\n</div>"
            ],
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 81288,
            "description": "Returns the set of opentype glyphs for the supplied string.\n\nNote that there is not a strict one-to-one mapping between characters\nand glyphs, so the list of returned glyphs can be larger or smaller\n than the length of the given string.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "the string to be converted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the opentype glyphs",
                "type": "Array"
            },
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 81303,
            "description": "Returns an opentype path for the supplied string and position.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "line",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "opentype options (optional)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the opentype path",
                "type": "Object"
            },
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "p5.js",
            "line": 82383,
            "itemtype": "method",
            "name": "arrayCopy",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82428,
            "description": "Concatenates two arrays, maps to Array.concat(). Does not modify the\ninput arrays.",
            "itemtype": "method",
            "name": "concat",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">arr1.concat(arr2)</a> instead.",
            "params": [
                {
                    "name": "a",
                    "description": "first Array to concatenate",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "second Array to concatenate",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "concatenated array",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  let arr1 = ['A', 'B', 'C'];\n  let arr2 = [1, 2, 3];\n\n  print(arr1); // ['A','B','C']\n  print(arr2); // [1,2,3]\n\n  let arr3 = concat(arr1, arr2);\n\n  print(arr1); // ['A','B','C']\n  print(arr2); // [1, 2, 3]\n  print(arr3); // ['A','B','C', 1, 2, 3]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82459,
            "description": "Reverses the order of an array, maps to Array.reverse()",
            "itemtype": "method",
            "name": "reverse",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to reverse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the reversed list",
                "type": "Array"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  let myArray = ['A', 'B', 'C'];\n  print(myArray); // ['A','B','C']\n\n  reverse(myArray);\n  print(myArray); // ['C','B','A']\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82481,
            "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
            "itemtype": "method",
            "name": "shorten",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to shorten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "shortened Array",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  let myArray = ['A', 'B', 'C'];\n  print(myArray); // ['A', 'B', 'C']\n  let newArray = shorten(myArray);\n  print(myArray); // ['A','B','C']\n  print(newArray); // ['A','B']\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82505,
            "description": "Randomizes the order of the elements of an array. Implements\n<a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\nFisher-Yates Shuffle Algorithm</a>.",
            "itemtype": "method",
            "name": "shuffle",
            "params": [
                {
                    "name": "array",
                    "description": "Array to shuffle",
                    "type": "Array"
                },
                {
                    "name": "bool",
                    "description": "modify passed array",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "shuffled Array",
                "type": "Array"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  let regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n  print(regularArr);\n  shuffle(regularArr, true); // force modifications to passed array\n  print(regularArr);\n\n  // By default shuffle() returns a shuffled cloned array:\n  let newArr = shuffle(regularArr);\n  print(regularArr);\n  print(newArr);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82547,
            "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
            "itemtype": "method",
            "name": "sort",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to sort",
                    "type": "Array"
                },
                {
                    "name": "count",
                    "description": "number of elements to sort, starting from 0",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "the sorted list",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  let words = ['banana', 'apple', 'pear', 'lime'];\n  print(words); // ['banana', 'apple', 'pear', 'lime']\n  let count = 4; // length of array\n\n  words = sort(words, count);\n  print(words); // ['apple', 'banana', 'lime', 'pear']\n}\n</code></div>\n<div class = 'norender'><code>\nfunction setup() {\n  let numbers = [2, 6, 1, 5, 14, 9, 8, 12];\n  print(numbers); // [2, 6, 1, 5, 14, 9, 8, 12]\n  let count = 5; // Less than the length of the array\n\n  numbers = sort(numbers, count);\n  print(numbers); // [1,2,5,6,14,9,8,12]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82595,
            "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
            "itemtype": "method",
            "name": "splice",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to splice into",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "value to be spliced in",
                    "type": "Any"
                },
                {
                    "name": "position",
                    "description": "in the array from which to insert data",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the list",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  let myArray = [0, 1, 2, 3, 4];\n  let insArray = ['A', 'B', 'C'];\n  print(myArray); // [0, 1, 2, 3, 4]\n  print(insArray); // ['A','B','C']\n\n  splice(myArray, insArray, 3);\n  print(myArray); // [0,1,2,'A','B','C',3,4]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82630,
            "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
            "itemtype": "method",
            "name": "subset",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to extract from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "position to begin",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "number of values to extract",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of extracted elements",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  let myArray = [1, 2, 3, 4, 5];\n  print(myArray); // [1, 2, 3, 4, 5]\n\n  let sub1 = subset(myArray, 0, 3);\n  let sub2 = subset(myArray, 2, 2);\n  print(sub1); // [1,2,3]\n  print(sub2); // [3,4]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "p5.js",
            "line": 82740,
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82765,
            "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(str('10')); // \"10\"\nprint(str(10.31)); // \"10.31\"\nprint(str(-10)); // \"-10\"\nprint(str(true)); // \"true\"\nprint(str(false)); // \"false\"\nprint(str([true, '10.3', 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82791,
            "description": "Converts a number or string to its boolean representation.\nFor a number, any non-zero value (positive or negative) evaluates to true,\nwhile zero evaluates to false. For a string, the value \"true\" evaluates to\ntrue, while any other value evaluates to false. When an array of number or\nstring values is passed in, then a array of booleans of the same length is\nreturned.",
            "itemtype": "method",
            "name": "boolean",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "boolean representation of value",
                "type": "Boolean"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(boolean(0)); // false\nprint(boolean(1)); // true\nprint(boolean('true')); // true\nprint(boolean('abcd')); // false\nprint(boolean([0, 12, 'true'])); // [false, true, true]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82823,
            "description": "Converts a number, string representation of a number, or boolean to its byte\nrepresentation. A byte can be only a whole number between -128 and 127, so\nwhen a value outside of this range is converted, it wraps around to the\ncorresponding byte representation. When an array of number, string or boolean\nvalues is passed in, then an array of bytes the same length is returned.",
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number"
                }
            ],
            "return": {
                "description": "byte representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(byte(127)); // 127\nprint(byte(128)); // -128\nprint(byte(23.4)); // 23\nprint(byte('23.4')); // 23\nprint(byte('hello')); // NaN\nprint(byte(true)); // 1\nprint(byte([0, 255, '100'])); // [0, -1, 100]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82845,
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of byte representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82859,
            "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned.",
            "itemtype": "method",
            "name": "char",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(char(65)); // \"A\"\nprint(char('65')); // \"A\"\nprint(char([65, 66, 67])); // [ \"A\", \"B\", \"C\" ]\nprint(join(char([65, 66, 67]), '')); // \"ABC\"\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82878,
            "itemtype": "method",
            "name": "char",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of string representation of values",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82893,
            "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unchar",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unchar('A')); // 65\nprint(unchar(['A', 'B', 'C'])); // [ 65, 66, 67 ]\nprint(unchar(split('ABC', ''))); // [ 65, 66, 67 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82909,
            "itemtype": "method",
            "name": "unchar",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82922,
            "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned.",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "Number"
                },
                {
                    "name": "digits",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "hexadecimal string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(hex(255)); // \"000000FF\"\nprint(hex(255, 6)); // \"0000FF\"\nprint(hex([0, 127, 255], 6)); // [ \"000000\", \"00007F\", \"0000FF\" ]\nprint(Infinity); // \"FFFFFFFF\"\nprint(-Infinity); // \"00000000\"\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82942,
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "ns",
                    "description": "array of values to parse",
                    "type": "Number[]"
                },
                {
                    "name": "digits",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "hexadecimal string representation of values",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82974,
            "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "integer representation of hexadecimal value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unhex('A')); // 10\nprint(unhex('FF')); // 255\nprint(unhex(['FF', 'AA', '00'])); // [ 255, 170, 0 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 82990,
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representations of hexadecimal value",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83025,
            "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\nnfs().",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "list",
                    "description": "array of Strings to be joined",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "String to be placed between each item",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings found",
                "type": "String[]"
            },
            "example": [
                "\n<div>\n<code>\nlet array = ['Hello', 'world!'];\nlet separator = ' ';\nlet message = join(array, separator);\ntext(message, 5, 50);\n</code>\n</div>",
                "\n<div>\n<code>\nlet string = 'Hello p5js*!';\nlet regexp = 'p5js\\\\*';\nlet m = match(string, regexp);\ntext(m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "\"p5js*\" displayed middle left of canvas.",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83092,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on).",
            "itemtype": "method",
            "name": "matchAll",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "2d Array of Strings found",
                "type": "String[]"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nlet string = 'Hello p5js*! Hello world!';\nlet regexp = 'Hello';\nmatchAll(string, regexp);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83139,
            "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers.\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\nif greater than the current length of the number.\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\nthe result will be 123.200.",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|String"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the\n                               decimal point",
                    "type": "Integer|String",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/fonts/inconsolata.ttf');\n}\nfunction setup() {\n  background(200);\n  let num1 = 321;\n  let num2 = -1321;\n\n  noStroke();\n  fill(0);\n  textFont(myFont);\n  textSize(22);\n\n  text(nf(num1, 4, 2), 10, 30);\n  text(nf(num2, 4, 2), 10, 80);\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"0321.00\" middle top, -1321.00\" middle bottom canvas",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83187,
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83250,
            "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|String"
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                                 decimal point",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  let num = 11253106.115;\n  let numArr = [1, 1, 2];\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfc(num, 4), 10, 30);\n  text(nfc(numArr, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"11,253,106.115\" top middle and \"1.00,1.00,2.00\" displayed bottom mid",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83288,
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83326,
            "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  let num1 = 11253106.115;\n  let num2 = -11253106.115;\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfp(num1, 4, 2), 10, 30);\n  text(nfp(num2, 4, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"+11253106.11\" top middle and \"-11253106.11\" displayed bottom middle",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83367,
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Number[]"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83395,
            "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs an additional \"_\" (space) in front of positive numbers just in case to align it with negative\nnumbers which includes \"-\" (minus) sign.\nThe main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative\nnumber with some negative number (See the example to get a clear picture).\nThere are two versions: one for formatting float, and one for formatting int.\nThe values for the digits, left, and right parameters should always be positive integers.\n(IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\nif greater than the current length of the number.\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\nthe result will be 123.200.",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/fonts/inconsolata.ttf');\n}\nfunction setup() {\n  background(200);\n  let num1 = 321;\n  let num2 = -1321;\n\n  noStroke();\n  fill(0);\n  textFont(myFont);\n  textSize(22);\n\n  // nfs() aligns num1 (positive number) with num2 (negative number) by\n  // adding a blank space in front of the num1 (positive number)\n  // [left = 4] in num1 add one 0 in front, to align the digits with num2\n  // [right = 2] in num1 and num2 adds two 0's after both numbers\n  // To see the differences check the example of nf() too.\n  text(nfs(num1, 4, 2), 10, 30);\n  text(nfs(num2, 4, 2), 10, 80);\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"0321.00\" top middle and \"-1321.00\" displayed bottom middle",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83452,
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83480,
            "description": "The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "the String used to separate the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n<div>\n<code>\nlet names = 'Pat,Xio,Alex';\nlet splitString = split(names, ',');\ntext(splitString[0], 5, 30);\ntext(splitString[1], 5, 50);\ntext(splitString[2], 5, 70);\n</code>\n</div>"
            ],
            "alt": "\"pat\" top left, \"Xio\" mid left and \"Alex\" displayed bottom left",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83513,
            "description": "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space.",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "list of individual Strings that will be used as\n                         separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  let myStr = 'Mango, Banana, Lime';\n  let myStrArr = splitTokens(myStr, ',');\n\n  print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83568,
            "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "a String to be trimmed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a trimmed String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nlet string = trim('  No new lines\\n   ');\ntext(string + ' here', 2, 50);\n</code>\n</div>"
            ],
            "alt": "\"No new lines here\" displayed center canvas",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83588,
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "strs",
                    "description": "an Array of Strings to be trimmed",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an Array of trimmed Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "p5.js",
            "line": 83667,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\nreturns the current minute as a value from 0 - 59.",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "the current minute",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nlet m = minute();\ntext('Current minute: \\n' + m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current minute is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "p5.js",
            "line": 83688,
            "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the sketch (when `setup()` is called). This information is often\nused for timing events and animation sequences.",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "the number of milliseconds since starting the sketch",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nlet millisecond = millis();\ntext('Milliseconds \\nrunning: \\n' + millisecond, 5, 40);\n</code>\n</div>"
            ],
            "alt": "number of milliseconds since sketch has started displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "p5.js",
            "line": 83715,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\nreturns the current month as a value from 1 - 12.",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "the current month",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nlet m = month();\ntext('Current month: \\n' + m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current month is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "p5.js",
            "line": 83737,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\nreturns the current second as a value from 0 - 59.",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "the current second",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nlet s = second();\ntext('Current second: \\n' + s, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current second is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "p5.js",
            "line": 83758,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "the current year",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nlet y = year();\ntext('Current year: \\n' + y, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current year is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "p5.js",
            "line": 84061,
            "description": "Draw a sphere with given radius.\n\nDetailX and detailY determines the number of subdivisions in the x-dimension\nand the y-dimension of a sphere. More subdivisions make the sphere seem\nsmoother. The recommended maximum values are both 24. Using a value greater\nthan 24 may cause a warning or slow down the browser.",
            "itemtype": "method",
            "name": "sphere",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of circle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "optional number of subdivisions in x-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "optional number of subdivisions in y-dimension",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a sphere with radius 40\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  sphere(40);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nlet detailX;\n// slide to see how detailX works\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailX = createSlider(3, 24, 3);\n  detailX.position(10, height + 5);\n  detailX.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateY(millis() / 1000);\n  sphere(40, detailX.value(), 16);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nlet detailY;\n// slide to see how detailY works\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailY = createSlider(3, 16, 3);\n  detailY.position(10, height + 5);\n  detailY.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateY(millis() / 1000);\n  sphere(40, 16, detailY.value());\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84147,
            "access": "private",
            "tagname": "Helper function for creating both cones and cylinders\nWill only generate well-defined geometry when bottomRadius, height > 0\nand topRadius >= 0\nIf topRadius == 0, topCap should be false",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84272,
            "description": "Draw a cylinder with given radius and height\n\nDetailX and detailY determines the number of subdivisions in the x-dimension\nand the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother.\nThe recommended maximum value for detailX is 24. Using a value greater than 24\nmay cause a warning or slow down the browser.",
            "itemtype": "method",
            "name": "cylinder",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the surface",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the cylinder",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of subdivisions in x-dimension;\n                              default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of subdivisions in y-dimension;\n                              default is 1",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "bottomCap",
                    "description": "whether to draw the bottom of the cylinder",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "topCap",
                    "description": "whether to draw the top of the cylinder",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a spinning cylinder\n// with radius 20 and height 50\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateX(frameCount * 0.01);\n  rotateZ(frameCount * 0.01);\n  cylinder(20, 50);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailX works\nlet detailX;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailX = createSlider(3, 24, 3);\n  detailX.position(10, height + 5);\n  detailX.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateY(millis() / 1000);\n  cylinder(20, 75, detailX.value(), 1);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailY works\nlet detailY;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailY = createSlider(1, 16, 1);\n  detailY.position(10, height + 5);\n  detailY.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateY(millis() / 1000);\n  cylinder(20, 75, 16, detailY.value());\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84412,
            "description": "Draw a cone with given radius and height\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a cone. More subdivisions make the cone seem smoother. The\nrecommended maximum value for detailX is 24. Using a value greater than 24\nmay cause a warning or slow down the browser.",
            "itemtype": "method",
            "name": "cone",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the bottom surface",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the cone",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 1",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "cap",
                    "description": "whether to draw the base of the cone",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a spinning cone\n// with radius 40 and height 70\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateZ(frameCount * 0.01);\n  cone(40, 70);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailx works\nlet detailX;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailX = createSlider(3, 16, 3);\n  detailX.position(10, height + 5);\n  detailX.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  rotateY(millis() / 1000);\n  cone(30, 65, detailX.value(), 16);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailY works\nlet detailY;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailY = createSlider(3, 16, 3);\n  detailY.position(10, height + 5);\n  detailY.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  rotateY(millis() / 1000);\n  cone(30, 65, 16, detailY.value());\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84530,
            "description": "Draw an ellipsoid with given radius\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother.\nAvoid detail number above 150, it may crash the browser.",
            "itemtype": "method",
            "name": "ellipsoid",
            "params": [
                {
                    "name": "radiusx",
                    "description": "x-radius of ellipsoid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "radiusy",
                    "description": "y-radius of ellipsoid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "radiusz",
                    "description": "z-radius of ellipsoid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw an ellipsoid\n// with radius 30, 40 and 40.\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  ellipsoid(30, 40, 40);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailX works\nlet detailX;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailX = createSlider(2, 24, 12);\n  detailX.position(10, height + 5);\n  detailX.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 94);\n  rotateY(millis() / 1000);\n  ellipsoid(30, 40, 40, detailX.value(), 8);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailY works\nlet detailY;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailY = createSlider(2, 24, 6);\n  detailY.position(10, height + 5);\n  detailY.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 105, 9);\n  rotateY(millis() / 1000);\n  ellipsoid(30, 40, 40, 12, detailY.value());\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84675,
            "description": "Draw a torus with given radius and tube radius\n\nDetailX and detailY determine the number of subdivisions in the x-dimension and\nthe y-dimension of a torus. More subdivisions make the torus appear to be smoother.\nThe default and maximum values for detailX and detailY are 24 and 16, respectively.\nSetting them to relatively small values like 4 and 6 allows you to create new\nshapes other than a torus.",
            "itemtype": "method",
            "name": "torus",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the whole ring",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tubeRadius",
                    "description": "radius of the tube",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a spinning torus\n// with ring radius 30 and tube radius 15\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  torus(30, 15);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailX works\nlet detailX;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailX = createSlider(3, 24, 3);\n  detailX.position(10, height + 5);\n  detailX.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  rotateY(millis() / 1000);\n  torus(30, 15, detailX.value(), 12);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n// slide to see how detailY works\nlet detailY;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  detailY = createSlider(3, 16, 3);\n  detailY.position(10, height + 5);\n  detailY.style('width', '80px');\n}\n\nfunction draw() {\n  background(205, 102, 94);\n  rotateY(millis() / 1000);\n  torus(30, 15, 16, detailY.value());\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 84833,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel,\ngiven x, y and z coordinates. The color of the point is determined\nby the current stroke, while the point size is determined by current\nstroke weight.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of point",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(50);\n  stroke(255);\n  strokeWeight(4);\n  point(25, 0);\n  strokeWeight(3);\n  point(-25, 0);\n  strokeWeight(2);\n  point(0, 25);\n  strokeWeight(1);\n  point(0, -25);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 85277,
            "description": "Draw a line given two points",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x0",
                    "description": "x-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "y-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "z0",
                    "description": "z-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "x-coordinate of second vertex",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of second vertex",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate of second vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a line\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  // Use fill instead of stroke to change the color of shape.\n  fill(255, 0, 0);\n  line(10, 10, 0, 60, 60, 20);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 85975,
            "description": "debugMode() helps visualize 3D space by adding a grid to indicate where the\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\ndirections. This function can be called without parameters to create a\ndefault grid and axes icon, or it can be called according to the examples\nabove to customize the size and position of the grid and/or axes icon.  The\ngrid is drawn using the most recently set stroke color and weight.  To\nspecify these parameters, add a call to stroke() and strokeWeight()\njust before the end of the draw() loop.\n\nBy default, the grid will run through the origin (0,0,0) of the sketch\nalong the XZ plane\nand the axes icon will be offset from the origin.  Both the grid and axes\nicon will be sized according to the current canvas size.  Note that because the\ngrid runs parallel to the default camera view, it is often helpful to use\ndebugMode along with orbitControl to allow full view of the grid.",
            "itemtype": "method",
            "name": "debugMode",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode();\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // Press the spacebar to turn debugMode off!\n  if (keyIsDown(32)) {\n    noDebugMode();\n  }\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(GRID);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(AXES);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(GRID, 100, 10, 0, 0, 0);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\n}\n\nfunction draw() {\n  noStroke();\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // set the stroke color and weight for the grid!\n  stroke(255, 0, 150);\n  strokeWeight(0.8);\n}\n</code>\n</div>"
            ],
            "alt": "a 3D box is centered on a grid in a 3D sketch. an icon\nindicates the direction of each axis: a red line points +X,\na green line +Y, and a blue line +Z.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86108,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either GRID or AXES",
                    "type": "Constant"
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86113,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "gridSize",
                    "description": "size of one side of the grid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridDivisions",
                    "description": "number of divisions in the grid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "X axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "Y axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "Z axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86123,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "axesSize",
                    "description": "size of axes icon",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86132,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "gridSize",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridDivisions",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridXOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridYOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridZOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesSize",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesXOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesYOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesZOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86191,
            "description": "Turns off debugMode() in a 3D sketch.",
            "itemtype": "method",
            "name": "noDebugMode",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode();\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // Press the spacebar to turn debugMode off!\n  if (keyIsDown(32)) {\n    noDebugMode();\n  }\n}\n</code>\n</div>"
            ],
            "alt": "a 3D box is centered on a grid in a 3D sketch. an icon\nindicates the direction of each axis: a red line points +X,\na green line +Y, and a blue line +Z. the grid and icon disappear when the\nspacebar is pressed.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86236,
            "description": "For use with debugMode",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_grid",
            "params": [
                {
                    "name": "size",
                    "description": "size of grid sides",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "div",
                    "description": "number of grid divisions",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "offset of grid center from origin in X axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "offset of grid center from origin in Y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "offset of grid center from origin in Z axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86314,
            "description": "For use with debugMode",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_axesIcon",
            "params": [
                {
                    "name": "size",
                    "description": "size of axes icon lines",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "offset of icon from origin in X axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "offset of icon from origin in Y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "offset of icon from origin in Z axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86500,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86507,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86514,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "color",
                    "description": "the ambient light color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86535,
            "description": "Set's the color of the specular highlight when using a specular material and\nspecular light.\n\nThis method can be combined with specularMaterial() and shininess()\nfunctions to set specular highlights. The default color is white, ie\n(255, 255, 255), which is used if this method is not called before\nspecularMaterial(). If this method is called without specularMaterial(),\nThere will be no effect.\n\nNote: specularColor is equivalent to the processing function\n<a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>.",
            "itemtype": "method",
            "name": "specularColor",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noStroke();\n}\n\nfunction draw() {\n  background(0);\n  shininess(20);\n  ambientLight(50);\n  specularColor(255, 0, 0);\n  pointLight(255, 0, 0, 0, -50, 50);\n  specularColor(0, 255, 0);\n  pointLight(0, 255, 0, 0, 50, 50);\n  specularMaterial(255);\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "different specular light sources from top and bottom of canvas",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86582,
            "itemtype": "method",
            "name": "specularColor",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86588,
            "itemtype": "method",
            "name": "specularColor",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86594,
            "itemtype": "method",
            "name": "specularColor",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86601,
            "itemtype": "method",
            "name": "specularColor",
            "params": [
                {
                    "name": "color",
                    "description": "the ambient light color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86620,
            "description": "Creates a directional light with a color and a direction\n\nA maximum of 5 directionalLight can be active at one time",
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current\ncolor mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "the direction of the light",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  //move your mouse to change light direction\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  noStroke();\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "light source on canvas changeable with mouse position",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86653,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, CSS color string,\n                                            or <a href=\"#/p5.Color\">p5.Color</a> value",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "x axis direction",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y axis direction",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z axis direction",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86663,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86670,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86724,
            "description": "Creates a point light with a color and a light position\n\nA maximum of 5 pointLight can be active at one time",
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current\ncolor mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x axis position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y axis position",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z axis position",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  //move your mouse to change light position\n  let locX = mouseX - width / 2;\n  let locY = mouseY - height / 2;\n  // to set the light position,\n  // think of the world's coordinate as:\n  // -width/2,-height/2 -------- width/2,-height/2\n  //                |            |\n  //                |     0,0    |\n  //                |            |\n  // -width/2,height/2--------width/2,height/2\n  pointLight(250, 250, 250, locX, locY, 50);\n  noStroke();\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "spot light on canvas changes position with mouse",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86766,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "the position of the light",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86775,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, CSS color string,\nor <a href=\"#/p5.Color\">p5.Color</a> value",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86785,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86832,
            "description": "Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop.",
            "itemtype": "method",
            "name": "lights",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  lights();\n  rotateX(millis() / 1000);\n  rotateY(millis() / 1000);\n  rotateZ(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "the light is partially ambient and partially directional",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86870,
            "description": "Sets the falloff rates for point lights. It affects only the elements which are created after it in the code.\nThe default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:\n\nd = distance from light position to vertex position\n\nfalloff = 1 / (CONSTANT + d \\* LINEAR + ( d \\* d ) \\* QUADRATIC)",
            "itemtype": "method",
            "name": "lightFalloff",
            "params": [
                {
                    "name": "constant",
                    "description": "constant value for determining falloff",
                    "type": "Number"
                },
                {
                    "name": "linear",
                    "description": "linear value for determining falloff",
                    "type": "Number"
                },
                {
                    "name": "quadratic",
                    "description": "quadratic value for determining falloff",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noStroke();\n}\nfunction draw() {\n  background(0);\n  let locX = mouseX - width / 2;\n  let locY = mouseY - height / 2;\n  translate(-25, 0, 0);\n  lightFalloff(1, 0, 0);\n  pointLight(250, 250, 250, locX, locY, 50);\n  sphere(20);\n  translate(50, 0, 0);\n  lightFalloff(0.9, 0.01, 0);\n  pointLight(250, 250, 250, locX, locY, 50);\n  sphere(20);\n}\n</code>\n</div>"
            ],
            "alt": "Two spheres with different falloff values show different intensity of light",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 86956,
            "description": "Creates a spotlight with a given color, position, direction of light,\nangle and concentration. Here, angle refers to the opening or aperture\nof the cone of the spotlight, and concentration is used to focus the\nlight towards the center. Both angle and concentration are optional, but if\nyou want to provide concentration, you will also have to specify the angle.\n\nA maximum of 5 spotLight can be active at one time",
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current\ncolor mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x axis position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y axis position",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z axis position",
                    "type": "Number"
                },
                {
                    "name": "rx",
                    "description": "x axis direction of light",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "y axis direction of light",
                    "type": "Number"
                },
                {
                    "name": "rz",
                    "description": "z axis direction of light",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "optional parameter for angle. Defaults to PI/3",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "optional parameter for concentration. Defaults to 100",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  //move your mouse to change light position\n  let locX = mouseX - width / 2;\n  let locY = mouseY - height / 2;\n  // to set the light position,\n  // think of the world's coordinate as:\n  // -width/2,-height/2 -------- width/2,-height/2\n  //                |            |\n  //                |     0,0    |\n  //                |            |\n  // -width/2,height/2--------width/2,height/2\n  ambientLight(50);\n  spotLight(0, 250, 0, locX, locY, 100, 0, 0, -1, Math.PI / 16);\n  noStroke();\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "Spot light on a sphere which changes position with mouse",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87008,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, CSS color string,\nor <a href=\"#/p5.Color\">p5.Color</a> value",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "the position of the light",
                    "type": "p5.Vector"
                },
                {
                    "name": "direction",
                    "description": "the direction of the light",
                    "type": "p5.Vector"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87017,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87027,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87037,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "rx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rz",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87047,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87059,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "rx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rz",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87071,
            "itemtype": "method",
            "name": "spotLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rz",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "conc",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87322,
            "description": "This function will remove all the lights from the sketch for the\nsubsequent materials rendered. It affects all the subsequent methods.\nCalls to lighting methods made after noLights() will re-enable lights\nin the sketch.",
            "itemtype": "method",
            "name": "noLights",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  noStroke();\n\n  ambientLight(150, 0, 0);\n  translate(-25, 0, 0);\n  ambientMaterial(250);\n  sphere(20);\n\n  noLights();\n  ambientLight(0, 150, 0);\n  translate(50, 0, 0);\n  ambientMaterial(250);\n  sphere(20);\n}\n</code>\n</div>"
            ],
            "alt": "Two spheres showing different colors",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "p5.js",
            "line": 87683,
            "description": "STL files can be of two types, ASCII and Binary,\n\nWe need to convert the arrayBuffer to an array of strings,\nto parse it as an ASCII file.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 87711,
            "description": "This function checks if the file is in ASCII format or in Binary format\n\nIt is done by searching keyword `solid` at the start of the file.\n\nAn ASCII STL data must begin with `solid` as the first six bytes.\nHowever, ASCII STLs lacking the SPACE after the `d` are known to be\nplentiful. So, check the first 5 bytes for `solid`.\n\nSeveral encodings, such as UTF-8, precede the text with up to 5 bytes:\nhttps://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\nSearch for `solid` to start anywhere after those prefixes.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 87738,
            "description": "This function matches the `query` at the provided `offset`",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 87750,
            "description": "This function parses the Binary STL files.\nhttps://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\n\nCurrently there is no support for the colors provided in STL files.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 87838,
            "description": "ASCII STL file starts with `solid 'nameOfFile'`\nThen contain the normal of the face, starting with `facet normal`\nNext contain a keyword indicating the start of face vertex, `outer loop`\nNext comes the three vertex, starting with `vertex x y z`\nVertices ends with `endloop`\nFace ends with `endfacet`\nNext face starts with `facet normal`\nThe end of the file is indicated by `endsolid`",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 87998,
            "description": "Render a 3d model to the screen.",
            "itemtype": "method",
            "name": "model",
            "params": [
                {
                    "name": "model",
                    "description": "Loaded 3d model to be rendered",
                    "type": "p5.Geometry"
                }
            ],
            "example": [
                "\n<div>\n<code>\n//draw a spinning octahedron\nlet octahedron;\n\nfunction preload() {\n  octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  model(octahedron);\n}\n</code>\n</div>"
            ],
            "alt": "Vertically rotating 3-d octahedron.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "p5.js",
            "line": 88286,
            "description": "The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\nto fill in shapes in WEBGL mode. Users can create their\nown shaders by loading vertex and fragment shaders with\n<a href=\"#/p5/loadShader\">loadShader()</a>.",
            "itemtype": "method",
            "name": "shader",
            "chainable": 1,
            "params": [
                {
                    "name": "s",
                    "description": "the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\nshapes.",
                    "type": "p5.Shader",
                    "optional": true
                }
            ],
            "example": [
                "\n<div modernizr='webgl'>\n<code>\n// Click within the image to toggle\n// the shader used by the quad shape\n// Note: for an alternative approach to the same example,\n// involving changing uniforms please refer to:\n// https://p5js.org/reference/#/p5.Shader/setUniform\n\nlet redGreen;\nlet orangeBlue;\nlet showRedGreen = false;\n\nfunction preload() {\n  // note that we are using two instances\n  // of the same vertex and fragment shaders\n  redGreen = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n  orangeBlue = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  // initialize the colors for redGreen shader\n  shader(redGreen);\n  redGreen.setUniform('colorCenter', [1.0, 0.0, 0.0]);\n  redGreen.setUniform('colorBackground', [0.0, 1.0, 0.0]);\n\n  // initialize the colors for orangeBlue shader\n  shader(orangeBlue);\n  orangeBlue.setUniform('colorCenter', [1.0, 0.5, 0.0]);\n  orangeBlue.setUniform('colorBackground', [0.226, 0.0, 0.615]);\n\n  noStroke();\n}\n\nfunction draw() {\n  // update the offset values for each shader,\n  // moving orangeBlue in vertical and redGreen\n  // in horizontal direction\n  orangeBlue.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n  redGreen.setUniform('offset', [sin(millis() / 2000), 1]);\n\n  if (showRedGreen === true) {\n    shader(redGreen);\n  } else {\n    shader(orangeBlue);\n  }\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n\nfunction mouseClicked() {\n  showRedGreen = !showRedGreen;\n}\n</code>\n</div>"
            ],
            "alt": "canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88377,
            "description": "This function restores the default shaders in WEBGL mode. Code that runs\nafter resetShader() will not be affected by previously defined\nshaders. Should be run after <a href=\"#/p5/shader\">shader()</a>.",
            "itemtype": "method",
            "name": "resetShader",
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88390,
            "description": "Normal material for geometry is a material that is not affected by light.\nIt is not reflective and is a placeholder material often used for debugging.\nSurfaces facing the X-axis, become red, those facing the Y-axis, become green and those facing the Z-axis, become blue.\nYou can view all possible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "normalMaterial",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  normalMaterial();\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "Red, green and blue gradient.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88435,
            "description": "Texture for geometry.  You can view other possible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "texture",
            "params": [
                {
                    "name": "tex",
                    "description": "2-dimensional graphics\n                   to render as texture",
                    "type": "p5.Image|p5.MediaElement|p5.Graphics"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  rotateZ(frameCount * 0.01);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  //pass image as texture\n  texture(img);\n  box(200, 200, 200);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet pg;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  pg = createGraphics(200, 200);\n  pg.textSize(75);\n}\n\nfunction draw() {\n  background(0);\n  pg.background(255);\n  pg.text('hello!', 0, 100);\n  //pass image as texture\n  texture(pg);\n  rotateX(0.5);\n  noStroke();\n  plane(50);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet vid;\nfunction preload() {\n  vid = createVideo('assets/fingers.mov');\n  vid.hide();\n}\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  //pass video frame as texture\n  texture(vid);\n  rect(-40, -40, 80, 80);\n}\n\nfunction mousePressed() {\n  vid.loop();\n}\n</code>\n</div>"
            ],
            "alt": "Rotating view of many images umbrella and grid roof on a 3d plane\nblack canvas\nblack canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88535,
            "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.\nThis function only works in WEBGL mode.\n\nWith IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).",
            "itemtype": "method",
            "name": "textureMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either IMAGE or NORMAL",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\n\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  texture(img);\n  textureMode(NORMAL);\n  beginShape();\n  vertex(-50, -50, 0, 0);\n  vertex(50, -50, 1, 0);\n  vertex(50, 50, 1, 1);\n  vertex(-50, 50, 0, 1);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "the underside of a white umbrella and gridded ceiling above",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88616,
            "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 - 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.\n\nCLAMP causes the pixels at the edge of the texture to extend to the bounds\nREPEAT causes the texture to tile repeatedly until reaching the bounds\nMIRROR works similarly to REPEAT but it flips the texture with every new tile\n\nREPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).\n\nThis method will affect all textures in your sketch until a subsequent\ntextureWrap call is made.\n\nIf only one argument is provided, it will be applied to both the\nhorizontal and vertical axes.",
            "itemtype": "method",
            "name": "textureWrap",
            "params": [
                {
                    "name": "wrapX",
                    "description": "either CLAMP, REPEAT, or MIRROR",
                    "type": "Constant"
                },
                {
                    "name": "wrapY",
                    "description": "either CLAMP, REPEAT, or MIRROR",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet img;\nfunction preload() {\n  img = loadImage('assets/rockies128.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  textureWrap(MIRROR);\n}\n\nfunction draw() {\n  background(0);\n\n  let dX = mouseX;\n  let dY = mouseY;\n\n  let u = lerp(1.0, 2.0, dX);\n  let v = lerp(1.0, 2.0, dY);\n\n  scale(width / 2);\n\n  texture(img);\n\n  beginShape(TRIANGLES);\n  vertex(-1, -1, 0, 0, 0);\n  vertex(1, -1, 0, u, 0);\n  vertex(1, 1, 0, u, v);\n\n  vertex(1, 1, 0, u, v);\n  vertex(-1, 1, 0, 0, v);\n  vertex(-1, -1, 0, 0, 0);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "an image of the rocky mountains repeated in mirrored tiles",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88690,
            "description": "Ambient material for geometry with a given color. Ambient material defines the color the object reflects under any lighting.\nFor example, if the ambient material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\nHere's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.",
            "itemtype": "method",
            "name": "ambientMaterial",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                        (depending on the current color mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  noStroke();\n  ambientLight(200);\n  ambientMaterial(70, 130, 230);\n  sphere(40);\n}\n</code>\n</div>\n<div>\n<code>\n// ambientLight is both red and blue (magenta),\n// so object only reflects it's red and blue components\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(70);\n  ambientLight(100); // white light\n  ambientMaterial(255, 0, 255); // pink material\n  box(30);\n}\n</code>\n</div>\n<div>\n<code>\n// ambientLight is green. Since object does not contain\n// green, it does not reflect any light\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(70);\n  ambientLight(0, 255, 0); // green light\n  ambientMaterial(255, 0, 255); // pink material\n  box(30);\n}\n</code>\n</div>"
            ],
            "alt": "radiating light source from top right of canvas\nbox reflecting only red and blue light\nbox reflecting no light",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88750,
            "itemtype": "method",
            "name": "ambientMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "color, color Array, or CSS color string",
                    "type": "Number[]|String|p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88770,
            "description": "Sets the emissive color of the material used for geometry drawn to\nthe screen. This is a misnomer in the sense that the material does not\nactually emit light that effects surrounding polygons. Instead,\nit gives the appearance that the object is glowing. An emissive material\nwill display at full strength even if there is no light for it to reflect.",
            "itemtype": "method",
            "name": "emissiveMaterial",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                        (depending on the current color mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  noStroke();\n  ambientLight(0);\n  emissiveMaterial(130, 230, 0);\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "radiating light source from top right of canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88802,
            "itemtype": "method",
            "name": "emissiveMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "color, color Array, or CSS color string",
                    "type": "Number[]|String|p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88822,
            "description": "Specular material for geometry with a given color. Specular material is a shiny reflective material.\nLike ambient material it also defines the color the object reflects under ambient lighting.\nFor example, if the specular material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\nFor all other types of light like point and directional light, a specular material will reflect the color of the light source to the viewer.\nHere's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.",
            "itemtype": "method",
            "name": "specularMaterial",
            "params": [
                {
                    "name": "gray",
                    "description": "number specifying value between white and black.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "alpha value relative to current color range\n                                (default is 0-255)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88836,
            "itemtype": "method",
            "name": "specularMaterial",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  ambientLight(50);\n  pointLight(250, 250, 250, 100, 100, 30);\n  specularMaterial(250);\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "alt": "diffused radiating light source from top right of canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88866,
            "itemtype": "method",
            "name": "specularMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, or CSS color string",
                    "type": "Number[]|String|p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88886,
            "description": "Sets the amount of gloss in the surface of shapes.\nUsed in combination with specularMaterial() in setting\nthe material properties of shapes. The default and minimum value is 1.",
            "itemtype": "method",
            "name": "shininess",
            "params": [
                {
                    "name": "shine",
                    "description": "Degree of Shininess.\n                      Defaults to 1.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  noStroke();\n  let locX = mouseX - width / 2;\n  let locY = mouseY - height / 2;\n  ambientLight(60, 60, 60);\n  pointLight(255, 255, 255, locX, locY, 50);\n  specularMaterial(250);\n  translate(-25, 0, 0);\n  shininess(1);\n  sphere(20);\n  translate(50, 0, 0);\n  shininess(20);\n  sphere(20);\n}\n</code>\n</div>"
            ],
            "alt": "Shininess on Camera changes position with mouse",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88931,
            "access": "private",
            "tagname": "blends colors according to color components.\nIf alpha value is less than 1, or non-standard blendMode\nwe need to enable blending on our gl context.",
            "params": [
                {
                    "name": "color",
                    "description": "[description]",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "Normalized numbers array",
                "type": "Number[]]"
            },
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 88961,
            "access": "private",
            "tagname": "sets blending in gl context to curBlendMode",
            "params": [
                {
                    "name": "color",
                    "description": "[description]",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "Normalized numbers array",
                "type": "Number[]]"
            },
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89060,
            "description": "Sets the camera position for a 3D sketch. Parameters for this function define\nthe position for the camera, the center of the sketch (where the camera is\npointing), and an up direction (the orientation of the camera).\n\nThis function simulates the movements of the camera, allowing objects to be\nviewed from various angles. Remember, it does not move the objects themselves\nbut the camera instead. For example when centerX value is positive, the camera\nis rotating to the right side of the sketch, so the object would seem like\nmoving to the left.\n\nSee this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a>\nto view the position of your camera.\n\nWhen called with no arguments, this function creates a default camera\nequivalent to\ncamera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);",
            "itemtype": "method",
            "name": "perspective",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "camera position value on x axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "camera position value on y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "camera position value on z axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerX",
                    "description": "x coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerY",
                    "description": "y coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerZ",
                    "description": "z coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upX",
                    "description": "x component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upY",
                    "description": "y component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upZ",
                    "description": "z component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "fovy",
                    "description": "camera frustum vertical field of view,\n                          from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "aspect",
                    "description": "camera frustum aspect ratio",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "near",
                    "description": "frustum near plane length",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "far",
                    "description": "frustum far plane length",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(204);\n  //move the camera away from the plane by a sin wave\n  camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\n  plane(10, 10);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n//move slider to see changes!\n//sliders control the first 6 parameters of camera()\nlet sliderGroup = [];\nlet X;\nlet Y;\nlet Z;\nlet centerX;\nlet centerY;\nlet centerZ;\nlet h = 20;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  //create sliders\n  for (var i = 0; i < 6; i++) {\n    if (i === 2) {\n      sliderGroup[i] = createSlider(10, 400, 200);\n    } else {\n      sliderGroup[i] = createSlider(-400, 400, 0);\n    }\n    h = map(i, 0, 6, 5, 85);\n    sliderGroup[i].position(10, height + h);\n    sliderGroup[i].style('width', '80px');\n  }\n}\n\nfunction draw() {\n  background(60);\n  // assigning sliders' value to each parameters\n  X = sliderGroup[0].value();\n  Y = sliderGroup[1].value();\n  Z = sliderGroup[2].value();\n  centerX = sliderGroup[3].value();\n  centerY = sliderGroup[4].value();\n  centerZ = sliderGroup[5].value();\n  camera(X, Y, Z, centerX, centerY, centerZ, 0, 1, 0);\n  stroke(255);\n  fill(255, 102, 94);\n  box(85);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n//drag the mouse to look around!\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  perspective(PI / 3.0, width / height, 0.1, 500);\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  normalMaterial();\n\n  rotateX(-0.3);\n  rotateY(-0.2);\n  translate(0, 0, -50);\n\n  push();\n  translate(-15, 0, sin(frameCount / 30) * 95);\n  box(30);\n  pop();\n  push();\n  translate(15, 0, sin(frameCount / 30 + PI) * 95);\n  box(30);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "two colored 3D boxes move back and forth, rotating as mouse is dragged.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89243,
            "description": "Sets an orthographic projection for the camera in a 3D sketch and defines a\nbox-shaped viewing frustum within which objects are seen. In this projection,\nall objects with the same dimension appear the same size, regardless of\nwhether they are near or far from the camera. The parameters to this\nfunction specify the viewing frustum where left and right are the minimum and\nmaximum x values, top and bottom are the minimum and maximum y values, and near\nand far are the minimum and maximum z values. If no parameters are given, the\ndefault is used: ortho(-width/2, width/2, -height/2, height/2).",
            "itemtype": "method",
            "name": "ortho",
            "params": [
                {
                    "name": "left",
                    "description": "camera frustum left plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "camera frustum right plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "camera frustum bottom plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "top",
                    "description": "camera frustum top plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "near",
                    "description": "camera frustum near plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "far",
                    "description": "camera frustum far plane",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//drag the mouse to look around!\n//there's no vanishing point\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  normalMaterial();\n\n  rotateX(0.2);\n  rotateY(-0.2);\n  push();\n  translate(-15, 0, sin(frameCount / 30) * 65);\n  box(30);\n  pop();\n  push();\n  translate(15, 0, sin(frameCount / 30 + PI) * 65);\n  box(30);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "two 3D boxes move back and forth along same plane, rotating as mouse is dragged.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89310,
            "description": "Sets a perspective matrix as defined by the parameters.\n\nA frustum is a geometric form: a pyramid with its top\ncut off. With the viewer's eye at the imaginary top of\nthe pyramid, the six planes of the frustum act as clipping\nplanes when rendering a 3D view. Thus, any form inside the\nclipping planes is visible; anything outside\nthose planes is not visible.\n\nSetting the frustum changes the perspective of the scene being rendered.\nThis can be achieved more simply in many cases by using\n<a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.",
            "itemtype": "method",
            "name": "frustum",
            "params": [
                {
                    "name": "left",
                    "description": "camera frustum left plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "camera frustum right plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "camera frustum bottom plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "top",
                    "description": "camera frustum top plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "near",
                    "description": "camera frustum near plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "far",
                    "description": "camera frustum far plane",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n  frustum(-0.1, 0.1, -0.1, 0.1, 0.1, 200);\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  strokeWeight(10);\n  stroke(0, 0, 255);\n  noFill();\n\n  rotateY(-0.2);\n  rotateX(-0.3);\n  push();\n  translate(-15, 0, sin(frameCount / 30) * 25);\n  box(30);\n  pop();\n  push();\n  translate(15, 0, sin(frameCount / 30 + PI) * 25);\n  box(30);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "two 3D boxes move back and forth along same plane, rotating as mouse is dragged.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89387,
            "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\nrenderer to use that camera.\nReturns the p5.Camera object.",
            "itemtype": "method",
            "name": "createCamera",
            "return": {
                "description": "The newly created camera object.",
                "type": "p5.Camera"
            },
            "example": [
                "\n<div><code>\n// Creates a camera object and animates it around a box.\nlet camera;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(0);\n  camera = createCamera();\n  setCamera(camera);\n}\n\nfunction draw() {\n  camera.lookAt(0, 0, 0);\n  camera.setPosition(sin(frameCount / 60) * 200, 0, 100);\n  box(20);\n}\n</code></div>"
            ],
            "alt": "An example that creates a camera and moves it around the box.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89516,
            "description": "camera position value on x axis",
            "itemtype": "property",
            "name": "eyeX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(0);\n  cam = createCamera();\n  div = createDiv();\n  div.position(0, 0);\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n  div.html('eyeX = ' + cam.eyeX);\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89544,
            "description": "camera position value on y axis",
            "itemtype": "property",
            "name": "eyeY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(0);\n  cam = createCamera();\n  div = createDiv();\n  div.position(0, 0);\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n  div.html('eyeY = ' + cam.eyeY);\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89571,
            "description": "camera position value on z axis",
            "itemtype": "property",
            "name": "eyeZ",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(0);\n  cam = createCamera();\n  div = createDiv();\n  div.position(0, 0);\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n  div.html('eyeZ = ' + cam.eyeZ);\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89598,
            "description": "x coordinate representing center of the sketch",
            "itemtype": "property",
            "name": "centerX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  cam.lookAt(1, 0, 0);\n  div = createDiv('centerX = ' + cam.centerX);\n  div.position(0, 0);\n  div.style('color', 'white');\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89626,
            "description": "y coordinate representing center of the sketch",
            "itemtype": "property",
            "name": "centerY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  cam.lookAt(0, 1, 0);\n  div = createDiv('centerY = ' + cam.centerY);\n  div.position(0, 0);\n  div.style('color', 'white');\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n}"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89653,
            "description": "z coordinate representing center of the sketch",
            "itemtype": "property",
            "name": "centerZ",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  cam.lookAt(0, 0, 1);\n  div = createDiv('centerZ = ' + cam.centerZ);\n  div.position(0, 0);\n  div.style('color', 'white');\n}\n\nfunction draw() {\n  orbitControl();\n  box(10);\n}"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89680,
            "description": "x component of direction 'up' from camera",
            "itemtype": "property",
            "name": "upX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  div = createDiv('upX = ' + cam.upX);\n  div.position(0, 0);\n  div.style('color', 'blue');\n  div.style('font-size', '18px');\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89703,
            "description": "y component of direction 'up' from camera",
            "itemtype": "property",
            "name": "upY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  div = createDiv('upY = ' + cam.upY);\n  div.position(0, 0);\n  div.style('color', 'blue');\n  div.style('font-size', '18px');\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89726,
            "description": "z component of direction 'up' from camera",
            "itemtype": "property",
            "name": "upZ",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class='norender'><code>\nlet cam, div;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  background(255);\n  cam = createCamera();\n  div = createDiv('upZ = ' + cam.upZ);\n  div.position(0, 0);\n  div.style('color', 'blue');\n  div.style('font-size', '18px');\n}\n</code></div>"
            ],
            "alt": "An example showing the use of camera object properties",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89753,
            "description": "Sets a perspective projection for a p5.Camera object and sets parameters\nfor that projection according to <a href=\"#/p5/perspective\">perspective()</a>\nsyntax.",
            "itemtype": "method",
            "name": "perspective",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89833,
            "description": "Sets an orthographic projection for a p5.Camera object and sets parameters\nfor that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax.",
            "itemtype": "method",
            "name": "ortho",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89899,
            "itemtype": "method",
            "name": "frustum",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 89967,
            "description": "Rotate camera view about arbitrary axis defined by x,y,z\nbased on http://learnwebgl.brown37.net/07_cameras/camera_rotating_motion.html",
            "itemtype": "method",
            "name": "_rotateView",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90010,
            "description": "Panning rotates the camera view to the left and right.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "angle",
                    "description": "amount to rotate camera in current\n<a href=\"#/p5/angleMode\">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet cam;\nlet delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial pan angle\n  cam.pan(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.pan(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view pans left and right across a series of rotating 3D boxes.",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90068,
            "description": "Tilting rotates the camera view up and down.",
            "itemtype": "method",
            "name": "tilt",
            "params": [
                {
                    "name": "angle",
                    "description": "amount to rotate camera in current\n<a href=\"#/p5/angleMode\">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet cam;\nlet delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial tilt\n  cam.tilt(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.tilt(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateY(frameCount * 0.01);\n  translate(0, -100, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view tilts up and down across a series of rotating 3D boxes.",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90126,
            "description": "Reorients the camera to look at a position in world space.",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "x",
                    "description": "x position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z position of a point in world space",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet cam;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // look at a new random point every 60 frames\n  if (frameCount % 60 === 0) {\n    cam.lookAt(random(-100, 100), random(-50, 50), 0);\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view of rotating 3D cubes changes to look at a new random\npoint every second .",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90193,
            "description": "Sets a camera's position and orientation.  This is equivalent to calling\n<a href=\"#/p5/camera\">camera()</a> on a p5.Camera object.",
            "itemtype": "method",
            "name": "camera",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90278,
            "description": "Move camera along its local axes while maintaining current camera orientation.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "amount to move along camera's left-right axis",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "amount to move along camera's up-down axis",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "amount to move along camera's forward-backward axis",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\n// see the camera move along its own axes while maintaining its orientation\nlet cam;\nlet delta = 0.5;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // move the camera along its local axes\n  cam.move(delta, delta, 0);\n\n  // every 100 frames, switch direction\n  if (frameCount % 150 === 0) {\n    delta *= -1;\n  }\n\n  translate(-10, -10, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n}\n</code>\n</div>"
            ],
            "alt": "camera view moves along a series of 3D boxes, maintaining the same\norientation throughout the move",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90350,
            "description": "Set camera position in world-space while maintaining current camera\norientation.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "x position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z position of a point in world space",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\n// press '1' '2' or '3' keys to set camera position\n\nlet cam;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // '1' key\n  if (keyIsDown(49)) {\n    cam.setPosition(30, 0, 80);\n  }\n  // '2' key\n  if (keyIsDown(50)) {\n    cam.setPosition(0, 0, 80);\n  }\n  // '3' key\n  if (keyIsDown(51)) {\n    cam.setPosition(-30, 0, 80);\n  }\n\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera position changes as the user presses keys, altering view of a 3D box",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90468,
            "description": "Returns a copy of a camera.",
            "itemtype": "method",
            "name": "copy",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90494,
            "description": "Returns a camera's local axes: left-right, up-down, and forward-backward,\nas defined by vectors in world-space.",
            "itemtype": "method",
            "name": "_getLocalAxes",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90552,
            "description": "Orbits the camera about center point. For use with orbitControl().",
            "itemtype": "method",
            "name": "_orbit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dTheta",
                    "description": "change in spherical coordinate theta",
                    "type": "Number"
                },
                {
                    "name": "dPhi",
                    "description": "change in spherical coordinate phi",
                    "type": "Number"
                },
                {
                    "name": "dRadius",
                    "description": "change in radius",
                    "type": "Number"
                }
            ],
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90606,
            "description": "Returns true if camera is currently attached to renderer.",
            "itemtype": "method",
            "name": "_isActive",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90615,
            "description": "Sets rendererGL's current camera to a p5.Camera object.  Allows switching\nbetween multiple cameras.",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "cam",
                    "description": "p5.Camera object",
                    "type": "p5.Camera"
                }
            ],
            "example": [
                "\n<div>\n<code>\nlet cam1, cam2;\nlet currentCamera;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n\n  cam1 = createCamera();\n  cam2 = createCamera();\n  cam2.setPosition(30, 0, 50);\n  cam2.lookAt(0, 0, 0);\n  cam2.ortho();\n\n  // set variable for previously active camera:\n  currentCamera = 1;\n}\n\nfunction draw() {\n  background(200);\n\n  // camera 1:\n  cam1.lookAt(0, 0, 0);\n  cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\n\n  // every 100 frames, switch between the two cameras\n  if (frameCount % 100 === 0) {\n    if (currentCamera === 1) {\n      setCamera(cam1);\n      currentCamera = 0;\n    } else {\n      setCamera(cam2);\n      currentCamera = 1;\n    }\n  }\n\n  drawBoxes();\n}\n\nfunction drawBoxes() {\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "Canvas switches between two camera views, each showing a series of spinning\n3D boxes.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90829,
            "description": "computes smooth normals per vertex as an average of each\nface.",
            "itemtype": "method",
            "name": "computeNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90868,
            "description": "Averages the vertex normals. Used in curved\nsurfaces",
            "itemtype": "method",
            "name": "averageNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90889,
            "description": "Averages pole normals.  Used in spherical primitives",
            "itemtype": "method",
            "name": "averagePoleNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90927,
            "description": "Create a 2D array for establishing stroke connections",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90948,
            "description": "Create 4 vertices for each stroke line, two at the beginning position\nand two at the end position. These vertices are displaced relative to\nthat line's normal on the GPU",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 90982,
            "description": "Modifies all vertices to be centered within the range -100 to 100.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91080,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a p5.Matrix, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "inMatrix",
                    "description": "the input p5.Matrix or\n                                    an Array of length 16",
                    "type": "p5.Matrix|Float32Array|Number[]",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91089,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elements",
                    "description": "16 numbers passed by value to avoid\n                                    array copying.",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91123,
            "description": "Gets a copy of the vector, returns a p5.Matrix object.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "the copy of the p5.Matrix object",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91133,
            "description": "return a copy of a matrix",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "the result matrix",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91159,
            "description": "return an identity matrix",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "the result matrix",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91168,
            "description": "transpose according to a given matrix",
            "itemtype": "method",
            "name": "transpose",
            "params": [
                {
                    "name": "a",
                    "description": "the matrix to be\n                                              based on to transpose",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91229,
            "description": "invert  matrix according to a give matrix",
            "itemtype": "method",
            "name": "invert",
            "params": [
                {
                    "name": "a",
                    "description": "the matrix to be\n                                               based on to invert",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91315,
            "description": "Inverts a 3x3 matrix",
            "itemtype": "method",
            "name": "invert3x3",
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91352,
            "description": "transposes a 3x3 p5.Matrix by a mat3",
            "itemtype": "method",
            "name": "transpose3x3",
            "params": [
                {
                    "name": "mat3",
                    "description": "1-dimensional array",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91371,
            "description": "converts a 4x4 matrix to its 3x3 inverse transform\ncommonly used in MVMatrix to NMatrix conversions.",
            "itemtype": "method",
            "name": "invertTranspose",
            "params": [
                {
                    "name": "mat4",
                    "description": "the matrix to be based on to invert",
                    "type": "p5.Matrix"
                }
            ],
            "chainable": 1,
            "todo": [
                "finish implementation"
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91408,
            "description": "inspired by Toji's mat4 determinant",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "Determinant of our 4x4 matrix",
                "type": "Number"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91431,
            "description": "multiply two mat4s",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "multMatrix",
                    "description": "The matrix\n                                               we want to multiply by",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91550,
            "description": "scales a p5.Matrix by scalars or a vector",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "vector to scale by",
                    "type": "p5.Vector|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91585,
            "description": "rotate our Matrix around an axis by the given angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "a",
                    "description": "The angle of rotation in radians",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "the axis(es) to rotate around",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": "inspired by Toji's gl-matrix lib, mat4 rotation",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91656,
            "todo": [
                "finish implementing this method!\ntranslates"
            ],
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "v",
                    "description": "vector to translate by",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91683,
            "description": "sets the perspective matrix",
            "itemtype": "method",
            "name": "perspective",
            "params": [
                {
                    "name": "fovy",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "near clipping plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "far clipping plane",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91716,
            "description": "sets the ortho matrix",
            "itemtype": "method",
            "name": "ortho",
            "params": [
                {
                    "name": "left",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "near clipping plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "far clipping plane",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91758,
            "description": "PRIVATE",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91827,
            "description": "Enables and binds the buffers used by shader when the appropriate data exists in geometry.\nMust always be done prior to drawing geometry in WebGL.",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry that is going to be drawn",
                    "type": "p5.Geometry"
                },
                {
                    "name": "shader",
                    "description": "Active shader",
                    "type": "p5.Shader"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 91952,
            "description": "Welcome to RendererGL Immediate Mode.\nImmediate mode is used for drawing custom shapes\nfrom a set of vertices.  Immediate Mode is activated\nwhen you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\nImmediate mode is a style of programming borrowed\nfrom OpenGL's (now-deprecated) immediate mode.\nIt differs from p5.js' default, Retained Mode, which caches\ngeometries and buffers on the CPU to reduce the number of webgl\ndraw calls. Retained mode is more efficient & performative,\nhowever, Immediate Mode is useful for sketching quick\ngeometric ideas.\n/ /**\nBegin shape drawing.  This is a helpful way of generating\ncustom shapes quickly.  However in WEBGL mode, application\nperformance will likely drop as a result of too many calls to\n<a href=\"#/p5/beginShape\">beginShape()</a> / <a href=\"#/p5/endShape\">endShape()</a>.  As a high performance alternative,\nplease use p5.js geometry primitives.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "mode",
                    "description": "webgl primitives mode.  beginShape supports the\n                      following modes:\n                      POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n                      TRIANGLE_STRIP, TRIANGLE_FAN and TESS(WEBGL only)",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of vertex",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "todo": [
                "implement handling of <a href=\"#/p5.Vector\">p5.Vector</a> args\n/ _main.default.RendererGL.prototype.vertex = function(x",
                "y) {\n           var z",
                "u",
                "v;\n\n           // default to (x",
                "y) mode: all other arugments assumed to be 0.\n           z = u = v = 0;\n\n           if (arguments.length === 3) {\n             // (x",
                "y",
                "z) mode: (u",
                "v) assumed to be 0.\n             z = arguments[2];\n           } else if (arguments.length === 4) {\n             // (x",
                "y",
                "u",
                "v) mode: z assumed to be 0.\n             u = arguments[2];\n             v = arguments[3];\n           } else if (arguments.length === 5) {\n             // (x",
                "y",
                "z",
                "u",
                "v) mode\n             z = arguments[2];\n             u = arguments[3];\n             v = arguments[4];\n           }\n           var vert = new _main.default.Vector(x",
                "y",
                "z);\n           this.immediateMode.geometry.vertices.push(vert);\n           var vertexColor = this.curFillColor || [0.5",
                "0.5",
                "0.5",
                "1.0];\n           this.immediateMode.geometry.vertexColors.push(\n             vertexColor[0]",
                "vertexColor[1]",
                "vertexColor[2]",
                "vertexColor[3]\n           );\n\n           if (this.textureMode === constants.IMAGE) {\n             if (this._tex !== null) {\n               if (this._tex.width > 0 && this._tex.height > 0) {\n                 u /= this._tex.width;\n                 v /= this._tex.height;\n               }\n             } else if (this._tex === null && arguments.length >= 4) {\n               // Only throw this warning if custom uv's have  been provided\n               console.warn(\n                 'You must first call texture() before using' +\n                   ' vertex() with image based u and v coordinates'\n               );\n             }\n           }\n\n           this.immediateMode.geometry.uvs.push(u",
                "v);\n\n           this.immediateMode._bezierVertex[0] = x;\n           this.immediateMode._bezierVertex[1] = y;\n           this.immediateMode._bezierVertex[2] = z;\n\n           this.immediateMode._quadraticVertex[0] = x;\n           this.immediateMode._quadraticVertex[1] = y;\n           this.immediateMode._quadraticVertex[2] = z;\n\n           return this;\n         };\n\n         /**\nEnd shape drawing and render vertices to screen."
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92090,
            "description": "Called from endShape(). This function calculates the stroke vertices for custom shapes and\ntesselates shapes when applicable.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mode",
                    "description": "webgl primitives mode.  beginShape supports the\n                      following modes:\n                      POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n                      TRIANGLE_STRIP, TRIANGLE_FAN and TESS(WEBGL only)",
                    "type": "Number"
                }
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92125,
            "description": "Called from _processVertices(). This function calculates the stroke vertices for custom shapes and\ntesselates shapes when applicable.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "indices for custom shape vertices indicating edges.",
                "type": "Array[Number]"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92171,
            "description": "Called from _processVertices() when applicable. This function tesselates immediateMode.geometry.",
            "access": "private",
            "tagname": "",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92192,
            "description": "Called from endShape(). Responsible for calculating normals, setting shader uniforms,\nenabling all appropriate buffers, applying color blend, and drawing the fill geometry.",
            "access": "private",
            "tagname": "",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92249,
            "description": "Called from endShape(). Responsible for calculating normals, setting shader uniforms,\nenabling all appropriate buffers, applying color blend, and drawing the stroke geometry.",
            "access": "private",
            "tagname": "",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92291,
            "description": "Called from _drawImmediateFill(). Currently adds default normals which\nonly work for flat shapes.",
            "parem": "",
            "access": "private",
            "tagname": "",
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92321,
            "description": "initializes buffer defaults. runs each time a new geometry is\nregistered",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "key of the geometry object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a new buffer object",
                "type": "Object"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92395,
            "description": "creates a buffers object that holds the WebGL render buffers\nfor a geometry.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "key of the geometry object",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "contains geometry data",
                    "type": "p5.Geometry"
                }
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92433,
            "description": "Draws buffers given a geometry key ID",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "ID in our geom hash",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92519,
            "description": "Calls drawBuffers() with a scaled model/view matrix.\n\nThis is used by various 3d primitive methods (in primitives.js, eg. plane,\nbox, torus, etc...) to allow caching of un-scaled geometries. Those\ngeometries are generally created with unit-length dimensions, cached as\nsuch, and then scaled appropriately in this method prior to rendering.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "drawBuffersScaled",
            "params": [
                {
                    "name": "gId",
                    "description": "ID in our geom hash",
                    "type": "String"
                },
                {
                    "name": "scaleX",
                    "description": "the amount to scale in the X direction",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "the amount to scale in the Y direction",
                    "type": "Number"
                },
                {
                    "name": "scaleZ",
                    "description": "the amount to scale in the Z direction",
                    "type": "Number"
                }
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 92807,
            "description": "model view, projection, & normal\nmatrices",
            "class": "p5.RendererGL",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 93024,
            "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.\n\nNote that this will reinitialize the drawing context\nif called after the WebGL canvas is made.\n\nIf an object is passed as the parameter, all attributes\nnot declared in the object will be set to defaults.\n\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is true\n\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false (true in Safari)\n\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader otherwise per-vertex lighting is used.\ndefault is true.",
            "itemtype": "method",
            "name": "setAttributes",
            "params": [
                {
                    "name": "key",
                    "description": "Name of attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "New value of named attribute",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  rotateZ(frameCount * 0.02);\n  rotateX(frameCount * 0.02);\n  rotateY(frameCount * 0.02);\n  fill(0, 0, 0);\n  box(50);\n  pop();\n}\n</code>\n</div>\n<br>\nNow with the antialias attribute set to true.\n<br>\n<div>\n<code>\nfunction setup() {\n  setAttributes('antialias', true);\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  rotateZ(frameCount * 0.02);\n  rotateX(frameCount * 0.02);\n  rotateY(frameCount * 0.02);\n  fill(0, 0, 0);\n  box(50);\n  pop();\n}\n</code>\n</div>\n\n<div>\n<code>\n// press the mouse button to disable perPixelLighting\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noStroke();\n  fill(255);\n}\n\nlet lights = [\n  { c: '#f00', t: 1.12, p: 1.91, r: 0.2 },\n  { c: '#0f0', t: 1.21, p: 1.31, r: 0.2 },\n  { c: '#00f', t: 1.37, p: 1.57, r: 0.2 },\n  { c: '#ff0', t: 1.12, p: 1.91, r: 0.7 },\n  { c: '#0ff', t: 1.21, p: 1.31, r: 0.7 },\n  { c: '#f0f', t: 1.37, p: 1.57, r: 0.7 }\n];\n\nfunction draw() {\n  let t = millis() / 1000 + 1000;\n  background(0);\n  directionalLight(color('#222'), 1, 1, 1);\n\n  for (let i = 0; i < lights.length; i++) {\n    let light = lights[i];\n    pointLight(\n      color(light.c),\n      p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\n    );\n  }\n\n  specularMaterial(255);\n  sphere(width * 0.1);\n\n  rotateX(t * 0.77);\n  rotateY(t * 0.83);\n  rotateZ(t * 0.91);\n  torus(width * 0.3, width * 0.07, 24, 10);\n}\n\nfunction mousePressed() {\n  setAttributes('perPixelLighting', false);\n  noStroke();\n  fill(255);\n}\nfunction mouseReleased() {\n  setAttributes('perPixelLighting', true);\n  noStroke();\n  fill(255);\n}\n</code>\n</div>"
            ],
            "alt": "a rotating cube with smoother edges",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93163,
            "itemtype": "method",
            "name": "setAttributes",
            "params": [
                {
                    "name": "obj",
                    "description": "object with key-value pairs",
                    "type": "Object"
                }
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93278,
            "description": "[background description]",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93337,
            "description": "Basic stroke material for geometry with a given color",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value,\nred or hue value (depending on the current color mode),\nor color Array, or CSS color string",
                    "type": "Number|Number[]|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 200, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  stroke(240, 150, 150);\n  fill(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(75, 75, 75);\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with purple cube with pink outline spinning",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93442,
            "description": "Change weight of stroke",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "stroke",
                    "description": "weight to be used for drawing",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 400, WEBGL);\n  setAttributes('antialias', true);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  translate(0, -100, 0);\n  stroke(240, 150, 150);\n  fill(100, 100, 240);\n  push();\n  strokeWeight(8);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  sphere(75);\n  pop();\n  push();\n  translate(0, 200, 0);\n  strokeWeight(1);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  sphere(75);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with two purple rotating spheres with pink\noutlines the sphere on top has much heavier outlines,",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93507,
            "description": "Loads the pixels data for this canvas into the pixels[] attribute.\nNote that updatePixels() and set() do not work.\nAny pixel manipulation must be done directly to the pixels[] array.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93553,
            "description": "[resize description]",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "[description]",
                    "type": "Number"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93577,
            "description": "clears color and depth buffers\nwith r,g,b,a",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "r",
                    "description": "normalized red val.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "normalized green val.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "normalized blue val.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "normalized alpha val.",
                    "type": "Number"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93608,
            "description": "[translate description]",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "[description]",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "todo": [
                "implement handle for components or vector as args"
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 93627,
            "description": "Scales the Model View Matrix by a vector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "[description]",
                    "type": "Number | p5.Vector | Array"
                },
                {
                    "name": "y",
                    "description": "y-axis scalar",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-axis scalar",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 94067,
            "description": "turn a two dimensional array into one dimensional array",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "arr",
                    "description": "2-dimensional array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "1-dimensional array\n[[1, 2, 3],[4, 5, 6]] -> [1, 2, 3, 4, 5, 6]",
                "type": "Array"
            },
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 94105,
            "description": "turn a p5.Vector Array into a one dimensional number array",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "arr",
                    "description": "an array of p5.Vector",
                    "type": "p5.Vector[]"
                }
            ],
            "return": {
                "description": "a one dimensional array of numbers\n[p5.Vector(1, 2, 3), p5.Vector(4, 5, 6)] ->\n[1, 2, 3, 4, 5, 6]",
                "type": "Number[]"
            },
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 94145,
            "description": "ensures that p5 is using a 3d renderer. throws an error if not.",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "p5.js",
            "line": 94384,
            "description": "Queries the active attributes for this shader and loads\ntheir names and locations into the attributes array.",
            "itemtype": "method",
            "name": "_loadAttributes",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94420,
            "description": "Queries the active uniforms for this shader and loads\ntheir names and locations into the uniforms array.",
            "itemtype": "method",
            "name": "_loadUniforms",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94477,
            "description": "initializes (if needed) and binds the shader program.",
            "itemtype": "method",
            "name": "bindShader",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94494,
            "itemtype": "method",
            "name": "unbindShader",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94604,
            "itemtype": "method",
            "name": "useProgram",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94618,
            "description": "Wrapper around gl.uniform functions.\nAs we store uniform info in the shader we can use that\nto do type checking on the supplied data and call\nthe appropriate function.",
            "itemtype": "method",
            "name": "setUniform",
            "chainable": 1,
            "params": [
                {
                    "name": "uniformName",
                    "description": "the name of the uniform in the\nshader program",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data to be associated\nwith that uniform; type varies (could be a single numerical value, array,\nmatrix, or texture / sampler reference)",
                    "type": "Object|Number|Boolean|Number[]"
                }
            ],
            "example": [
                "\n<div modernizr='webgl'>\n<code>\n// Click within the image to toggle the value of uniforms\n// Note: for an alternative approach to the same example,\n// involving toggling between shaders please refer to:\n// https://p5js.org/reference/#/p5/shader\n\nlet grad;\nlet showRedGreen = false;\n\nfunction preload() {\n  // note that we are using two instances\n  // of the same vertex and fragment shaders\n  grad = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  shader(grad);\n  noStroke();\n}\n\nfunction draw() {\n  // update the offset values for each scenario,\n  // moving the \"grad\" shader in either vertical or\n  // horizontal direction each with differing colors\n\n  if (showRedGreen === true) {\n    grad.setUniform('colorCenter', [1, 0, 0]);\n    grad.setUniform('colorBackground', [0, 1, 0]);\n    grad.setUniform('offset', [sin(millis() / 2000), 1]);\n  } else {\n    grad.setUniform('colorCenter', [1, 0.5, 0]);\n    grad.setUniform('colorBackground', [0.226, 0, 0.615]);\n    grad.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n  }\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n\nfunction mouseClicked() {\n  showRedGreen = !showRedGreen;\n}\n</code>\n</div>"
            ],
            "alt": "canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 94837,
            "itemtype": "method",
            "name": "enableAttrib",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95075,
            "description": "Checks if the source data for this texture has changed (if it's\neasy to do so) and reuploads the texture if necessary. If it's not\npossible or to expensive to do a calculation to determine wheter or\nnot the data has occurred, this method simply re-uploads the texture.",
            "itemtype": "method",
            "name": "update",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95168,
            "description": "Binds the texture to the appropriate GL target.",
            "itemtype": "method",
            "name": "bindTexture",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95181,
            "description": "Unbinds the texture from the appropriate GL target.",
            "itemtype": "method",
            "name": "unbindTexture",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95191,
            "description": "Sets how a texture is be interpolated when upscaled or downscaled.\nNearest filtering uses nearest neighbor scaling when interpolating\nLinear filtering uses WebGL's linear scaling when interpolating",
            "itemtype": "method",
            "name": "setInterpolation",
            "params": [
                {
                    "name": "downScale",
                    "description": "Specifies the texture filtering when\n                          textures are shrunk. Options are LINEAR or NEAREST",
                    "type": "String"
                },
                {
                    "name": "upScale",
                    "description": "Specifies the texture filtering when\n                        textures are magnified. Options are LINEAR or NEAREST",
                    "type": "String"
                }
            ],
            "todo": [
                "implement mipmapping filters"
            ],
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95223,
            "description": "Sets the texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 - 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR. REPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).",
            "itemtype": "method",
            "name": "setWrapMode",
            "params": [
                {
                    "name": "wrapX",
                    "description": "Controls the horizontal texture wrapping behavior",
                    "type": "String"
                },
                {
                    "name": "wrapY",
                    "description": "Controls the vertical texture wrapping behavior",
                    "type": "String"
                }
            ],
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95419,
            "itemtype": "method",
            "name": "findImage",
            "params": [
                {
                    "name": "space",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "contains the ImageData, and pixel index into that\n                  ImageData where the free space was allocated.\nfinds free space of a given size in the ImageData list",
                "type": "Object"
            },
            "class": "ImageInfos",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95481,
            "itemtype": "method",
            "name": "setPixel",
            "params": [
                {
                    "name": "imageInfo",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "r",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "a\n\nwrites",
                    "description": "the next pixel into an indexed ImageData",
                    "type": "Number"
                }
            ],
            "class": "ImageInfos",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95524,
            "itemtype": "method",
            "name": "getGlyphInfo",
            "params": [
                {
                    "name": "glyph",
                    "description": "the x positions of points in the curve",
                    "type": "Glyph"
                }
            ],
            "return": {
                "description": "the glyphInfo for that glyph\n\ncalculates rendering info for a glyph, including the curve information,\nrow & column stripes compiled into textures.",
                "type": "Object"
            },
            "class": "FontInfo",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95561,
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "xs",
                    "description": "the x positions of points in the curve",
                    "type": "Number[]"
                },
                {
                    "name": "ys",
                    "description": "the y positions of points in the curve",
                    "type": "Number[]"
                },
                {
                    "name": "v",
                    "description": "the curve information\n\nadds a curve to the rows & columns that it intersects with",
                    "type": "Object"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95573,
            "itemtype": "method",
            "name": "minMax",
            "params": [
                {
                    "name": "rg",
                    "description": "the list of values to compare",
                    "type": "Number[]"
                },
                {
                    "name": "min",
                    "description": "the initial minimum value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the initial maximum value\n\nfind the minimum & maximum value in a list of values",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95608,
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "v",
                    "description": "the value to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "the minimum value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the maxmimum value\n\nclamps a value between a minimum & maximum value",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95622,
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "v",
                    "description": "the value to scale\n\nconverts a floating-point number in the range 0-1 to a byte 0-255",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95648,
            "itemtype": "method",
            "name": "toQuadratic",
            "return": {
                "description": "the quadratic approximation\n\nconverts the cubic to a quadtratic approximation by\npicking an appropriate quadratic control point",
                "type": "Object"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95666,
            "itemtype": "method",
            "name": "quadError",
            "return": {
                "description": "the error\n\ncalculates the magnitude of error of this curve's\nquadratic approximation.",
                "type": "Number"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95685,
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "t",
                    "description": "the value (0-1) at which to split",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the second part of the curve\n\nsplits the cubic into two parts at a point 't' along the curve.\nthis cubic keeps its start point and its end point becomes the\npoint at 't'. the 'end half is returned.",
                "type": "Cubic"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95707,
            "itemtype": "method",
            "name": "splitInflections",
            "return": {
                "description": "the non-inflecting pieces of this cubic\n\nreturns an array containing 0, 1 or 2 cubics split resulting\nfrom splitting this cubic at its inflection points.\nthis cubic is (potentially) altered and returned in the list.",
                "type": "Cubic[]"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95766,
            "itemtype": "method",
            "name": "cubicToQuadratics",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cx0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cx1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an array of cubics whose quadratic approximations\n                   closely match the civen cubic.\n\nconverts a cubic curve to a list of quadratics.",
                "type": "Cubic[]"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95857,
            "itemtype": "method",
            "name": "pushLine",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1\n\nadd",
                    "description": "a straight line to the row/col grid of a glyph",
                    "type": "Number"
                }
            ],
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95872,
            "itemtype": "method",
            "name": "samePoint",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the two points are sufficiently close\n\ntests if two points are close enough to be considered the same",
                "type": "Boolean"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 95980,
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number[][]"
                },
                {
                    "name": "dimImageInfos",
                    "description": "",
                    "type": "ImageInfo[]"
                },
                {
                    "name": "cellImageInfos",
                    "description": "",
                    "type": "ImageInfo[]"
                }
            ],
            "return": {
                "description": "lays out the curves in a dimension (row or col) into two\nimages, one for the indices of the curves themselves, and\none containing the offset and length of those index spans.",
                "type": "Object"
            },
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "p5.js",
            "line": 96335,
            "description": "Here, we define a default/fallback language which we can use without internet.\nYou won't have to change this when adding a new language.\n\n`translation` is the namespace we are using for our initial set of strings\n/ var _default = {\n           en: {\n             translation: _translation.default\n           }\n         };\n\n         /**\nThis is a list of languages that we have added so far.\nIf you have just added a new language (yay!), add its key to the list below\n(`en` is english, `es` es español). Also add its export to\ndev.js, which is another file in this folder.\n/ exports.default = _default;\n         var languages = ['en', 'es'];\n         exports.languages = languages;\n       },\n       { './en/translation': 117 }\n     ]\n   },\n   {},\n   [43]\n )(43);\n});",
            "class": "Cubic",
            "module": "Lights, Camera",
            "submodule": "Material"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: exports",
            "line": " p5.js:25931"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:26100"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26138"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26138"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26151"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26151"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26183"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26183"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26194"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26194"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26219"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26219"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:26225"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:26225"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26256"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:26467"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:26472"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:26477"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26492"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26492"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26504"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:26510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26510"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26519"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:26525"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26525"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:26539"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26539"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26547"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26547"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26556"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26562"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26562"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26576"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26582"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26582"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26591"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26597"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26606"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26612"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26626"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26641"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26641"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26659"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:26665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26665"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26675"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26696"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26696"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26717"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26717"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26725"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26725"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26735"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26741"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26741"
        },
        {
            "message": "unknown tag: constant",
            "line": " p5.js:26752"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26758"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26758"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:26796"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26796"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26826"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:26842"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26842"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:26858"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26858"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:26922"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27005"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27041"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:27147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27177"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:27223"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27223"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27231"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:27255"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27255"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:27263"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27263"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:27275"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27275"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:27316"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27316"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:27345"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27345"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:27355"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27355"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:27369"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27369"
        },
        {
            "message": "param name missing: {opentype.Table}",
            "line": " p5.js:27382"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27382"
        },
        {
            "message": "param name missing: {opentype.Table}",
            "line": " p5.js:27434"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:27434"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:27483"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:27576"
        },
        {
            "message": "param name missing: {opentype.Table}",
            "line": " p5.js:27576"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:27678"
        },
        {
            "message": "param name missing: {opentype.Table}",
            "line": " p5.js:27678"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:27714"
        },
        {
            "message": "param name missing: {opentype.Table}",
            "line": " p5.js:27714"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:27714"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:29987"
        },
        {
            "message": "param name missing: {opentype.Font}",
            "line": " p5.js:29987"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:30016"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:30034"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:30056"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:30114"
        },
        {
            "message": "param name missing: {opentype.Font}",
            "line": " p5.js:30114"
        },
        {
            "message": "unknown tag: typedef",
            "line": " p5.js:30177"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:30195"
        },
        {
            "message": "param name missing: {GlyphOptions}",
            "line": " p5.js:30195"
        },
        {
            "message": "param name missing: {GlyphOptions}",
            "line": " p5.js:30207"
        },
        {
            "message": "param name missing: {number}",
            "line": " p5.js:30249"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:30563"
        },
        {
            "message": "param name missing: {opentype.Font}",
            "line": " p5.js:30563"
        },
        {
            "message": "param name missing: {Array}",
            "line": " p5.js:30563"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:30598"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:30607"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:30617"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:30649"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:34359"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34369"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:34369"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:34369"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34380"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:34380"
        },
        {
            "message": "unknown tag: memberof",
            "line": " p5.js:34380"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34404"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34445"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34478"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34510"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34551"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:34596"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:34619"
        },
        {
            "message": "unknown tag: instance",
            "line": " p5.js:34637"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:34666"
        },
        {
            "message": "param name missing: {opentype.Font}",
            "line": " p5.js:34666"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:34687"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:34747"
        },
        {
            "message": "param name missing: {opentype.Font}",
            "line": " p5.js:34747"
        },
        {
            "message": "unknown tag: typedef",
            "line": " p5.js:38839"
        },
        {
            "message": "unknown tag: exports",
            "line": " p5.js:38866"
        },
        {
            "message": "param name missing: {FontOptions}",
            "line": " p5.js:38866"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:38961"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:38970"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:38981"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:38999"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:39061"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:39069"
        },
        {
            "message": "param name missing: {Number}",
            "line": " p5.js:39084"
        },
        {
            "message": "unknown tag: typedef",
            "line": " p5.js:39118"
        },
        {
            "message": "param name missing: {string}",
            "line": " p5.js:39320"
        },
        {
            "message": "param name missing: {DataView}",
            "line": " p5.js:39939"
        },
        {
            "message": "param name missing: {Number}",
            "line": " p5.js:39939"
        },
        {
            "message": "param name missing: {DataView}",
            "line": " p5.js:39966"
        },
        {
            "message": "param name missing: {Number}",
            "line": " p5.js:39966"
        },
        {
            "message": "unknown tag: typedef",
            "line": " p5.js:40000"
        },
        {
            "message": "param name missing: {DataView}",
            "line": " p5.js:40007"
        },
        {
            "message": "param name missing: {Object}",
            "line": " p5.js:40007"
        },
        {
            "message": "param name missing: {ArrayBuffer}",
            "line": " p5.js:40038"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:40260"
        },
        {
            "message": "unknown tag: alias",
            "line": " p5.js:40287"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44033"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44033"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44094"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44138"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44319"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44348"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44383"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44480"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44510"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44550"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44664"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44918"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44947"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44971"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:44995"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:45420"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:45914"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:45948"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46067"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46227"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46268"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46308"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46481"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46565"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:46978"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47440"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47467"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47517"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47548"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47616"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47719"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47742"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47760"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47778"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47793"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47809"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47887"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47937"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:47973"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:47992"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:47992"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:48049"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:48082"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:48107"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:48386"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:48496"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:48601"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:48758"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:50820"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:50820"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:50938"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:51190"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:51221"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:51576"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:51996"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52063"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52103"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52138"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52195"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52241"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52303"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52352"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52403"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52459"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52500"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52541"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52588"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52627"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52674"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52712"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52855"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:52970"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55177"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55289"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55347"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55368"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55407"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55491"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55491"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55820"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55860"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55924"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:55993"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56074"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56156"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56222"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56311"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56436"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56436"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56544"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56613"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56648"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56688"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56760"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56806"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56806"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56933"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:56988"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57067"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57169"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57209"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57304"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57427"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57489"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57693"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57826"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57871"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:57943"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58002"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58087"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58152"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58256"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58558"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58558"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58686"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58744"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58843"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:58944"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59050"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59050"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59300"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59325"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59364"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59400"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59436"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59474"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59548"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59587"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59626"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59744"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:59841"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:60889"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:60956"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:62453"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:62515"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:62619"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:62658"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:62778"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:63158"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:63679"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64599"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64637"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64660"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64726"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64759"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64792"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64830"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64876"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64921"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:64980"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65019"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65062"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65106"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65137"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65195"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65364"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65364"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65421"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65460"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65546"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65598"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65662"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65828"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65828"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65899"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65925"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65951"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:65983"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66014"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66052"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66090"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66130"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66170"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66208"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66296"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66350"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66430"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66511"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66587"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66656"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66741"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66794"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66840"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66888"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:66888"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:67033"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:67105"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:67831"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:67910"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:68249"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:68467"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:68703"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:68720"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:68896"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69001"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69065"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69164"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69164"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69164"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69412"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69447"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69497"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69552"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69589"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69696"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69758"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69820"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:69893"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70021"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70062"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70103"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70134"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70179"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70214"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70251"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70287"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70377"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70377"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70548"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70700"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70874"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:70963"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71006"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71078"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71165"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71335"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71462"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71742"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:71859"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:71859"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:72563"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:72708"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:72765"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:72834"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73196"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73259"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73306"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73351"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73399"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73463"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73656"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73708"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:73749"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74009"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74073"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74122"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74168"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74213"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74259"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74303"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74355"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74420"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74479"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74577"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74621"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74666"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74714"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74770"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:74835"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:75824"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:75824"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:75888"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:75932"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76004"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76053"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76091"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76138"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76193"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76231"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76293"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76348"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76403"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76455"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76489"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76543"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76589"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:76676"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76676"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76733"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76733"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:76733"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:77020"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:77159"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:79600"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:79629"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:79716"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:79981"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80017"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80044"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80071"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:80182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:80197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:80212"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80241"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80241"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80360"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80396"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80437"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80639"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80639"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:80860"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:81038"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:82680"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83025"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83025"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83139"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83250"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83326"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83395"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83480"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83568"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83621"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83621"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83667"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83688"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83715"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83737"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83758"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:83852"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:85975"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:85975"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:85975"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:85975"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:85975"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86191"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86535"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86620"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86724"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86832"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86870"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:86956"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:87322"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:87403"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:87403"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:87998"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88115"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:88115"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88115"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88286"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88390"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88435"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88535"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88535"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88616"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88690"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88770"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88836"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:88886"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89060"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89060"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89243"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89310"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89387"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89429"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89516"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89544"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89571"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89598"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89626"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89653"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89680"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89703"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:89726"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90010"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90068"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90126"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90278"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90350"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:90615"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:92125"
        },
        {
            "message": "unknown tag: parem",
            "line": " p5.js:92291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:92321"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:93024"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:93296"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:93337"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:93442"
        },
        {
            "message": "unknown tag: alt",
            "line": " p5.js:94618"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95481"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:95524"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95561"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95573"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95608"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95622"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95766"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " p5.js:95766"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95857"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95872"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " p5.js:95980"
        },
        {
            "message": "Missing item type\nIf `Buffer.TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Print warning and recommend using `buffer` v4.x which has an Object\n              implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nWe report that the browser does not support typed arrays if the are not subclassable\nusing __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n(See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\nfor __proto__ and has a buggy typed array implementation.",
            "line": " p5.js:16151"
        },
        {
            "message": "Missing item type\nThe Buffer constructor returns instances of `Uint8Array` that have their\nprototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n`Uint8Array`, so the returned instances will have all the node `Buffer` methods\nand the `Uint8Array` methods. Square bracket notation works as expected -- it\nreturns a single octet.\n\nThe `Uint8Array` prototype remains unmodified.",
            "line": " p5.js:16223"
        },
        {
            "message": "Missing item type\nFunctionally equivalent to Buffer(arg, encoding) but throws a TypeError\nif value is a number.\nBuffer.from(str[, encoding])\nBuffer.from(array)\nBuffer.from(buffer)\nBuffer.from(arrayBuffer[, byteOffset[, length]])",
            "line": " p5.js:16319"
        },
        {
            "message": "Missing item type\nCreates a new filled Buffer instance.\nalloc(size[, fill[, encoding]])",
            "line": " p5.js:16362"
        },
        {
            "message": "Missing item type\nEquivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.",
            "line": " p5.js:16375"
        },
        {
            "message": "Missing item type\nEquivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.",
            "line": " p5.js:16381"
        },
        {
            "message": "Missing item type\nhttps://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens",
            "line": " p5.js:25425"
        },
        {
            "message": "Missing item type\nReturns true if the bounding box is empty, that is, no points have been added to the box yet.",
            "line": " p5.js:25948"
        },
        {
            "message": "Missing item type\nAdd the point to the bounding box.\nThe x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.",
            "line": " p5.js:25955"
        },
        {
            "message": "Missing item type\nAdd a X coordinate to the bounding box.\nThis extends the bounding box to include the X coordinate.\nThis function is used internally inside of addBezier.",
            "line": " p5.js:25988"
        },
        {
            "message": "Missing item type\nAdd a Y coordinate to the bounding box.\nThis extends the bounding box to include the Y coordinate.\nThis function is used internally inside of addBezier.",
            "line": " p5.js:25998"
        },
        {
            "message": "Missing item type\nAdd a Bézier curve to the bounding box.\nThis extends the bounding box to include the entire Bézier.",
            "line": " p5.js:26008"
        },
        {
            "message": "Missing item type\nAdd a quadratic curve to the bounding box.\nThis extends the bounding box to include the entire quadratic curve.",
            "line": " p5.js:26080"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26114"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26126"
        },
        {
            "message": "Missing item type\nAdd the given path or list of commands to the commands of this path.",
            "line": " p5.js:26236"
        },
        {
            "message": "Missing item type\nCalculate the bounding box of the path.",
            "line": " p5.js:26256"
        },
        {
            "message": "Missing item type\nDraw the path to a 2D context.",
            "line": " p5.js:26315"
        },
        {
            "message": "Missing item type\nConvert the Path to a string of path data instructions\nSee http://www.w3.org/TR/SVG/paths.html#PathData",
            "line": " p5.js:26350"
        },
        {
            "message": "Missing item type\nConvert the path to an SVG <path> element, as a string.",
            "line": " p5.js:26404"
        },
        {
            "message": "Missing item type\nConvert the path to a DOM element.",
            "line": " p5.js:26430"
        },
        {
            "message": "Missing item type\nConvert an 8-bit unsigned integer to a list of 1 byte.",
            "line": " p5.js:26492"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26504"
        },
        {
            "message": "Missing item type\nConvert a 8-bit signed integer to a list of 1 byte.",
            "line": " p5.js:26510"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26519"
        },
        {
            "message": "Missing item type\nConvert an ASCII string to a list of bytes.",
            "line": " p5.js:26525"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26539"
        },
        {
            "message": "Missing item type\nConvert a 16-bit unsigned integer to a list of 2 bytes.",
            "line": " p5.js:26547"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26556"
        },
        {
            "message": "Missing item type\nConvert a 16-bit signed integer to a list of 2 bytes.",
            "line": " p5.js:26562"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26576"
        },
        {
            "message": "Missing item type\nConvert a 24-bit unsigned integer to a list of 3 bytes.",
            "line": " p5.js:26582"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26591"
        },
        {
            "message": "Missing item type\nConvert a 32-bit unsigned integer to a list of 4 bytes.",
            "line": " p5.js:26597"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26606"
        },
        {
            "message": "Missing item type\nConvert a 32-bit unsigned integer to a list of 4 bytes.",
            "line": " p5.js:26612"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26626"
        },
        {
            "message": "Missing item type\nConvert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.",
            "line": " p5.js:26641"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26659"
        },
        {
            "message": "Missing item type\nConvert a 4-char tag to a list of 4 bytes.",
            "line": " p5.js:26665"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26675"
        },
        {
            "message": "Missing item type\nConvert a numeric operand or charstring number to a variable-size list of bytes.",
            "line": " p5.js:26696"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26717"
        },
        {
            "message": "Missing item type\nConvert a signed number between -32768 and +32767 to a three-byte value.\nThis ensures we always use three bytes, but is not the most compact format.",
            "line": " p5.js:26725"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26735"
        },
        {
            "message": "Missing item type\nConvert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\nThis is useful if you want to be sure you always use four bytes,\nat the expense of wasting a few bytes for smaller numbers.",
            "line": " p5.js:26741"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26752"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26758"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26796"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26810"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26826"
        },
        {
            "message": "Missing item type\nConvert a JavaScript string to UTF16-BE.",
            "line": " p5.js:26842"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26858"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:26876"
        },
        {
            "message": "Missing item type\nDecodes an old-style Macintosh string. Returns either a Unicode JavaScript\nstring, or 'undefined' if the encoding is unsupported. For example, we do\nnot support Chinese, Japanese or Korean because these would need large\nmapping tables.",
            "line": " p5.js:26922"
        },
        {
            "message": "Missing item type\nEncodes an old-style Macintosh string. Returns a byte array upon success.\nIf the requested encoding is unsupported, or if the input string contains\na character that cannot be expressed in the encoding, the function returns\n'undefined'.",
            "line": " p5.js:27005"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27041"
        },
        {
            "message": "Missing item type\nEncode a list of variation adjustment deltas.\n\nVariation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\nThey indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\nwhen generating instances of variation fonts.",
            "line": " p5.js:27147"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27177"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27223"
        },
        {
            "message": "Missing item type\nConvert an object to a CFF DICT structure.\nThe keys should be numeric.\nThe values should be objects containing name / type / value.",
            "line": " p5.js:27231"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27255"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27263"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27275"
        },
        {
            "message": "Missing item type\nConvert a list of CharString operations to bytes.",
            "line": " p5.js:27316"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27345"
        },
        {
            "message": "Missing item type\nConvert an object containing name / type / value to bytes.",
            "line": " p5.js:27355"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27369"
        },
        {
            "message": "Missing item type\nConvert a table object to bytes.\nA table contains a list of fields containing the metadata (name, type and default value).\nThe table itself has the field values set as attributes.",
            "line": " p5.js:27382"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27434"
        },
        {
            "message": "Missing item type\nEncodes the table and returns an array of bytes",
            "line": " p5.js:27513"
        },
        {
            "message": "Missing item type\nGet the size of the table.",
            "line": " p5.js:27521"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27529"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27544"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:27561"
        },
        {
            "message": "Missing item type\nParse a list of items.\nRecord count is optional, if omitted it is read from the stream.\nitemCallback is one of the Parser methods.",
            "line": " p5.js:28032"
        },
        {
            "message": "Missing item type\nParse a list of records.\nRecord count is optional, if omitted it is read from the stream.\nExample of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }",
            "line": " p5.js:28065"
        },
        {
            "message": "Missing item type\nParse a GPOS valueRecord\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\nvalueFormat is optional, if omitted it is read from the stream.",
            "line": " p5.js:28133"
        },
        {
            "message": "Missing item type\nParse a list of GPOS valueRecords\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\nvalueFormat and valueCount are read from the stream.",
            "line": " p5.js:28184"
        },
        {
            "message": "Missing item type\nParse a list of offsets to lists of 16-bit integers,\nor a list of offsets to lists of offsets to any kind of items.\nIf itemCallback is not provided, a list of list of UShort is assumed.\nIf provided, itemCallback is called on each item and must parse the item.\nSee examples in tables/gsub.js",
            "line": " p5.js:28223"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30026"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30046"
        },
        {
            "message": "Missing item type\nGets the index of a glyph by name.",
            "line": " p5.js:30097"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30106"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30114"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30207"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30249"
        },
        {
            "message": "Missing item type\nCalculate the minimum bounding box for this glyph.",
            "line": " p5.js:30260"
        },
        {
            "message": "Missing item type\nConvert the glyph to a Path we can draw on a drawing context.",
            "line": " p5.js:30268"
        },
        {
            "message": "Missing item type\nSplit the glyph into contours.\nThis function is here for backwards compatibility, and to\nprovide raw access to the TrueType glyph outlines.",
            "line": " p5.js:30346"
        },
        {
            "message": "Missing item type\nCalculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.",
            "line": " p5.js:30377"
        },
        {
            "message": "Missing item type\nDraw the glyph on the given context.",
            "line": " p5.js:30434"
        },
        {
            "message": "Missing item type\nDraw the points of the glyph.\nOn-curve points will be drawn in blue, off-curve points will be drawn in red.",
            "line": " p5.js:30446"
        },
        {
            "message": "Missing item type\nDraw lines indicating important font measurements.\nBlack lines indicate the origin of the coordinate system (point 0,0).\nBlue lines indicate the glyph bounding box.\nGreen line indicates the advance width of the glyph.",
            "line": " p5.js:30496"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30586"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30598"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30607"
        },
        {
            "message": "Missing item type\nGenerate a stub glyph that can be filled with all metadata *except*\nthe \"points\" and \"path\" properties, which must be loaded only once\nthe glyph's path is actually requested for text shaping.",
            "line": " p5.js:30617"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:30649"
        },
        {
            "message": "Missing item type\nGet or create the Layout table (GSUB, GPOS etc).",
            "line": " p5.js:34391"
        },
        {
            "message": "Missing item type\nReturns all scripts in the substitution table.",
            "line": " p5.js:34404"
        },
        {
            "message": "Missing item type\nReturns the best bet for a script name.\nReturns 'DFLT' if it exists.\nIf not, returns 'latn' if it exists.\nIf neither exist, returns undefined.",
            "line": " p5.js:34419"
        },
        {
            "message": "Missing item type\nReturns all LangSysRecords in the given script.",
            "line": " p5.js:34445"
        },
        {
            "message": "Missing item type\nReturns a language system table",
            "line": " p5.js:34478"
        },
        {
            "message": "Missing item type\nGet a specific feature table.",
            "line": " p5.js:34510"
        },
        {
            "message": "Missing item type\nGet the lookup tables of a given type for a script/language/feature.",
            "line": " p5.js:34551"
        },
        {
            "message": "Missing item type\nFind a glyph in a class definition table\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table",
            "line": " p5.js:34596"
        },
        {
            "message": "Missing item type\nFind a glyph in a coverage table\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table",
            "line": " p5.js:34619"
        },
        {
            "message": "Missing item type\nReturns the list of glyph indexes of a coverage table.\nFormat 1: the list is stored raw\nFormat 2: compact list as range records.",
            "line": " p5.js:34637"
        },
        {
            "message": "Missing item type\nInit some data for faster and easier access later.",
            "line": " p5.js:34679"
        },
        {
            "message": "Missing item type\nFind a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.",
            "line": " p5.js:34687"
        },
        {
            "message": "Missing item type\nList all kerning lookup tables.",
            "line": " p5.js:34732"
        },
        {
            "message": "Missing item type\nCreate a default GSUB table.",
            "line": " p5.js:34790"
        },
        {
            "message": "Missing item type\nList all single substitutions (lookup type 1) for a given script, language, and feature.",
            "line": " p5.js:34816"
        },
        {
            "message": "Missing item type\nList all alternates (lookup type 3) for a given script, language, and feature.",
            "line": " p5.js:34851"
        },
        {
            "message": "Missing item type\nList all ligatures (lookup type 4) for a given script, language, and feature.\nThe result is an array of ligature objects like { sub: [ids], by: id }",
            "line": " p5.js:34877"
        },
        {
            "message": "Missing item type\nAdd or modify a single substitution (lookup type 1)\nFormat 2, more flexible, is always used.",
            "line": " p5.js:34912"
        },
        {
            "message": "Missing item type\nAdd or modify an alternate substitution (lookup type 1)",
            "line": " p5.js:34954"
        },
        {
            "message": "Missing item type\nAdd a ligature (lookup type 4)\nLigatures with more components must be stored ahead of those with fewer components in order to be found",
            "line": " p5.js:34995"
        },
        {
            "message": "Missing item type\nList all feature data for a given script and language.",
            "line": " p5.js:35057"
        },
        {
            "message": "Missing item type\nAdd a substitution to a feature for a given script and language.",
            "line": " p5.js:35083"
        },
        {
            "message": "Missing item type\nMathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n                      (pv)\n                   .-'\n            rpd .-'\n             .-*\n        d .-'90°'\n       .-'       '\n    .-'           '\n *-'               ' b\nrp                  '\n                     '\n                      '\n          p *----------*-------------- (fv)\n                        pm\n\nrpdx = rpx + d * pv.x\nrpdy = rpy + d * pv.y\n\nequation of line b\n\n y - rpdy = pvns * (x- rpdx)\n\n y = p.y\n\n x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n  * pm\n  |\\\n  | \\\n  |  \\\n  |   \\\n  |    \\\n  |     \\\n  |      \\\n  |       \\\n  |        \\\n  |         \\ b\n  |          \\\n  |           \\\n  |            \\    .-' (pv)\n  |         90° \\.-'\n  |           .-'* rpd\n  |        .-'\n  *     *-'  d\n  p     rp\n\nrpdx = rpx + d * pv.x\nrpdy = rpy + d * pv.y\n\nequation of line b:\n         pvns ... normal slope to pv\n\n y - rpdy = pvns * (x - rpdx)\n\n x = p.x\n\n y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n                            .'(fv)\n                          .'\n                        .* pm\n                      .' !\n                    .'    .\n                  .'      !\n                .'         . b\n              .'           !\n             *              .\n            p               !\n                       90°   .    ... (pv)\n                         ...-*-'''\n                ...---'''    rpd\n       ...---'''   d\n *--'''\nrp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n\t equation of line b:\n  pvns... normal slope to pv\n\n  y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n  fvs ... slope of freedom vector (=fy/fx)\n\n  y - py = fvs * (x - px)\n\n\non pm both equations are true for same x/y\n\n  y - rpdy = pvns * (x - rpdx)\n\n  y - py = fvs * (x - px)\n\nform to y and set equal:\n\n  pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\nexpand:\n\n  pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\nswitch:\n\n  fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\nsolve for x:\n\n  fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n        fvs * px - pvns * rpdx + rpdy - py\n  x =  -----------------------------------\n               fvs - pvns\n\nand:\n\n  y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n         (+6)\n  rp1o *---->*rp1\n       .     .                          (+12)\n       .     .                  rp2o *---------->* rp2\n       .     .                       .           .\n       .     .                       .           .\n       .    10          20           .           .\n       |.........|...................|           .\n             .   .                               .\n             .   . (+8)                          .\n              po *------>*p                      .\n             .           .                       .\n             .    12     .          24           .\n             |...........|.......................|\n                                36\n\n\n\t-------\n\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .                      (-10)\n       .         .              rp2 *<---------* rpo2\n       .         .                   .         .\n       .         .                   .         .\n       .    10   .          30       .         .\n       |.........|.............................|\n                 .                   .\n                 . (+5)              .\n              po *--->* p            .\n                 .    .              .\n                 .    .   20         .\n                 |....|..............|\n                   5        15\n\n\n\t-------\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .\n       .         .\n  rp2o *-------->*rp2\n\n\n                             (+10)\n                        po *-------->* p\n\n\t-------\n\n\n         (+10)\n  rp1o *-------->*rp1\n       .         .\n       .         .(+30)\n  rp2o *---------------------------->*rp2\n\n\n                                      (+25)\n                        po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:",
            "line": " p5.js:38595"
        },
        {
            "message": "Missing item type\nCheck if the font has a glyph for the given character.",
            "line": " p5.js:38961"
        },
        {
            "message": "Missing item type\nConvert the given character to a single glyph index.\nNote that this function assumes that there is a one-to-one mapping between\nthe given character and a glyph; for complex scripts this might not be the case.",
            "line": " p5.js:38970"
        },
        {
            "message": "Missing item type\nConvert the given character to a single Glyph object.\nNote that this function assumes that there is a one-to-one mapping between\nthe given character and a glyph; for complex scripts this might not be the case.",
            "line": " p5.js:38981"
        },
        {
            "message": "Missing item type\nConvert the given text to a list of Glyph objects.\nNote that there is no strict one-to-one mapping between characters and\nglyphs, so the list of returned glyphs can be larger or smaller than the\nlength of the given string.",
            "line": " p5.js:38999"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39061"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39069"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39084"
        },
        {
            "message": "Missing item type\nRetrieve the value of the kerning pair between the left glyph (or its index)\nand the right glyph (or its index). If no kerning pair is found, return 0.\nThe kerning value gets added to the advance width when calculating the spacing\nbetween glyphs.\nFor GPOS kerning, this method uses the default script and language, which covers\nmost use cases. To have greater control, use font.position.getKerningValue .",
            "line": " p5.js:39096"
        },
        {
            "message": "Missing item type\nHelper function that invokes the given callback for each glyph in the given text.\nThe callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text",
            "line": " p5.js:39137"
        },
        {
            "message": "Missing item type\nCreate a Path object that represents the given text.",
            "line": " p5.js:39197"
        },
        {
            "message": "Missing item type\nCreate an array of Path objects that represent the glyphs of a given text.",
            "line": " p5.js:39220"
        },
        {
            "message": "Missing item type\nReturns the advance width of a text.\n\nThis is something different than Path.getBoundingBox() as for example a\nsuffixed whitespace increases the advanceWidth but not the bounding box\nor an overhanging letter like a calligraphic 'f' might have a quite larger\nbounding box than its advance width.\n\nThis corresponds to canvas2dContext.measureText(text).width",
            "line": " p5.js:39244"
        },
        {
            "message": "Missing item type\nDraw the text on the given drawing context.",
            "line": " p5.js:39263"
        },
        {
            "message": "Missing item type\nDraw the points of all glyphs in the text.\nOn-curve points will be drawn in blue, off-curve points will be drawn in red.",
            "line": " p5.js:39276"
        },
        {
            "message": "Missing item type\nDraw lines indicating important font measurements for all glyphs in the text.\nBlack lines indicate the origin of the coordinate system (point 0,0).\nBlue lines indicate the glyph bounding box.\nGreen line indicates the advance width of the glyph.",
            "line": " p5.js:39297"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39320"
        },
        {
            "message": "Missing item type\nValidate",
            "line": " p5.js:39331"
        },
        {
            "message": "Missing item type\nConvert the font object to a SFNT data structure.\nThis structure contains all the necessary tables and metadata to create a binary OTF file.",
            "line": " p5.js:39358"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39366"
        },
        {
            "message": "Missing item type\nConverts a `opentype.Font` into an `ArrayBuffer`",
            "line": " p5.js:39375"
        },
        {
            "message": "Missing item type\nInitiate a download of the OpenType font.",
            "line": " p5.js:39391"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39435"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39451"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:39466"
        },
        {
            "message": "Missing item type\nThe opentype library.",
            "line": " p5.js:39891"
        },
        {
            "message": "Missing item type\nLoads a font from a file. The callback throws an error message as the first parameter if it fails\nand the font as an ArrayBuffer in the second parameter if it succeeds.",
            "line": " p5.js:39897"
        },
        {
            "message": "Missing item type\nLoads a font from a URL. The callback throws an error message as the first parameter if it fails\nand the font as an ArrayBuffer in the second parameter if it succeeds.",
            "line": " p5.js:39913"
        },
        {
            "message": "Missing item type\nParses OpenType table entries.",
            "line": " p5.js:39939"
        },
        {
            "message": "Missing item type\nParses WOFF table entries.",
            "line": " p5.js:39966"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:40007"
        },
        {
            "message": "Missing item type\nParse the OpenType file data (as an ArrayBuffer) and return a Font object.\nThrows an error if the font could not be parsed.",
            "line": " p5.js:40038"
        },
        {
            "message": "Missing item type\nAsynchronously load the font from a URL or a filesystem. When done, call the callback\nwith two arguments `(err, font)`. The `err` will be null on success,\nthe `font` is a Font object.\nWe use the node.js callback convention so that\nopentype.js can integrate with frameworks like async.js.",
            "line": " p5.js:40260"
        },
        {
            "message": "Missing item type\nSynchronously load the font from a URL or file.\nWhen done, returns the font object or throws an error.",
            "line": " p5.js:40287"
        },
        {
            "message": "Missing item type\nConvert an HSLA array to HSBA.",
            "line": " p5.js:43786"
        },
        {
            "message": "Missing item type\nConvert an HSLA array to RGBA.\n\nWe need to change basis from HSLA to something that can be more easily be\nprojected onto RGBA. We will choose hue and brightness as our first two\ncomponents, and pick a convenient third one ('zest') so that we don't need\nto calculate formal HSBA saturation.",
            "line": " p5.js:43809"
        },
        {
            "message": "Missing item type\nConvert an RGBA array to HSBA.",
            "line": " p5.js:43873"
        },
        {
            "message": "Missing item type\nConvert an RGBA array to HSLA.",
            "line": " p5.js:43912"
        },
        {
            "message": "Missing item type\nHue is the same in HSB and HSL, but the maximum value may be different.\nThis function will return the HSB-normalized saturation when supplied with\nan HSB color object, but will default to the HSL-normalized saturation\notherwise.",
            "line": " p5.js:45066"
        },
        {
            "message": "Missing item type\nSaturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object, but will default\nto the HSL saturation otherwise.",
            "line": " p5.js:45097"
        },
        {
            "message": "Missing item type\nCSS named colors.",
            "line": " p5.js:45116"
        },
        {
            "message": "Missing item type\nThese regular expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases the\nlegibility and comprehensibility of the code.\n\nNote that RGB values of .9 are not parsed by IE, but are supported here for\ncolor string consistency.",
            "line": " p5.js:45270"
        },
        {
            "message": "Missing item type\nFull color string patterns. The capture groups are necessary.",
            "line": " p5.js:45283"
        },
        {
            "message": "Missing item type\nFor a number of different inputs, returns a color formatted as [r, g, b, a]\narrays, with each component normalized between 0 and 1.",
            "line": " p5.js:45420"
        },
        {
            "message": "Missing item type\nFor HSB and HSL, interpret the gray level as a brightness/lightness\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\ngray level according to the blue maximum.",
            "line": " p5.js:45645"
        },
        {
            "message": "Missing item type\nReturns the current framerate.",
            "line": " p5.js:47693"
        },
        {
            "message": "Missing item type\nSpecifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\nrecommended. The default rate is 60 frames per second.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.",
            "line": " p5.js:47703"
        },
        {
            "message": "Missing item type\nPrints out all the colors in the color pallete with white text.\nFor color blindness testing.",
            "line": " p5.js:49137"
        },
        {
            "message": "Missing item type\nGiven an Error object, extract the most information from it.",
            "line": " p5.js:49495"
        },
        {
            "message": "Missing item type\nValidates parameters\nparam  {String}               func    the name of the function\nparam  {Array}                args    user input arguments\n\nexample:\n const a;\n ellipse(10,10,a,5);\nconsole ouput:\n \"It looks like ellipse received an empty variable in spot #2.\"\n\nexample:\n ellipse(10,\"foo\",5,5);\nconsole output:\n \"ellipse was expecting a number for parameter #1,\n          received \"foo\" instead.\"",
            "line": " p5.js:50527"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:50669"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " p5.js:52776"
        },
        {
            "message": "Missing item type\nResize our canvas element.",
            "line": " p5.js:53195"
        },
        {
            "message": "Missing item type\nHelper fxn to check font type (system or otf)",
            "line": " p5.js:53465"
        },
        {
            "message": "Missing item type\nHelper fxn to measure ascent and descent.\nAdapted from http://stackoverflow.com/a/25355178",
            "line": " p5.js:53521"
        },
        {
            "message": "Missing item type\np5.Renderer2D\nThe 2D graphics canvas renderer class.\nextends p5.Renderer",
            "line": " p5.js:53615"
        },
        {
            "message": "Missing item type\nGenerate a cubic Bezier representing an arc on the unit circle of total\nangle `size` radians, beginning `start` radians above the x-axis. Up to\nfour of these curves are combined to make a full arc.\n\nSee www.joecridge.me/bezier.pdf for an explanation of the method.",
            "line": " p5.js:54026"
        },
        {
            "message": "Missing item type\nshim for Uint8ClampedArray.slice\n(allows arrayCopy to work with pixels[])\nwith thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\nEnumerable set to false to protect for...in from\nUint8ClampedArray.prototype pollution.",
            "line": " p5.js:58469"
        },
        {
            "message": "Missing item type\nthis is implementation of Object.assign() which is unavailable in\nIE11 and (non-Chrome) Android browsers.\nThe assign() method is used to copy the values of all enumerable\nown properties from one or more source objects to a target object.\nIt will return the target object.\nModified from https://github.com/ljharb/object.assign",
            "line": " p5.js:58490"
        },
        {
            "message": "Missing item type\nprivate helper function to handle the user passing in objects\nduring construction or calls to create()",
            "line": " p5.js:60181"
        },
        {
            "message": "Missing item type\nprivate helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "line": " p5.js:60371"
        },
        {
            "message": "Missing item type\nprivate helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "line": " p5.js:60431"
        },
        {
            "message": "Missing item type\nprivate helper function for finding lowest or highest value\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "line": " p5.js:60544"
        },
        {
            "message": "Missing item type\nprivate helper function for finding lowest or highest key\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "line": " p5.js:60608"
        },
        {
            "message": "Missing item type\nHelper function for select and selectAll",
            "line": " p5.js:60808"
        },
        {
            "message": "Missing item type\nHelper function for getElement and getElements.",
            "line": " p5.js:60823"
        },
        {
            "message": "Missing item type\nHelpers for create methods.",
            "line": " p5.js:60994"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:61141"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:62012"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:62128"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:62167"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:64137"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:64203"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:64265"
        },
        {
            "message": "Missing item type\n_updatePAccelerations updates the pAcceleration values",
            "line": " p5.js:64715"
        },
        {
            "message": "Missing item type\nThe onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will not fire if the user is\nnot focused on the element we must assume all keys currently down have\nbeen released.",
            "line": " p5.js:65652"
        },
        {
            "message": "Missing item type\nThe _areDownKeys function returns a boolean true if any keys pressed\nand a false if no keys are currently pressed.\n  \nHelps avoid instances where multiple keys are pressed simultaneously and\nreleasing a single key will then switch the\nkeyIsPressed property to true.",
            "line": " p5.js:65738"
        },
        {
            "message": "Missing item type\nThis module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "line": " p5.js:67189"
        },
        {
            "message": "Missing item type\nReturns the pixel buffer for a canvas",
            "line": " p5.js:67210"
        },
        {
            "message": "Missing item type\nReturns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "line": " p5.js:67229"
        },
        {
            "message": "Missing item type\nModifies pixels RGBA values to values contained in the data object.",
            "line": " p5.js:67250"
        },
        {
            "message": "Missing item type\nReturns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "line": " p5.js:67270"
        },
        {
            "message": "Missing item type\nReturns a blank ImageData object.",
            "line": " p5.js:67290"
        },
        {
            "message": "Missing item type\nApplys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "line": " p5.js:67305"
        },
        {
            "message": "Missing item type\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " p5.js:67350"
        },
        {
            "message": "Missing item type\nConverts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " p5.js:67384"
        },
        {
            "message": "Missing item type\nSets the alpha channel to entirely opaque. No parameter is used.",
            "line": " p5.js:67407"
        },
        {
            "message": "Missing item type\nSets each pixel to its inverse value. No parameter is used.",
            "line": " p5.js:67423"
        },
        {
            "message": "Missing item type\nLimits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "line": " p5.js:67438"
        },
        {
            "message": "Missing item type\nreduces the bright areas in an image",
            "line": " p5.js:67470"
        },
        {
            "message": "Missing item type\nincreases the bright areas in an image",
            "line": " p5.js:67557"
        },
        {
            "message": "Missing item type\nValidates clipping params. Per drawImage spec sWidth and sHight cannot be\nnegative or greater than image intrinsic width and height",
            "line": " p5.js:68703"
        },
        {
            "message": "Missing item type\nApply the current tint color to the input image, return the resulting\ncanvas.",
            "line": " p5.js:69029"
        },
        {
            "message": "Missing item type\nHelper function for animating GIF-based images with time",
            "line": " p5.js:69373"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " p5.js:69404"
        },
        {
            "message": "Missing item type\nGenerate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "line": " p5.js:72967"
        },
        {
            "message": "Missing item type\nReturns a file extension, or another string\nif the provided parameter has no extension.",
            "line": " p5.js:73040"
        },
        {
            "message": "Missing item type\nReturns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "line": " p5.js:73073"
        },
        {
            "message": "Missing item type\nHelper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "line": " p5.js:73085"
        },
        {
            "message": "Missing item type\nMultiplies a vector by a scalar and returns a new vector.",
            "line": " p5.js:79311"
        },
        {
            "message": "Missing item type\nRotates the vector (only 2D vectors) by the given angle, magnitude remains the same and returns a new vector.",
            "line": " p5.js:79363"
        },
        {
            "message": "Missing item type\nDivides a vector by a scalar and returns a new vector.",
            "line": " p5.js:79390"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " p5.js:79443"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " p5.js:79457"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "line": " p5.js:79471"
        },
        {
            "message": "Missing item type\nLinear interpolate a vector to another vector and return the result as a\nnew vector.",
            "line": " p5.js:79486"
        },
        {
            "message": "Missing item type\nCalculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x\\*x + y\\*y + z\\*z).)",
            "line": " p5.js:79515"
        },
        {
            "message": "Missing item type\nNormalize the vector to length 1 (make it a unit vector).",
            "line": " p5.js:79533"
        },
        {
            "message": "Missing item type\nHelper function to measure ascent and descent.",
            "line": " p5.js:80555"
        },
        {
            "message": "Missing item type\nReturns the set of opentype glyphs for the supplied string.\n\nNote that there is not a strict one-to-one mapping between characters\nand glyphs, so the list of returned glyphs can be larger or smaller\n than the length of the given string.",
            "line": " p5.js:81288"
        },
        {
            "message": "Missing item type\nReturns an opentype path for the supplied string and position.",
            "line": " p5.js:81303"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:84147"
        },
        {
            "message": "Missing item type\nDraws a point, a coordinate in space at the dimension of one pixel,\ngiven x, y and z coordinates. The color of the point is determined\nby the current stroke, while the point size is determined by current\nstroke weight.",
            "line": " p5.js:84833"
        },
        {
            "message": "Missing item type\nDraw a line given two points",
            "line": " p5.js:85277"
        },
        {
            "message": "Missing item type\nSTL files can be of two types, ASCII and Binary,\n\nWe need to convert the arrayBuffer to an array of strings,\nto parse it as an ASCII file.",
            "line": " p5.js:87683"
        },
        {
            "message": "Missing item type\nThis function checks if the file is in ASCII format or in Binary format\n\nIt is done by searching keyword `solid` at the start of the file.\n\nAn ASCII STL data must begin with `solid` as the first six bytes.\nHowever, ASCII STLs lacking the SPACE after the `d` are known to be\nplentiful. So, check the first 5 bytes for `solid`.\n\nSeveral encodings, such as UTF-8, precede the text with up to 5 bytes:\nhttps://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\nSearch for `solid` to start anywhere after those prefixes.",
            "line": " p5.js:87711"
        },
        {
            "message": "Missing item type\nThis function matches the `query` at the provided `offset`",
            "line": " p5.js:87738"
        },
        {
            "message": "Missing item type\nThis function parses the Binary STL files.\nhttps://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\n\nCurrently there is no support for the colors provided in STL files.",
            "line": " p5.js:87750"
        },
        {
            "message": "Missing item type\nASCII STL file starts with `solid 'nameOfFile'`\nThen contain the normal of the face, starting with `facet normal`\nNext contain a keyword indicating the start of face vertex, `outer loop`\nNext comes the three vertex, starting with `vertex x y z`\nVertices ends with `endloop`\nFace ends with `endfacet`\nNext face starts with `facet normal`\nThe end of the file is indicated by `endsolid`",
            "line": " p5.js:87838"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:88931"
        },
        {
            "message": "Missing item type",
            "line": " p5.js:88961"
        },
        {
            "message": "Missing item type\nCreate a 2D array for establishing stroke connections",
            "line": " p5.js:90927"
        },
        {
            "message": "Missing item type\nCreate 4 vertices for each stroke line, two at the beginning position\nand two at the end position. These vertices are displaced relative to\nthat line's normal on the GPU",
            "line": " p5.js:90948"
        },
        {
            "message": "Missing item type\nPRIVATE",
            "line": " p5.js:91758"
        },
        {
            "message": "Missing item type\nEnables and binds the buffers used by shader when the appropriate data exists in geometry.\nMust always be done prior to drawing geometry in WebGL.",
            "line": " p5.js:91827"
        },
        {
            "message": "Missing item type\nCalled from endShape(). This function calculates the stroke vertices for custom shapes and\ntesselates shapes when applicable.",
            "line": " p5.js:92090"
        },
        {
            "message": "Missing item type\nCalled from _processVertices(). This function calculates the stroke vertices for custom shapes and\ntesselates shapes when applicable.",
            "line": " p5.js:92125"
        },
        {
            "message": "Missing item type\nCalled from _processVertices() when applicable. This function tesselates immediateMode.geometry.",
            "line": " p5.js:92171"
        },
        {
            "message": "Missing item type\nCalled from endShape(). Responsible for calculating normals, setting shader uniforms,\nenabling all appropriate buffers, applying color blend, and drawing the fill geometry.",
            "line": " p5.js:92192"
        },
        {
            "message": "Missing item type\nCalled from endShape(). Responsible for calculating normals, setting shader uniforms,\nenabling all appropriate buffers, applying color blend, and drawing the stroke geometry.",
            "line": " p5.js:92249"
        },
        {
            "message": "Missing item type\nCalled from _drawImmediateFill(). Currently adds default normals which\nonly work for flat shapes.",
            "line": " p5.js:92291"
        },
        {
            "message": "Missing item type\ninitializes buffer defaults. runs each time a new geometry is\nregistered",
            "line": " p5.js:92321"
        },
        {
            "message": "Missing item type\ncreates a buffers object that holds the WebGL render buffers\nfor a geometry.",
            "line": " p5.js:92395"
        },
        {
            "message": "Missing item type\nDraws buffers given a geometry key ID",
            "line": " p5.js:92433"
        },
        {
            "message": "Missing item type\nmodel view, projection, & normal\nmatrices",
            "line": " p5.js:92807"
        },
        {
            "message": "Missing item type\n[background description]",
            "line": " p5.js:93278"
        },
        {
            "message": "Missing item type\n[resize description]",
            "line": " p5.js:93553"
        },
        {
            "message": "Missing item type\nclears color and depth buffers\nwith r,g,b,a",
            "line": " p5.js:93577"
        },
        {
            "message": "Missing item type\n[translate description]",
            "line": " p5.js:93608"
        },
        {
            "message": "Missing item type\nScales the Model View Matrix by a vector",
            "line": " p5.js:93627"
        },
        {
            "message": "Missing item type\nturn a two dimensional array into one dimensional array",
            "line": " p5.js:94067"
        },
        {
            "message": "Missing item type\nturn a p5.Vector Array into a one dimensional number array",
            "line": " p5.js:94105"
        },
        {
            "message": "Missing item type\nensures that p5 is using a 3d renderer. throws an error if not.",
            "line": " p5.js:94145"
        },
        {
            "message": "Missing item type\nHere, we define a default/fallback language which we can use without internet.\nYou won't have to change this when adding a new language.\n\n`translation` is the namespace we are using for our initial set of strings\n/ var _default = {\n           en: {\n             translation: _translation.default\n           }\n         };\n\n         /**\nThis is a list of languages that we have added so far.\nIf you have just added a new language (yay!), add its key to the list below\n(`en` is english, `es` es español). Also add its export to\ndev.js, which is another file in this folder.\n/ exports.default = _default;\n         var languages = ['en', 'es'];\n         exports.languages = languages;\n       },\n       { './en/translation': 117 }\n     ]\n   },\n   {},\n   [43]\n )(43);\n});",
            "line": " p5.js:96335"
        }
    ]
}